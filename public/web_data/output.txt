[{
    "title": "Awesome Things Related To React Hooks üòç",
    "tags": ["#javascript", "#react", "#reacthooks", "#github"],
    "link": "https://dev.to/said_mounaim/awesome-things-related-to-react-hooks-30c4",
    "reactions": 158,
    "cmt": 8,
    "content": "\nawesome-react-hooks\n\tA curated list of awesome things related to React Hooks\n\nResources\n\tOfficial\n\tRelated awesome lists\n\tArticles\n\tPackages\n\t\tFor More Check the repo\n\t\thttps://github.com/saidMounaim/awesome-react-hooks\n\n\n"
}, {
    "title": "300+ React Interview Questions",
    "tags": ["#react", "#webdev", "#javascript", "#beginners"],
    "link": "https://dev.to/sakhnyuk/300-react-interview-questions-2ko4",
    "reactions": 1272,
    "cmt": 49,
    "content": "Today I prepared a huge list of React Interview Questions from this awesome repo\nFor more info, I have developed a project with more than 500 questions for Frontend Devs\nHere you are: https://iq.js.org/\nIf you like the article, add to bookmark for future and follow me there:\nTable of Contents\nCore React\n\tWhat is React?\n\t\tReact is an open-source frontend JavaScript library which is used for building user interfaces especially for single page applications. It is used for handling view layer for web and mobile apps. React was created by Jordan Walke, a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the major features of React?\n\t\tThe major features of React are:\n\t\t‚¨Ü Back to Top\n\n\tWhat is JSX?\n\t\tJSX is a XML-like syntax extension to ECMAScript (the acronym stands for JavaScript XML). Basically it just provides syntactic sugar for the React.createElement() function, giving us expressiveness of JavaScript along with HTML like template syntax.\n\t\tIn the example below text inside <h1> tag is returned as JavaScript function to the render function.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between Element and Component?\n\t\tAn Element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other Elements in their props. Creating a React element is cheap. Once an element is created, it is never mutated.\n\t\tThe object representation of React Element would be as follows:\n\t\tThe above React.createElement() function returns an object:\n\t\tAnd finally it renders to the DOM using ReactDOM.render():\n\t\tWhereas a component can be declared in several different ways. It can be a class with a render() method. Alternatively, in simple cases, it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output:\n\t\tThen JSX gets transpiled to a React.createElement() function tree:\n\t\t‚¨Ü Back to Top\n\n\tHow to create components in React?\n\t\tThere are two possible ways to create a component.\n\t\t‚¨Ü Back to Top\n\n\tWhen to use a Class Component over a Function Component?\n\t\tIf the component needs state or lifecycle methods then use class component otherwise use function component. However, from React 16.8 with the addition of Hooks, you could use state , lifecycle methods and other features that were only available in class component right in your function component.\n\t\t‚¨Ü Back to Top\n\n\tWhat are Pure Components?\n\t\tReact.PureComponent is exactly the same as React.Component except that it handles the shouldComponentUpdate() method for you. When props or state changes, PureComponent will do a shallow comparison on both props and state. Component on the other hand won't compare current props and state to next out of the box. Thus, the component will re-render by default whenever shouldComponentUpdate is called.\n\t\t‚¨Ü Back to Top\n\n\tWhat is state in React?\n\t\tState of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components.\n\t\tLet's create an user component with message state,\n\t\tState is similar to props, but it is private and fully controlled by the component. i.e, It is not accessible to any component other than the one that owns and sets it.\n\t\t‚¨Ü Back to Top\n\n\tWhat are props in React?\n\t\tProps are inputs to components. They are single values or objects containing a set of values that are passed to components on creation using a naming convention similar to HTML-tag attributes. They are data passed down from a parent component to a child component.\n\t\tThe primary purpose of props in React is to provide following component functionality:\n\t\tFor example, let us create an element with reactProp property:\n\t\tThis reactProp (or whatever you came up with) name then becomes a property attached to React's native props object which originally already exists on all components created using React library.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between state and props?\n\t\tBoth props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.\n\t\t‚¨Ü Back to Top\n\n\tWhy should we not update the state directly?\n\t\tIf you try to update state directly then it won't re-render the component.\n\t\tInstead use setState() method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering.\n\t\tNote: You can directly assign to the state object either in constructor or using latest javascript's class field declaration syntax.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of callback function as an argument of setState()?\n\t\tThe callback function is invoked when setState finished and the component gets rendered. Since setState() is asynchronous the callback function is used for any post action.\n\t\tNote: It is recommended to use lifecycle method rather than this callback function.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between HTML and React event handling?\n\t\tBelow are some of the main differences between HTML and React event handling,\n\t\tWhereas in React it follows camelCase convention:\n\t\tWhereas in React you must call preventDefault() explicitly:\n\t\t‚¨Ü Back to Top\n\n\tHow to bind methods or event handlers in JSX callbacks?\n\t\tThere are 3 possible ways to achieve this:\n\t\tNote: If the callback is passed as prop to child components, those components might do an extra re-rendering. In those cases, it is preferred to go with .bind() or public class fields syntax approach considering performance.\n\t\t‚¨Ü Back to Top\n\n\tHow to pass a parameter to an event handler or callback?\n\t\tYou can use an arrow function to wrap around an event handler and pass parameters:\n\t\tThis is an equivalent to calling .bind:\n\t\tApart from these two approaches, you can also pass arguments to a function which is defined as arrow function\n\t\t‚¨Ü Back to Top\n\n\tWhat are synthetic events in React?\n\t\tSyntheticEvent is a cross-browser wrapper around the browser's native event. It's API is same as the browser's native event, including stopPropagation() and preventDefault(), except the events work identically across all browsers.\n\t\t‚¨Ü Back to Top\n\n\tWhat are inline conditional expressions?\n\t\tYou can use either if statements or ternary expressions which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator &&.\n\t\t‚¨Ü Back to Top\n\n\tWhat is \"key\" prop and what is the benefit of using it in arrays of elements?\n\t\tA key is a special string attribute you should include when creating arrays of elements. Key prop helps React identify which items have changed, are added, or are removed.\n\t\tMost often we use ID from our data as key:\n\t\tWhen you don't have stable IDs for rendered items, you may use the item index as a key as a last resort:\n\t\tNote:\n\t\t‚¨Ü Back to Top\n\n\tWhat is the use of refs?\n\t\tThe ref is used to return a reference to the element. They should be avoided in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component.\n\t\t‚¨Ü Back to Top\n\n\tHow to create refs?\n\t\tThere are two approaches\n\t\tYou can also use refs in function components using closures. Note: You can also use inline ref callbacks even though it is not a recommended approach\n\t\t‚¨Ü Back to Top\n\n\tWhat are forward refs?\n\t\tRef forwarding is a feature that lets some components take a ref they receive, and pass it further down to a child.\n\t\t‚¨Ü Back to Top\n\n\tWhich is preferred option with in callback refs and findDOMNode()?\n\t\tIt is preferred to use callback refs over findDOMNode() API. Because findDOMNode() prevents certain improvements in React in the future.\n\t\tThe legacy approach of using findDOMNode:\n\t\tThe recommended approach is:\n\t\t‚¨Ü Back to Top\n\n\tWhy are String Refs legacy?\n\t\tIf you worked with React before, you might be familiar with an older API where the ref attribute is a string, like ref={'textInput'}, and the DOM node is accessed as this.refs.textInput. We advise against it because string refs have below issues, and are considered legacy. String refs were removed in React v16.\n\t\t‚¨Ü Back to Top\n\n\tWhat is Virtual DOM?\n\t\tThe Virtual DOM (VDOM) is an in-memory representation of Real DOM. The representation of a UI is kept in memory and synced with the \"real\" DOM. It's a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called reconciliation.\n\t\t‚¨Ü Back to Top\n\n\tHow Virtual DOM works?\n\t\tThe Virtual DOM works in three simple steps.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between Shadow DOM and Virtual DOM?\n\t\tThe Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components. The Virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs.\n\t\t‚¨Ü Back to Top\n\n\tWhat is React Fiber?\n\t\tFiber is the new reconciliation engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the main goal of React Fiber?\n\t\tThe goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames.\n\t\t‚¨Ü Back to Top\n\n\tWhat are controlled components?\n\t\tA component that controls the input elements within the forms on subsequent user input is called Controlled Component, i.e, every state mutation will have an associated handler function.\n\t\tFor example, to write all the names in uppercase letters, we use handleChange as below,\n\t\t‚¨Ü Back to Top\n\n\tWhat are uncontrolled components?\n\t\tThe Uncontrolled Components are the ones that store their own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML.\n\t\tIn the below UserProfile component, the name input is accessed using ref.\n\t\tIn most cases, it's recommend to use controlled components to implement forms.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between createElement and cloneElement?\n\t\tJSX elements will be transpiled to React.createElement() functions to create React elements which are going to be used for the object representation of UI. Whereas cloneElement is used to clone an element and pass it new props.\n\t\t‚¨Ü Back to Top\n\n\tWhat is Lifting State Up in React?\n\t\tWhen several components need to share the same changing data then it is recommended to lift the shared state up to their closest common ancestor. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the different phases of component lifecycle?\n\t\tThe component lifecycle has three distinct lifecycle phases:\n\t\tIt's worth mentioning that React internally has a concept of phases when applying changes to the DOM. They are separated as follows\n\t\tReact 16.3+ Phases (or an interactive version)\n\t\tBefore React 16.3\n\t\t‚¨Ü Back to Top\n\n\tWhat are the lifecycle methods of React?\n\t\tBefore React 16.3\n\t\tReact 16.3+\n\t\t‚¨Ü Back to Top\n\n\tWhat are Higher-Order Components?\n\t\tA higher-order component (HOC) is a function that takes a component and returns a new component. Basically, it's a pattern that is derived from React's compositional nature.\n\t\tWe call them pure components because they can accept any dynamically provided child component but they won't modify or copy any behavior from their input components.\n\t\tHOC can be used for many use cases:\n\t\t‚¨Ü Back to Top\n\n\tHow to create props proxy for HOC component?\n\t\tYou can add/edit props passed to the component using props proxy pattern like this:\n\t\t‚¨Ü Back to Top\n\n\tWhat is context?\n\t\tContext provides a way to pass data through the component tree without having to pass props down manually at every level.\n\t\tFor example, authenticated user, locale preference, UI theme need to be accessed in the application by many components.\n\t\t‚¨Ü Back to Top\n\n\tWhat is children prop?\n\t\tChildren is a prop (this.props.children) that allow you to pass components as data to other components, just like any other prop you use. Component tree put between component's opening and closing tag will be passed to that component as children prop.\n\t\tThere are a number of methods available in the React API to work with this prop. These include React.Children.map, React.Children.forEach, React.Children.count, React.Children.only, React.Children.toArray.\n\t\tA simple usage of children prop looks as below,\n\t\t‚¨Ü Back to Top\n\n\tHow to write comments in React?\n\t\tThe comments in React/JSX are similar to JavaScript Multiline comments but are wrapped in curly braces.\n\t\tSingle-line comments:\n\t\tMulti-line comments:\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of using super constructor with props argument?\n\t\tA child class constructor cannot make use of this reference until super() method has been called. The same applies for ES6 sub-classes as well. The main reason of passing props parameter to super() call is to access this.props in your child constructors.\n\t\tPassing props:\n\t\tNot passing props:\n\t\tThe above code snippets reveals that this.props is different only within the constructor. It would be the same outside the constructor.\n\t\t‚¨Ü Back to Top\n\n\tWhat is reconciliation?\n\t\tWhen a component's props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called reconciliation.\n\t\t‚¨Ü Back to Top\n\n\tHow to set state with a dynamic key name?\n\t\tIf you are using ES6 or the Babel transpiler to transform your JSX code then you can accomplish this with computed property names.\n\t\t‚¨Ü Back to Top\n\n\tWhat would be the common mistake of function being called every time the component renders?\n\t\tYou need to make sure that function is not being called while passing the function as a parameter.\n\t\tInstead, pass the function itself without parenthesis:\n\t\t‚¨Ü Back to Top\n\n\tIs lazy function supports named exports?\n\t\tNo, currently React.lazy function supports default exports only. If you would like to import modules which are named exports, you can create an intermediate module that reexports it as the default. It also ensures that tree shaking keeps working and don‚Äôt pull unused components. Let's take a component file which exports multiple named components,\n\t\tand reexport MoreComponents.js components in an intermediate file IntermediateComponent.js\n\t\tNow you can import the module using lazy function as below,\n\t\t‚¨Ü Back to Top\n\n\tWhy React uses className over class attribute?\n\t\tclass is a keyword in JavaScript, and JSX is an extension of JavaScript. That's the principal reason why React uses className instead of class. Pass a string as the className prop.\n\t\t‚¨Ü Back to Top\n\n\tWhat are fragments?\n\t\tIt's common pattern in React which is used for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.\n\t\tThere is also a shorter syntax, but it's not supported in many tools:\n\t\t‚¨Ü Back to Top\n\n\tWhy fragments are better than container divs?\n\t\tBelow are the list of reasons,\n\t\t‚¨Ü Back to Top\n\n\tWhat are portals in React?\n\t\tPortal is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\n\t\tThe first argument is any render-able React child, such as an element, string, or fragment. The second argument is a DOM element.\n\t\t‚¨Ü Back to Top\n\n\tWhat are stateless components?\n\t\tIf the behaviour is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components. There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, and you can avoid the this keyword altogether.\n\t\t‚¨Ü Back to Top\n\n\tWhat are stateful components?\n\t\tIf the behaviour of a component is dependent on the state of the component then it can be termed as stateful component. These stateful components are always class components and have a state that gets initialized in the constructor.\n\t\tReact 16.8 Update:\n\t\tHooks let you use state and other React features without writing classes.\n\t\tThe Equivalent Functional Component\n\t\t‚¨Ü Back to Top\n\n\tHow to apply validation on props in React?\n\t\tWhen the application is running in development mode, React will automatically check all props that we set on components to make sure they have correct type. If the type is incorrect, React will generate warning messages in the console. It's disabled in production mode due to performance impact. The mandatory props are defined with isRequired.\n\t\tThe set of predefined prop types:\n\t\tWe can define propTypes for User component as below:\n\t\tNote: In React v15.5 PropTypes were moved from React.PropTypes to prop-types library.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the advantages of React?\n\t\tBelow are the list of main advantages of React,\n\t\t‚¨Ü Back to Top\n\n\tWhat are the limitations of React?\n\t\tApart from the advantages, there are few limitations of React too,\n\t\t‚¨Ü Back to Top\n\n\tWhat are error boundaries in React v16?\n\t\tError boundaries are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.\n\t\tA class component becomes an error boundary if it defines a new lifecycle method called componentDidCatch(error, info) or static getDerivedStateFromError():\n\t\tAfter that use it as a regular component:\n\t\t‚¨Ü Back to Top\n\n\tHow error boundaries handled in React v15?\n\t\tReact v15 provided very basic support for error boundaries using unstable_handleError method. It has been renamed to componentDidCatch in React v16.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the recommended ways for static type checking?\n\t\tNormally we use PropTypes library (React.PropTypes moved to a prop-types package since React v15.5) for type checking in the React applications. For large code bases, it is recommended to use static type checkers such as Flow or TypeScript, that perform type checking at compile time and provide auto-completion features.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the use of react-dom package?\n\t\tThe react-dom package provides DOM-specific methods that can be used at the top level of your app. Most of the components are not required to use this module. Some of the methods of this package are:\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of render method of react-dom?\n\t\tThis method is used to render a React element into the DOM in the supplied container and return a reference to the component. If the React element was previously rendered into container, it will perform an update on it and only mutate the DOM as necessary to reflect the latest changes.\n\t\tIf the optional callback is provided, it will be executed after the component is rendered or updated.\n\t\t‚¨Ü Back to Top\n\n\tWhat is ReactDOMServer?\n\t\tThe ReactDOMServer object enables you to render components to static markup (typically used on node server). This object is mainly used for server-side rendering (SSR). The following methods can be used in both the server and browser environments:\n\t\tFor example, you generally run a Node-based web server like Express, Hapi, or Koa, and you call renderToString to render your root component to a string, which you then send as response.\n\t\t‚¨Ü Back to Top\n\n\tHow to use innerHTML in React?\n\t\tThe dangerouslySetInnerHTML attribute is React's replacement for using innerHTML in the browser DOM. Just like innerHTML, it is risky to use this attribute considering cross-site scripting (XSS) attacks. You just need to pass a __html object as key and HTML text as value.\n\t\tIn this example MyComponent uses dangerouslySetInnerHTML attribute for setting HTML markup:\n\t\t‚¨Ü Back to Top\n\n\tHow to use styles in React?\n\t\tThe style attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes.\n\t\tStyle keys are camelCased in order to be consistent with accessing the properties on DOM nodes in JavaScript (e.g. node.style.backgroundImage).\n\t\t‚¨Ü Back to Top\n\n\tHow events are different in React?\n\t\tHandling events in React elements has some syntactic differences:\n\t\t‚¨Ü Back to Top\n\n\tWhat will happen if you use setState() in constructor?\n\t\tWhen you use setState(), then apart from assigning to the object state React also re-renders the component and all its children. You would get error like this: Can only update a mounted or mounting component. So we need to use this.state to initialize variables inside constructor.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the impact of indexes as keys?\n\t\tKeys should be stable, predictable, and unique so that React can keep track of elements.\n\t\tIn the below code snippet each element's key will be based on ordering, rather than tied to the data that is being represented. This limits the optimizations that React can do.\n\t\tIf you use element data for unique key, assuming todo.id is unique to this list and stable, React would be able to reorder elements without needing to reevaluate them as much.\n\t\t‚¨Ü Back to Top\n\n\tIs it good to use setState() in componentWillMount() method?\n\t\tYes, it is safe to use setState() inside componentWillMount() method. But at the same it is recommended to avoid async initialization in componentWillMount() lifecycle method. componentWillMount() is invoked immediately before mounting occurs. It is called before render(), therefore setting state in this method will not trigger a re-render. Avoid introducing any side-effects or subscriptions in this method. We need to make sure async calls for component initialization happened in componentDidMount() instead of componentWillMount().\n\t\t‚¨Ü Back to Top\n\n\tWhat will happen if you use props in initial state?\n\t\tIf the props on the component are changed without the component being refreshed, the new prop value will never be displayed because the constructor function will never update the current state of the component. The initialization of state from props only runs when the component is first created.\n\t\tThe below component won't display the updated input value:\n\t\tUsing props inside render method will update the value:\n\t\t‚¨Ü Back to Top\n\n\tHow do you conditionally render components?\n\t\tIn some cases you want to render different components depending on some state. JSX does not render false or undefined, so you can use conditional short-circuiting to render a given part of your component only if a certain condition is true.\n\t\tIf you need an if-else condition then use ternary operator.\n\t\t‚¨Ü Back to Top\n\n\tWhy we need to be careful when spreading props on DOM elements?\n\t\tWhen we spread props we run into the risk of adding unknown HTML attributes, which is a bad practice. Instead we can use prop destructuring with ...rest operator, so it will add only required props.\n\t\tFor example,\n\t\t‚¨Ü Back to Top\n\n\tHow you use decorators in React?\n\t\tYou can decorate your class components, which is the same as passing the component into a function. Decorators are flexible and readable way of modifying component functionality.\n\t\tNote: Decorators are a feature that didn't make it into ES7, but are currently a stage 2 proposal.\n\t\t‚¨Ü Back to Top\n\n\tHow do you memoize a component?\n\t\tThere are memoize libraries available which can be used on function components.\n\t\tFor example moize library can memoize the component in another component.\n\t\tUpdate: Since React v16.6.0, we have a React.memo. It provides a higher order component which memoizes component unless the props change. To use it, simply wrap the component using React.memo before you use it.\n\t\t‚¨Ü Back to Top\n\n\tHow you implement Server Side Rendering or SSR?\n\t\tReact is already equipped to handle rendering on Node servers. A special version of the DOM renderer is available, which follows the same pattern as on the client side.\n\t\tThis method will output the regular HTML as a string, which can be then placed inside a page body as part of the server response. On the client side, React detects the pre-rendered content and seamlessly picks up where it left off.\n\t\t‚¨Ü Back to Top\n\n\tHow to enable production mode in React?\n\t\tYou should use Webpack's DefinePlugin method to set NODE_ENV to production, by which it strip out things like propType validation and extra warnings. Apart from this, if you minify the code, for example, Uglify's dead-code elimination to strip out development only code and comments, it will drastically reduce the size of your bundle.\n\t\t‚¨Ü Back to Top\n\n\tWhat is CRA and its benefits?\n\t\tThe create-react-app CLI tool allows you to quickly create & run React applications with no configuration step.\n\t\tLet's create Todo App using CRA:\n\t\tIt includes everything we need to build a React app:\n\t\t‚¨Ü Back to Top\n\n\tWhat is the lifecycle methods order in mounting?\n\t\tThe lifecycle methods are called in the following order when an instance of a component is being created and inserted into the DOM.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the lifecycle methods going to be deprecated in React v16?\n\t\tThe following lifecycle methods going to be unsafe coding practices and will be more problematic with async rendering.\n\t\tStarting with React v16.3 these methods are aliased with UNSAFE_ prefix, and the unprefixed version will be removed in React v17.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of getDerivedStateFromProps() lifecycle method?\n\t\tThe new static getDerivedStateFromProps() lifecycle method is invoked after a component is instantiated as well as before it is re-rendered. It can return an object to update state, or null to indicate that the new props do not require any state updates.\n\t\tThis lifecycle method along with componentDidUpdate() covers all the use cases of componentWillReceiveProps().\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of getSnapshotBeforeUpdate() lifecycle method?\n\t\tThe new getSnapshotBeforeUpdate() lifecycle method is called right before DOM updates. The return value from this method will be passed as the third parameter to componentDidUpdate().\n\t\tThis lifecycle method along with componentDidUpdate() covers all the use cases of componentWillUpdate().\n\t\t‚¨Ü Back to Top\n\n\tDo Hooks replace render props and higher order components?\n\t\tBoth render props and higher-order components render only a single child but in most of the cases Hooks are a simpler way to serve this by reducing nesting in your tree.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the recommended way for naming components?\n\t\tIt is recommended to name the component by reference instead of using displayName.\n\t\tUsing displayName for naming component:\n\t\tThe recommended approach:\n\t\t‚¨Ü Back to Top\n\n\tWhat is the recommended ordering of methods in component class?\n\t\tRecommended ordering of methods from mounting to render stage:\n\t\t‚¨Ü Back to Top\n\n\tWhat is a switching component?\n\t\tA switching component is a component that renders one of many components. We need to use object to map prop values to components.\n\t\tFor example, a switching component to display different pages based on page prop:\n\t\t‚¨Ü Back to Top\n\n\tWhy we need to pass a function to setState()?\n\t\tThe reason behind for this is that setState() is an asynchronous operation. React batches state changes for performance reasons, so the state may not change immediately after setState() is called. That means you should not rely on the current state when calling setState()‚Ääsince you can't be sure what that state will be. The solution is to pass a function to setState(), with the previous state as an argument. By doing this you can avoid issues with the user getting the old state value on access due to the asynchronous nature of setState().\n\t\tLet's say the initial count value is zero. After three consecutive increment operations, the value is going to be incremented only by one.\n\t\tIf we pass a function to setState(), the count gets incremented correctly.\n\t\t(OR)\n\n\tWhy function is preferred over object for setState()?\n\t\tReact may batch multiple setState() calls into a single update for performance. Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.\n\t\tThis counter example will fail to update as expected:\n\t\tThe preferred approach is to call setState() with function rather than object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument.\n\t\t‚¨Ü Back to Top\n\n\tWhat is strict mode in React?\n\t\tReact.StrictMode is a useful component for highlighting potential problems in an application. Just like <Fragment>, <StrictMode> does not render any extra DOM elements. It activates additional checks and warnings for its descendants. These checks apply for development mode only.\n\t\tIn the example above, the strict mode checks apply to <ComponentOne> and <ComponentTwo> components only.\n\t\t‚¨Ü Back to Top\n\n\tWhat are React Mixins?\n\t\tMixins are a way to totally separate components to have a common functionality. Mixins should not be used and can be replaced with higher-order components or decorators.\n\t\tOne of the most commonly used mixins is PureRenderMixin. You might be using it in some components to prevent unnecessary re-renders when the props and state are shallowly equal to the previous props and state:\n\t\t‚¨Ü Back to Top\n\n\tWhy is isMounted() an anti-pattern and what is the proper solution?\n\t\tThe primary use case for isMounted() is to avoid calling setState() after a component has been unmounted, because it will emit a warning.\n\t\tChecking isMounted() before calling setState() does eliminate the warning, but it also defeats the purpose of the warning. Using isMounted() is a code smell because the only reason you would check is because you think you might be holding a reference after the component has unmounted.\n\t\tAn optimal solution would be to find places where setState() might be called after a component has unmounted, and fix them. Such situations most commonly occur due to callbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in componentWillUnmount(), prior to unmounting.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the Pointer Events supported in React?\n\t\tPointer Events provide a unified way of handling all input events. In the old days we had a mouse and respective event listeners to handle them but nowadays we have many devices which don't correlate to having a mouse, like phones with touch surface or pens. We need to remember that these events will only work in browsers that support the Pointer Events specification.\n\t\tThe following event types are now available in React DOM:\n\t\t‚¨Ü Back to Top\n\n\tWhy should component names start with capital letter?\n\t\tIf you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.\n\t\tYou can define component class which name starts with lowercase letter, but when it's imported it should have capital letter. Here lowercase is fine:\n\t\tWhile when imported in another file it should start with capital letter:\n\t\tThe component names should start with a uppercase letter but there are few exceptions on this convention. The lowercase tag names with a dot (property accessors) are still considered as valid component names.\n\t\tFor example the below tag can be compiled to a valid component,\n\t\t‚¨Ü Back to Top\n\n\tAre custom DOM attributes supported in React v16?\n\t\tYes. In the past, React used to ignore unknown DOM attributes. If you wrote JSX with an attribute that React doesn't recognize, React would just skip it.\n\t\tFor example, let's take a look at the below attribute:\n\t\tWould render an empty div to the DOM with React v15:\n\t\tIn React v16 any unknown attributes will end up in the DOM:\n\t\tThis is useful for supplying browser-specific non-standard attributes, trying new DOM APIs, and integrating with opinionated third-party libraries.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between constructor and getInitialState?\n\t\tYou should initialize state in the constructor when using ES6 classes, and getInitialState() method when using React.createClass().\n\t\tUsing ES6 classes:\n\t\tUsing React.createClass():\n\t\tNote: React.createClass() is deprecated and removed in React v16. Use plain JavaScript classes instead.\n\t\t‚¨Ü Back to Top\n\n\tCan you force a component to re-render without calling setState?\n\t\tBy default, when your component's state or props change, your component will re-render. If your render() method depends on some other data, you can tell React that the component needs re-rendering by calling forceUpdate().\n\t\tIt is recommended to avoid all uses of forceUpdate() and only read from this.props and this.state in render().\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between super() and super(props) in React using ES6 classes?\n\t\tWhen you want to access this.props in constructor() then you should pass props to super() method.\n\t\tUsing super(props):\n\t\tUsing super():\n\t\tOutside constructor() both will display same value for this.props.\n\t\t‚¨Ü Back to Top\n\n\tHow to loop inside JSX?\n\t\tYou can simply use Array.prototype.map with ES6 arrow function syntax.\n\t\tFor example, the items array of objects is mapped into an array of components:\n\t\tBut you can't iterate using for loop:\n\t\tThis is because JSX tags are transpiled into function calls, and you can't use statements inside expressions. This may change thanks to do expressions which are stage 1 proposal.\n\t\t‚¨Ü Back to Top\n\n\tHow do you access props in attribute quotes?\n\t\tReact (or JSX) doesn't support variable interpolation inside an attribute value. The below representation won't work:\n\t\tBut you can put any JS expression inside curly braces as the entire attribute value. So the below expression works:\n\t\tUsing template strings will also work:\n\t\t‚¨Ü Back to Top\n\n\tWhat is React proptype array with shape?\n\t\tIf you want to pass an array of objects to a component with a particular shape then use React.PropTypes.shape() as an argument to React.PropTypes.arrayOf().\n\t\t‚¨Ü Back to Top\n\n\tHow to conditionally apply class attributes?\n\t\tYou shouldn't use curly braces inside quotes because it is going to be evaluated as a string.\n\t\tInstead you need to move curly braces outside (don't forget to include spaces between class names):\n\t\tTemplate strings will also work:\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between React and ReactDOM?\n\t\tThe react package contains React.createElement(), React.Component, React.Children, and other helpers related to elements and component classes. You can think of these as the isomorphic or universal helpers that you need to build components. The react-dom package contains ReactDOM.render(), and in react-dom/server we have server-side rendering support with ReactDOMServer.renderToString() and ReactDOMServer.renderToStaticMarkup().\n\t\t‚¨Ü Back to Top\n\n\tWhy ReactDOM is separated from React?\n\t\tThe React team worked on extracting all DOM-related features into a separate library called ReactDOM. React v0.14 is the first release in which the libraries are split. By looking at some of the packages, react-native, react-art, react-canvas, and react-three, it has become clear that the beauty and essence of React has nothing to do with browsers or the DOM.\n\t\tTo build more environments that React can render to, React team planned to split the main React package into two: react and react-dom. This paves the way to writing components that can be shared between the web version of React and React Native.\n\t\t‚¨Ü Back to Top\n\n\tHow to use React label element?\n\t\tIf you try to render a <label> element bound to a text input using the standard for attribute, then it produces HTML missing that attribute and prints a warning to the console.\n\t\tSince for is a reserved keyword in JavaScript, use htmlFor instead.\n\t\t‚¨Ü Back to Top\n\n\tHow to combine multiple inline style objects?\n\t\tYou can use spread operator in regular React:\n\t\tIf you're using React Native then you can use the array notation:\n\t\t‚¨Ü Back to Top\n\n\tHow to re-render the view when the browser is resized?\n\t\tYou can listen to the resize event in componentDidMount() and then update the dimensions (width and height). You should remove the listener in componentWillUnmount() method.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between setState() and replaceState() methods?\n\t\tWhen you use setState() the current and previous states are merged. replaceState() throws out the current state, and replaces it with only what you provide. Usually setState() is used unless you really need to remove all previous keys for some reason. You can also set state to false/null in setState() instead of using replaceState().\n\t\t‚¨Ü Back to Top\n\n\tHow to listen to state changes?\n\t\tThe componentDidUpdate lifecycle method will be called when state changes. You can compare provided state and props values with current state and props to determine if something meaningful changed.\n\t\tNote: The previous releases of ReactJS also uses componentWillUpdate(object nextProps, object nextState) for state changes. It has been deprecated in latest releases.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the recommended approach of removing an array element in React state?\n\t\tThe better approach is to use Array.prototype.filter() method.\n\t\tFor example, let's create a removeItem() method for updating the state.\n\t\t‚¨Ü Back to Top\n\n\tIs it possible to use React without rendering HTML?\n\t\tIt is possible with latest version (>=16.2). Below are the possible options:\n\t\tReturning undefined won't work.\n\t\t‚¨Ü Back to Top\n\n\tHow to pretty print JSON with React?\n\t\tWe can use <pre> tag so that the formatting of the JSON.stringify() is retained:\n\t\t‚¨Ü Back to Top\n\n\tWhy you can't update props in React?\n\t\tThe React philosophy is that props should be immutable and top-down. This means that a parent can send any prop values to a child, but the child can't modify received props.\n\t\t‚¨Ü Back to Top\n\n\tHow to focus an input element on page load?\n\t\tYou can do it by creating ref for input element and using it in componentDidMount():\n\t\t‚¨Ü Back to Top\n\n\tWhat are the possible ways of updating objects in state?\n\t\t‚¨Ü Back to Top\n\n\tHow can we find the version of React at runtime in the browser?\n\t\tYou can use React.version to get the version.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the approaches to include polyfills in your create-react-app?\n\t\tThere are approaches to include polyfills in create-react-app,\n\t\tCreate a file called (something like) polyfills.js and import it into root index.js file. Run npm install core-js or yarn add core-js and import your specific required features.\n\t\tUse the polyfill.io CDN to retrieve custom, browser-specific polyfills by adding this line to index.html:\n\t\tIn the above script we had to explicitly request the Array.prototype.includes feature as it is not included in the default feature set.\n\t\t‚¨Ü Back to Top\n\n\tHow to use https instead of http in create-react-app?\n\t\tYou just need to use HTTPS=true configuration. You can edit your package.json scripts section:\n\t\tor just run set HTTPS=true && npm start\n\t\t‚¨Ü Back to Top\n\n\tHow to avoid using relative path imports in create-react-app?\n\t\tCreate a file called .env in the project root and write the import path:\n\t\tAfter that restart the development server. Now you should be able to import anything inside src/app without relative paths.\n\t\t‚¨Ü Back to Top\n\n\tHow to add Google Analytics for React Router?\n\t\tAdd a listener on the history object to record each page view:\n\t\t‚¨Ü Back to Top\n\n\tHow to update a component every second?\n\t\tYou need to use setInterval() to trigger the change, but you also need to clear the timer when the component unmounts to prevent errors and memory leaks.\n\t\t‚¨Ü Back to Top\n\n\tHow do you apply vendor prefixes to inline styles in React?\n\t\tReact does not apply vendor prefixes automatically. You need to add vendor prefixes manually.\n\t\t‚¨Ü Back to Top\n\n\tHow to import and export components using React and ES6?\n\t\tYou should use default for exporting the components\n\t\tWith the export specifier, the MyProfile is going to be the member and exported to this module and the same can be imported without mentioning the name in other components.\n\t\t‚¨Ü Back to Top\n\n\tWhy is a component constructor called only once?\n\t\tReact's reconciliation algorithm assumes that without any information to the contrary, if a custom component appears in the same place on subsequent renders, it's the same component as before, so reuses the previous instance rather than creating a new one.\n\t\t‚¨Ü Back to Top\n\n\tHow to define constants in React?\n\t\tYou can use ES7 static field to define constant.\n\t\tStatic fields are part of the Class Fields stage 3 proposal.\n\t\t‚¨Ü Back to Top\n\n\tHow to programmatically trigger click event in React?\n\t\tYou could use the ref prop to acquire a reference to the underlying HTMLInputElement object through a callback, store the reference as a class property, then use that reference to later trigger a click from your event handlers using the HTMLElement.click method.\n\t\tThis can be done in two steps:\n\t\t‚¨Ü Back to Top\n\n\tIs it possible to use async/await in plain React?\n\t\tIf you want to use async/await in React, you will need Babel and transform-async-to-generator plugin. React Native ships with Babel and a set of transforms.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the common folder structures for React?\n\t\tThere are two common practices for React project file structure.\n\t\tOne common way to structure projects is locate CSS, JS, and tests together, grouped by feature or route.\n\t\tAnother popular way to structure projects is to group similar files together.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the popular packages for animation?\n\t\tReact Transition Group and React Motion are popular animation packages in React ecosystem.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the benefit of styles modules?\n\t\tIt is recommended to avoid hard coding style values in components. Any values that are likely to be used across different UI components should be extracted into their own modules.\n\t\tFor example, these styles could be extracted into a separate component:\n\t\tAnd then imported individually in other components:\n\t\t‚¨Ü Back to Top\n\n\tWhat are the popular React-specific linters?\n\t\tESLint is a popular JavaScript linter. There are plugins available that analyse specific code styles. One of the most common for React is an npm package called eslint-plugin-react. By default, it will check a number of best practices, with rules checking things from keys in iterators to a complete set of prop types.\n\t\tAnother popular plugin is eslint-plugin-jsx-a11y, which will help fix common issues with accessibility. As JSX offers slightly different syntax to regular HTML, issues with alt text and tabindex, for example, will not be picked up by regular plugins.\n\t\t‚¨Ü Back to Top\n\n\tHow to make AJAX call and in which component lifecycle methods should I make an AJAX call?\n\t\tYou can use AJAX libraries such as Axios, jQuery AJAX, and the browser built-in fetch. You should fetch data in the componentDidMount() lifecycle method. This is so you can use setState() to update your component when the data is retrieved.\n\t\tFor example, the employees list fetched from API and set local state:\n\t\t‚¨Ü Back to Top\n\n\tWhat are render props?\n\t\tRender Props is a simple technique for sharing code between components using a prop whose value is a function. The below component uses render prop which returns a React element.\n\t\tLibraries such as React Router and DownShift are using this pattern.\n\n\n\n\n\n\n\n\nReact Router\n\t‚¨Ü Back to Top\n\tWhat is React Router?\n\t\tReact Router is a powerful routing library built on top of React that helps you add new screens and flows to your application incredibly quickly, all while keeping the URL in sync with what's being displayed on the page.\n\t\t‚¨Ü Back to Top\n\n\tHow React Router is different from history library?\n\t\tReact Router is a wrapper around the history library which handles interaction with the browser's window.history with its browser and hash histories. It also provides memory history which is useful for environments that don't have global history, such as mobile app development (React Native) and unit testing with Node.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the <Router> components of React Router v4?\n\t\tReact Router v4 provides below 3 <Router> components:\n\t\tThe above components will create browser, hash, and memory history instances. React Router v4 makes the properties and methods of the history instance associated with your router available through the context in the router object.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of push() and replace() methods of history?\n\t\tA history instance has two methods for navigation purpose.\n\t\tIf you think of the history as an array of visited locations, push() will add a new location to the array and replace() will replace the current location in the array with the new one.\n\t\t‚¨Ü Back to Top\n\n\tHow do you programmatically navigate using React Router v4?\n\t\tThere are three different ways to achieve programmatic routing/navigation within components.\n\t\tThe withRouter() higher-order function will inject the history object as a prop of the component. This object provides push() and replace() methods to avoid the usage of context.\n\t\tThe <Route> component passes the same props as withRouter(), so you will be able to access the history methods through the history prop.\n\t\tThis option is not recommended and treated as unstable API.\n\t\t‚¨Ü Back to Top\n\n\tHow to get query parameters in React Router v4?\n\t\tThe ability to parse query strings was taken out of React Router v4 because there have been user requests over the years to support different implementation. So the decision has been given to users to choose the implementation they like. The recommended approach is to use query strings library.\n\t\tYou can also use URLSearchParams if you want something native:\n\t\tYou should use a polyfill for IE11.\n\t\t‚¨Ü Back to Top\n\n\tWhy you get \"Router may have only one child element\" warning?\n\t\tYou have to wrap your Route's in a <Switch> block because <Switch> is unique in that it renders a route exclusively.\n\t\tAt first you need to add Switch to your imports:\n\t\tThen define the routes within <Switch> block:\n\t\t‚¨Ü Back to Top\n\n\tHow to pass params to history.push method in React Router v4?\n\t\tWhile navigating you can pass props to the history object:\n\t\tThe search property is used to pass query params in push() method.\n\t\t‚¨Ü Back to Top\n\n\tHow to implement default or NotFound page?\n\t\tA <Switch> renders the first child <Route> that matches. A <Route> with no path always matches. So you just need to simply drop path attribute as below\n\t\t‚¨Ü Back to Top\n\n\tHow to get history on React Router v4?\n\t\tBelow are the list of steps to get history object on React Router v4,\n\t\tFor example, create history.js file:\n\t\t‚¨Ü Back to Top\n\n\tHow to perform automatic redirect after login?\n\t\tThe react-router package provides <Redirect> component in React Router. Rendering a <Redirect> will navigate to a new location. Like server-side redirects, the new location will override the current location in the history stack.\n\n\nReact Internationalization\n\t‚¨Ü Back to Top\n\tWhat is React Intl?\n\t\tThe React Intl library makes internalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization. React Intl is part of FormatJS which provides bindings to React via its components and API.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the main features of React Intl?\n\t\tBelow are the main features of React Intl,\n\t\t‚¨Ü Back to Top\n\n\tWhat are the two ways of formatting in React Intl?\n\t\tThe library provides two ways to format strings, numbers, and dates:\n\t\t‚¨Ü Back to Top\n\n\tHow to use <FormattedMessage> as placeholder using React Intl?\n\t\tThe <Formatted... /> components from react-intl return elements, not plain text, so they can't be used for placeholders, alt text, etc. In that case, you should use lower level API formatMessage(). You can inject the intl object into your component using injectIntl() higher-order component and then format the message using formatMessage() available on that object.\n\t\t‚¨Ü Back to Top\n\n\tHow to access current locale with React Intl?\n\t\tYou can get the current locale in any component of your application using injectIntl():\n\t\t‚¨Ü Back to Top\n\n\tHow to format date using React Intl?\n\t\tThe injectIntl() higher-order component will give you access to the formatDate() method via the props in your component. The method is used internally by instances of FormattedDate and it returns the string representation of the formatted date.\n\n\nReact Testing\n\t‚¨Ü Back to Top\n\tWhat is Shallow Renderer in React testing?\n\t\tShallow rendering is useful for writing unit test cases in React. It lets you render a component one level deep and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered.\n\t\tFor example, if you have the following component:\n\t\tThen you can assert as follows:\n\t\t‚¨Ü Back to Top\n\n\tWhat is TestRenderer package in React?\n\t\tThis package provides a renderer that can be used to render components to pure JavaScript objects, without depending on the DOM or a native mobile environment. This package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a ReactDOM or React Native without using a browser or jsdom.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of ReactTestUtils package?\n\t\tReactTestUtils are provided in the with-addons package and allow you to perform actions against a simulated DOM for the purpose of unit testing.\n\t\t‚¨Ü Back to Top\n\n\tWhat is Jest?\n\t\tJest is a JavaScript unit testing framework created by Facebook based on Jasmine and provides automated mock creation and a jsdom environment. It's often used for testing components.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the advantages of Jest over Jasmine?\n\t\tThere are couple of advantages compared to Jasmine:\n\t\t‚¨Ü Back to Top\n\n\tGive a simple example of Jest test case\n\t\tLet's write a test for a function that adds two numbers in sum.js file:\n\t\tCreate a file named sum.test.js which contains actual test:\n\t\tAnd then add the following section to your package.json:\n\t\tFinally, run yarn test or npm test and Jest will print a result:\n\n\nReact Redux\n\t‚¨Ü Back to Top\n\tWhat is flux?\n\t\tFlux is an application design paradigm used as a replacement for the more traditional MVC pattern. It is not a framework or a library but a new kind of architecture that complements React and the concept of Unidirectional Data Flow. Facebook uses this pattern internally when working with React.\n\t\tThe workflow between dispatcher, stores and views components with distinct inputs and outputs as follows:\n\t\t‚¨Ü Back to Top\n\n\tWhat is Redux?\n\t\tRedux is a predictable state container for JavaScript apps based on the Flux design pattern. Redux can be used together with React, or with any other view library. It is tiny (about 2kB) and has no dependencies.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the core principles of Redux?\n\t\tRedux follows three fundamental principles:\n\t\t‚¨Ü Back to Top\n\n\tWhat are the downsides of Redux compared to Flux?\n\t\tInstead of saying downsides we can say that there are few compromises of using Redux over Flux. Those are as follows:\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between mapStateToProps() and mapDispatchToProps()?\n\t\tmapStateToProps() is a utility which helps your component get updated state (which is updated by some other components):\n\t\tmapDispatchToProps() is a utility which will help your component to fire an action event (dispatching action which may cause change of application state):\n\t\tRecommend always using the ‚Äúobject shorthand‚Äù form for the mapDispatchToProps\n\t\tRedux wrap it in another function that looks like (‚Ä¶args) => dispatch(onTodoClick(‚Ä¶args)), and pass that wrapper function as a prop to your component.\n\t\t‚¨Ü Back to Top\n\n\tCan I dispatch an action in reducer?\n\t\tDispatching an action within a reducer is an anti-pattern. Your reducer should be without side effects, simply digesting the action payload and returning a new state object. Adding listeners and dispatching actions within the reducer can lead to chained actions and other side effects.\n\t\t‚¨Ü Back to Top\n\n\tHow to access Redux store outside a component?\n\t\tYou just need to export the store from the module where it created with createStore(). Also, it shouldn't pollute the global window object.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the drawbacks of MVW pattern?\n\t\t‚¨Ü Back to Top\n\n\tAre there any similarities between Redux and RxJS?\n\t\tThese libraries are very different for very different purposes, but there are some vague similarities.\n\t\tRedux is a tool for managing state throughout the application. It is usually used as an architecture for UIs. Think of it as an alternative to (half of) Angular. RxJS is a reactive programming library. It is usually used as a tool to accomplish asynchronous tasks in JavaScript. Think of it as an alternative to Promises. Redux uses the Reactive paradigm because the Store is reactive. The Store observes actions from a distance, and changes itself. RxJS also uses the Reactive paradigm, but instead of being an architecture, it gives you basic building blocks, Observables, to accomplish this pattern.\n\t\t‚¨Ü Back to Top\n\n\tHow to dispatch an action on load?\n\t\tYou can dispatch an action in componentDidMount() method and in render() method you can verify the data.\n\t\t‚¨Ü Back to Top\n\n\tHow to use connect() from React Redux?\n\t\tYou need to follow two steps to use your store in your container:\n\t\t‚¨Ü Back to Top\n\n\tHow to reset state in Redux?\n\t\tYou need to write a root reducer in your application which delegate handling the action to the reducer generated by combineReducers().\n\t\tFor example, let us take rootReducer() to return the initial state after USER_LOGOUT action. As we know, reducers are supposed to return the initial state when they are called with undefined as the first argument, no matter the action.\n\t\tIn case of using redux-persist, you may also need to clean your storage. redux-persist keeps a copy of your state in a storage engine. First, you need to import the appropriate storage engine and then, to parse the state before setting it to undefined and clean each storage state key.\n\t\t‚¨Ü Back to Top\n\n\tWhats the purpose of at symbol in the Redux connect decorator?\n\t\tThe @ symbol is in fact a JavaScript expression used to signify decorators. Decorators make it possible to annotate and modify classes and properties at design time.\n\t\tLet's take an example setting up Redux without and with a decorator.\n\t\tThe above examples are almost similar except the usage of decorator. The decorator syntax isn't built into any JavaScript runtimes yet, and is still experimental and subject to change. You can use babel for the decorators support.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between React context and React Redux?\n\t\tYou can use Context in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for.\n\t\tWhereas Redux is much more powerful and provides a large number of features that the Context API doesn't provide. Also, React Redux uses context internally but it doesn't expose this fact in the public API.\n\t\t‚¨Ü Back to Top\n\n\tWhy are Redux state functions called reducers?\n\t\tReducers always return the accumulation of the state (based on all previous and current actions). Therefore, they act as a reducer of state. Each time a Redux reducer is called, the state and action are passed as parameters. This state is then reduced (or accumulated) based on the action, and then the next state is returned. You could reduce a collection of actions and an initial state (of the store) on which to perform these actions to get the resulting final state.\n\t\t‚¨Ü Back to Top\n\n\tHow to make AJAX request in Redux?\n\t\tYou can use redux-thunk middleware which allows you to define async actions.\n\t\tLet's take an example of fetching specific account as an AJAX call using fetch API:\n\t\t‚¨Ü Back to Top\n\n\tShould I keep all component's state in Redux store?\n\t\tKeep your data in the Redux store, and the UI related state internally in the component.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the proper way to access Redux store?\n\t\tThe best way to access your store in a component is to use the connect() function, that creates a new component that wraps around your existing one. This pattern is called Higher-Order Components, and is generally the preferred way of extending a component's functionality in React. This allows you to map state and action creators to your component, and have them passed in automatically as your store updates.\n\t\tLet's take an example of <FilterLink> component using connect:\n\t\tDue to it having quite a few performance optimizations and generally being less likely to cause bugs, the Redux developers almost always recommend using connect() over accessing the store directly (using context API).\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between component and container in React Redux?\n\t\tComponent is a class or function component that describes the presentational part of your application.\n\t\tContainer is an informal term for a component that is connected to a Redux store. Containers subscribe to Redux state updates and dispatch actions, and they usually don't render DOM elements; they delegate rendering to presentational child components.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of the constants in Redux?\n\t\tConstants allows you to easily find all usages of that specific functionality across the project when you use an IDE. It also prevents you from introducing silly bugs caused by typos ‚Äì in which case, you will get a ReferenceError immediately.\n\t\tNormally we will save them in a single file (constants.js or actionTypes.js).\n\t\tIn Redux, you use them in two places:\n\t\tLet's take actions.js:\n\t\tLet's create reducer.js:\n\t\t‚¨Ü Back to Top\n\n\tWhat are the different ways to write mapDispatchToProps()?\n\t\tThere are a few ways of binding action creators to dispatch() in mapDispatchToProps().\n\t\tBelow are the possible options:\n\t\tThe third option is just a shorthand for the first one.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the use of the ownProps parameter in mapStateToProps() and mapDispatchToProps()?\n\t\tIf the ownProps parameter is specified, React Redux will pass the props that were passed to the component into your connect functions. So, if you use a connected component:\n\t\tThe ownProps inside your mapStateToProps() and mapDispatchToProps() functions will be an object:\n\t\tYou can use this object to decide what to return from those functions.\n\t\t‚¨Ü Back to Top\n\n\tHow to structure Redux top level directories?\n\t\tMost of the applications has several top-level directories as below:\n\t\tThis structure works well for small and medium size apps.\n\t\t‚¨Ü Back to Top\n\n\tWhat is redux-saga?\n\t\tredux-saga is a library that aims to make side effects (asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better.\n\t\tIt is available in NPM:\n\t\t‚¨Ü Back to Top\n\n\tWhat is the mental model of redux-saga?\n\t\tSaga is like a separate thread in your application, that's solely responsible for side effects. redux-saga is a redux middleware, which means this thread can be started, paused and cancelled from the main application with normal Redux actions, it has access to the full Redux application state and it can dispatch Redux actions as well.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the differences between call() and put() in redux-saga?\n\t\tBoth call() and put() are effect creator functions. call() function is used to create effect description, which instructs middleware to call the promise. put() function creates an effect, which instructs middleware to dispatch an action to the store.\n\t\tLet's take example of how these effects work for fetching particular user data.\n\t\t‚¨Ü Back to Top\n\n\tWhat is Redux Thunk?\n\t\tRedux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods dispatch() and getState() as parameters.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the differences between redux-saga and redux-thunk?\n\t\tBoth Redux Thunk and Redux Saga take care of dealing with side effects. In most of the scenarios, Thunk uses Promises to deal with them, whereas Saga uses Generators. Thunk is simple to use and Promises are familiar to many developers, Sagas/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them.\n\t\t‚¨Ü Back to Top\n\n\tWhat is Redux DevTools?\n\t\tRedux DevTools is a live-editing time travel environment for Redux with hot reloading, action replay, and customizable UI. If you don't want to bother with installing Redux DevTools and integrating it into your project, consider using Redux DevTools Extension for Chrome and Firefox.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the features of Redux DevTools?\n\t\tSome of the main features of Redux DevTools are below,\n\t\t‚¨Ü Back to Top\n\n\tWhat are Redux selectors and why to use them?\n\t\tSelectors are functions that take Redux state as an argument and return some data to pass to the component.\n\t\tFor example, to get user details from the state:\n\t\tThese selectors have two main benefits,\n\t\t‚¨Ü Back to Top\n\n\tWhat is Redux Form?\n\t\tRedux Form works with React and Redux to enable a form in React to use Redux to store all of its state. Redux Form can be used with raw HTML5 inputs, but it also works very well with common UI frameworks like Material UI, React Widgets and React Bootstrap.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the main features of Redux Form?\n\t\tSome of the main features of Redux Form are:\n\t\t‚¨Ü Back to Top\n\n\tHow to add multiple middlewares to Redux?\n\t\tYou can use applyMiddleware().\n\t\tFor example, you can add redux-thunk and logger passing them as arguments to applyMiddleware():\n\t\t‚¨Ü Back to Top\n\n\tHow to set initial state in Redux?\n\t\tYou need to pass initial state as second argument to createStore:\n\t\t‚¨Ü Back to Top\n\n\tHow Relay is different from Redux?\n\t\tRelay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via GraphQL queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more.\n\n\tWhat is an action in Redux?\n\t\tActions are plain JavaScript objects or payloads of information that send data from your application to your store. They are the only source of information for the store. Actions must have a type property that indicates the type of action being performed.\n\t\tFor example, let's take an action which represents adding a new todo item:\n\t\t‚¨Ü Back to Top\n\n\n\nReact Native\n\t‚¨Ü Back to Top\n\tWhat is the difference between React Native and React?\n\t\tReact is a JavaScript library, supporting both front end web and being run on the server, for building user interfaces and web applications.\n\t\tReact Native is a mobile framework that compiles to native app components, allowing you to build native mobile applications (iOS, Android, and Windows) in JavaScript that allows you to use React to build your components, and implements React under the hood.\n\t\t‚¨Ü Back to Top\n\n\tHow to test React Native apps?\n\t\tReact Native can be tested only in mobile simulators like iOS and Android. You can run the app in your mobile using expo app (https://expo.io) Where it syncs using QR code, your mobile and computer should be in same wireless network.\n\t\t‚¨Ü Back to Top\n\n\tHow to do logging in React Native?\n\t\tYou can use console.log, console.warn, etc. As of React Native v0.29 you can simply run the following to see logs in the console:\n\t\t‚¨Ü Back to Top\n\n\tHow to debug your React Native?\n\t\tFollow the below steps to debug React Native app:\n\n\nReact supported libraries & Integration\n\t‚¨Ü Back to Top\n\tWhat is reselect and how it works?\n\t\tReselect is a selector library (for Redux) which uses memoization concept. It was originally written to compute derived data from Redux-like applications state, but it can't be tied to any architecture or library.\n\t\tReselect keeps a copy of the last inputs/outputs of the last call, and recomputes the result only if one of the inputs changes. If the the same inputs are provided twice in a row, Reselect returns the cached output. It's memoization and cache are fully customizable.\n\t\t‚¨Ü Back to Top\n\n\tWhat is Flow?\n\t\tFlow is a static type checker designed to find type errors in JavaScript. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving null, unlike most type systems.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between Flow and PropTypes?\n\t\tFlow is a static analysis tool (static checker) which uses a superset of the language, allowing you to add type annotations to all of your code and catch an entire class of bugs at compile time.\n\t\tPropTypes is a basic type checker (runtime checker) which has been patched onto React. It can't check anything other than the types of the props being passed to a given component. If you want more flexible typechecking for your entire project Flow/TypeScript are appropriate choices.\n\t\t‚¨Ü Back to Top\n\n\tHow to use Font Awesome icons in React?\n\t\tThe below steps followed to include Font Awesome in React:\n\t\t‚¨Ü Back to Top\n\n\tWhat is React Dev Tools?\n\t\tReact Developer Tools let you inspect the component hierarchy, including component props and state. It exists both as a browser extension (for Chrome and Firefox), and as a standalone app (works with other environments including Safari, IE, and React Native).\n\t\tThe official extensions available for different browsers or environments.\n\t\t‚¨Ü Back to Top\n\n\tWhy is DevTools not loading in Chrome for local files?\n\t\tIf you opened a local HTML file in your browser (file://...) then you must first open Chrome Extensions and check Allow access to file URLs.\n\t\t‚¨Ü Back to Top\n\n\tHow to use Polymer in React?\n\t\tYou need to follow below steps to use Polymer in React,\n\t\t‚¨Ü Back to Top\n\n\tWhat are the advantages of React over Vue.js?\n\t\tReact has the following advantages over Vue.js:\n\t\tNote: The above list of advantages are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between React and Angular?\n\t\tLet's see the difference between React and Angular in a table format.\n\t\tNote: The above list of differences are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.\n\t\t‚¨Ü Back to Top\n\n\tWhy React tab is not showing up in DevTools?\n\t\tWhen the page loads, React DevTools sets a global named __REACT_DEVTOOLS_GLOBAL_HOOK__, then React communicates with that hook during initialization. If the website is not using React or if React fails to communicate with DevTools then it won't show up the tab.\n\t\t‚¨Ü Back to Top\n\n\tWhat are Styled Components?\n\t\tstyled-components is a JavaScript library for styling React applications. It removes the mapping between styles and components, and lets you write actual CSS augmented with JavaScript.\n\t\t‚¨Ü Back to Top\n\n\tGive an example of Styled Components?\n\t\tLets create <Title> and <Wrapper> components with specific styles for each.\n\t\tThese two variables, Title and Wrapper, are now components that you can render just like any other react component.\n\t\t‚¨Ü Back to Top\n\n\tWhat is Relay?\n\t\tRelay is a JavaScript framework for providing a data layer and client-server communication to web applications using the React view layer.\n\t\t‚¨Ü Back to Top\n\n\tHow to use TypeScript in create-react-app application?\n\t\tStarting from react-scripts@2.1.0 or higher, there is a built-in support for typescript. i.e, create-react-app now supports typescript natively. You can just pass --typescript option as below\n\t\tBut for lower versions of react scripts, just supply --scripts-version option as react-scripts-ts while you create a new project. react-scripts-ts is a set of adjustments to take the standard create-react-app project pipeline and bring TypeScript into the mix.\n\t\tNow the project layout should look like the following:\n\n\nMiscellaneous\n\t‚¨Ü Back to Top\n\tWhat are the main features of Reselect library?\n\t\tLet's see the main features of Reselect library,\n\t\tLet's take calculations and different amounts of a shipment order with the simplified usage of Reselect:\n\t\t‚¨Ü Back to Top\n\n\tDoes the statics object work with ES6 classes in React?\n\t\tNo, statics only works with React.createClass():\n\t\tBut you can write statics inside ES6+ classes as below,\n\t\tor writing them outside class as below,\n\t\t‚¨Ü Back to Top\n\n\tCan Redux only be used with React?\n\t\tRedux can be used as a data store for any UI layer. The most common usage is with React and React Native, but there are bindings available for Angular, Angular 2, Vue, Mithril, and more. Redux simply provides a subscription mechanism which can be used by any other code.\n\t\t‚¨Ü Back to Top\n\n\tDo you need to have a particular build tool to use Redux?\n\t\tRedux is originally written in ES6 and transpiled for production into ES5 with Webpack and Babel. You should be able to use it regardless of your JavaScript build process. Redux also offers a UMD build that can be used directly without any build process at all.\n\t\t‚¨Ü Back to Top\n\n\tHow Redux Form initialValues get updated from state?\n\t\tYou need to add enableReinitialize : true setting.\n\t\tIf your initialValues prop gets updated, your form will update too.\n\t\t‚¨Ü Back to Top\n\n\tHow React PropTypes allow different types for one prop?\n\t\tYou can use oneOfType() method of PropTypes.\n\t\tFor example, the height property can be defined with either string or number type as below:\n\t\t‚¨Ü Back to Top\n\n\tCan I import an SVG file as react component?\n\t\tYou can import SVG directly as component instead of loading it as a file. This feature is available with react-scripts@2.0.0 and higher.\n\t\tNote: Don't forget about the curly braces in the import.\n\t\t‚¨Ü Back to Top\n\n\tWhy are inline ref callbacks or functions not recommended?\n\t\tIf the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one.\n\t\tBut our expectation is for the ref callback to get called once, when the component mounts. One quick fix is to use the ES7 class property syntax to define the function\n\t\tNote: In React v16.3, ‚¨Ü Back to Top\n\n\tWhat is render hijacking in react?\n\t\tThe concept of render hijacking is the ability to control what a component will output from another component. It actually means that you decorate your component by wrapping it into a Higher-Order component. By wrapping you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enables hijacking, but by using HOC you make your component behave in different way.\n\t\t‚¨Ü Back to Top\n\n\tWhat are HOC factory implementations?\n\t\tThere are two main ways of implementing HOCs in React.\n\t\tBut they follow different approaches for manipulating the WrappedComponent.\n\t\tProps Proxy\n\t\tIn this approach, the render method of the HOC returns a React Element of the type of the WrappedComponent. We also pass through the props that the HOC receives, hence the name Props Proxy.\n\t\tInheritance Inversion\n\t\tIn this approach, the returned HOC class (Enhancer) extends the WrappedComponent. It is called Inheritance Inversion because instead of the WrappedComponent extending some Enhancer class, it is passively extended by the Enhancer. In this way the relationship between them seems inverse.\n\t\t‚¨Ü Back to Top\n\n\tHow to pass numbers to React component?\n\t\tYou should be passing the numbers via curly braces({}) where as strings in quotes\n\t\t‚¨Ü Back to Top\n\n\tDo I need to keep all my state into Redux? Should I ever use react internal state?\n\t\tIt is up to developer decision. i.e, It is developer job to determine what kinds of state make up your application, and where each piece of state should live. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as ‚Äúis this dropdown currently open‚Äù, inside a component's internal state.\n\t\tBelow are the thumb rules to determine what kind of data should be put into Redux\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of registerServiceWorker in React?\n\t\tReact creates a service worker for you without any configuration by default. The service worker is a web API that helps you cache your assets and other files so that when the user is offline or on slow network, he/she can still see results on the screen, as such, it helps you build a better user experience, that's what you should know about service worker's for now. It's all about adding offline capabilities to your site.\n\t\t‚¨Ü Back to Top\n\n\tWhat is React memo function?\n\t\tClass components can be restricted from rendering when their input props are the same using PureComponent or shouldComponentUpdate. Now you can do the same with function components by wrapping them in React.memo.\n\t\t‚¨Ü Back to Top\n\n\tWhat is React lazy function?\n\t\tThe React.lazy function lets you render an dynamic import as a regular component. It will automatically load the bundle containing the OtherComponent when the component gets rendered. This must return a Promise which resolves to a module with a default export containing a React component.\n\t\tNote: React.lazy and Suspense is not yet available for server-side rendering. If you want to do code-splitting in a server rendered app, we still recommend React Loadable.\n\t\t‚¨Ü Back to Top\n\n\tHow to prevent unnecessary updates using setState?\n\t\tYou can compare current value of the state with an existing state value and decide whether to rerender the page or not. If the values are same then you need to return null to stop re-rendering otherwise return the latest state value.\n\t\tFor example, the user profile information is conditionally rendered as follows,\n\t\t‚¨Ü Back to Top\n\n\tHow do you render Array, Strings and Numbers in React 16 Version?\n\t\tArrays: Unlike older releases, you don't need to make sure render method return a single element in React16. You are able to return multiple sibling elements without a wrapping element by returning an array.\n\t\tFor example, let us take the below list of developers,\n\t\tYou can also merge this array of items in another array component.\n\t\tStrings and Numbers: You can also return string and number type from the render method.\n\t\t‚¨Ü Back to Top\n\n\tHow to use class field declarations syntax in React classes?\n\t\tReact Class Components can be made much more concise using the class field declarations. You can initialize local state without using the constructor and declare class methods by using arrow functions without the extra need to bind them.\n\t\tLet's take a counter example to demonstrate class field declarations for state without using constructor and methods without binding,\n\t\t‚¨Ü Back to Top\n\n\tWhat are hooks?\n\t\tHooks is a new feature(React 16.8) that lets you use state and other React features without writing a class.\n\t\tLet's see an example of useState hook example,\n\t\t‚¨Ü Back to Top\n\n\tWhat are the rules needs to follow for hooks?\n\t\tYou need to follow two rules in order to use hooks,\n\t\t‚¨Ü Back to Top\n\n\tHow to ensure hooks followed the rules in your project?\n\t\tReact team released an ESLint plugin called eslint-plugin-react-hooks that enforces these two rules. You can add this plugin to your project using the below command,\n\t\tAnd apply the below config in your ESLint config file,\n\t\tNote: This plugin is intended to use in Create React App by default.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the differences between Flux and Redux?\n\t\tBelow are the major differences between Flux and Redux\n\t\t‚¨Ü Back to Top\n\n\tWhat are the benefits of React Router V4?\n\t\tBelow are the main benefits of React Router V4 module,\n\t\t‚¨Ü Back to Top\n\n\tCan you describe about componentDidCatch lifecycle method signature?\n\t\tThe componentDidCatch lifecycle method is invoked after an error has been thrown by a descendant component. The method receives two parameters,\n\t\tThe method structure would be as follows\n\t\t‚¨Ü Back to Top\n\n\tIn which scenarios error boundaries do not catch errors?\n\t\tBelow are the cases in which error boundaries doesn't work,\n\t\t‚¨Ü Back to Top\n\n\tWhy do not you need error boundaries for event handlers?\n\t\tError boundaries do not catch errors inside event handlers. Event handlers don't happened or invoked during rendering time unlike render method or lifecycle methods. So React knows how to recover these kind of errors in event handlers. If still you need to catch an error inside event handler, use the regular JavaScript try / catch statement as below\n\t\tThe above code is catching the error using vanilla javascript try/catch block instead of error boundaries.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between try catch block and error boundaries?\n\t\tTry catch block works with imperative code whereas error boundaries are meant for declarative code to render on the screen.\n\t\tFor example, the try catch block used for below imperative code\n\t\tWhereas error boundaries wrap declarative code as below,\n\t\tSo if an error occurs in a componentDidUpdate method caused by a setState somewhere deep in the tree, it will still correctly propagate to the closest error boundary.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the behavior of uncaught errors in react 16?\n\t\tIn React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree. The reason behind this decision is that it is worse to leave corrupted UI in place than to completely remove it. For example, it is worse for a payments app to display a wrong amount than to render nothing.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the proper placement for error boundaries?\n\t\tThe granularity of error boundaries usage is up to the developer based on project needs. You can follow either of these approaches,\n\t\t‚¨Ü Back to Top\n\n\tWhat is the benefit of component stack trace from error boundary?\n\t\tApart from error messages and javascript stack, React16 will display the component stack trace with file names and line numbers using error boundary concept.\n\t\tFor example, BuggyCounter component displays the component stack trace as below,\n\t\t‚¨Ü Back to Top\n\n\tWhat is the required method to be defined for a class component?\n\t\tThe render() method is the only required method in a class component. i.e, All methods other than render method are optional for a class component.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the possible return types of render method?\n\t\tBelow are the list of following types used and return from render method,\n\t\t‚¨Ü Back to Top\n\n\tWhat is the main purpose of constructor?\n\t\tThe constructor is mainly used for two purposes,\n\t\t‚¨Ü Back to Top\n\n\tIs it mandatory to define constructor for React component?\n\t\tNo, it is not mandatory. i.e, If you don‚Äôt initialize state and you don‚Äôt bind methods, you don‚Äôt need to implement a constructor for your React component.\n\t\t‚¨Ü Back to Top\n\n\tWhat are default props?\n\t\tThe defaultProps are defined as a property on the component class to set the default props for the class. This is used for undefined props, but not for null props.\n\t\tFor example, let us create color default prop for the button component,\n\t\tIf props.color is not provided then it will set the default value to 'red'. i.e, Whenever you try to access the color prop it uses default value\n\t\tNote: If you provide null value then it remains null value.\n\t\t‚¨Ü Back to Top\n\n\tWhy should not call setState in componentWillUnmount?\n\t\tYou should not call setState() in componentWillUnmount() because once a component instance is unmounted, it will never be mounted again.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of getDerivedStateFromError?\n\t\tThis lifecycle method is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.\n\t\tThe signature of the lifecycle method is as follows,\n\t\tLet us take error boundary use case with the above lifecycle method for demonistration purpose,\n\t\t‚¨Ü Back to Top\n\n\tWhat is the methods order when component re-rendered?\n\t\tAn update can be caused by changes to props or state. The below methods are called in the following order when a component is being re-rendered.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the methods invoked during error handling?\n\t\tBelow methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of displayName class property?\n\t\tThe displayName string is used in debugging messages. Usually, you don‚Äôt need to set it explicitly because it‚Äôs inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component.\n\t\tFor example, To ease debugging, choose a display name that communicates that it‚Äôs the result of a withSubscription HOC.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the browser support for react applications?\n\t\tReact supports all popular browsers, including Internet Explorer 9 and above, although some polyfills are required for older browsers such as IE 9 and IE 10. If you use es5-shim and es5-sham polyfill then it even support old browsers that doesn't support ES5 methods.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of unmountComponentAtNode method?\n\t\tThis method is available from react-dom package and it removes a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.\n\t\tThe method signature would be as follows,\n\t\t‚¨Ü Back to Top\n\n\tWhat is code-splitting?\n\t\tCode-Splitting is a feature supported by bundlers like Webpack and Browserify which can create multiple bundles that can be dynamically loaded at runtime. The react project supports code splitting via dynamic import() feature.\n\t\tFor example, in the below code snippets, it will make moduleA.js and all its unique dependencies as a separate chunk that only loads after the user clicks the 'Load' button. moduleA.js\n\t\tApp.js\n\t\t‚¨Ü Back to Top\n\n\tWhat is the benefit of strict mode?\n\t\tThe  will be helpful in the below cases\n\t\t‚¨Ü Back to Top\n\n\tWhat are Keyed Fragments?\n\t\tThe Fragments declared with the explicit  syntax may have keys. The general use case is mapping a collection to an array of fragments as below,\n\t\tNote: key is the only attribute that can be passed to Fragment. In the future, there might be a support for additional attributes, such as event handlers.\n\t\t‚¨Ü Back to Top\n\n\tDoes React support all HTML attributes?\n\t\tAs of React 16, both standard or custom DOM attributes are fully supported. Since React components often take both custom and DOM-related props, React uses the camelCase convention just like the DOM APIs.\n\t\tLet us take few props with respect to standard HTML attributes,\n\t\tThese props work similarly to the corresponding HTML attributes, with the exception of the special cases. It also support all SVG attributes.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the limitations with HOCs?\n\t\tHigher-order components come with a few caveats apart from its benefits. Below are the few listed in an order,\n\t\tThe above code impact performance by remounting a component that causes the state of that component and all of its children to be lost. Instead, apply HOCs outside the component definition so that the resulting component is created only once.\n\t\tYou can overcome this by copying the methods onto the container before returning it,\n\t\t‚¨Ü Back to Top\n\n\tHow to debug forwardRefs in DevTools?\n\t\tReact.forwardRef accepts a render function as parameter and DevTools uses this function to determine what to display for the ref forwarding component.\n\t\tFor example, If you don't name the render function or not using displayName property then it will appear as ‚ÄùForwardRef‚Äù in the DevTools,\n\t\tBut If you name the render function then it will appear as ‚ÄùForwardRef(myFunction)‚Äù\n\t\tAs an alternative, You can also set displayName property for forwardRef function,\n\t\t‚¨Ü Back to Top\n\n\tWhen component props defaults to true?\n\t\tIf you pass no value for a prop, it defaults to true. This behavior is available so that it matches the behavior of HTML.\n\t\tFor example, below expressions are equivalent,\n\t\tNote: It is not recommended to use this approach because it can be confused with the ES6 object shorthand (example, {name} which is short for {name: name})\n\t\t‚¨Ü Back to Top\n\n\tWhat is NextJS and major features of it?\n\t\tNext.js is a popular and lightweight framework for static and server‚Äërendered applications built with React. It also provides styling and routing solutions. Below are the major features provided by NextJS,\n\t\t‚¨Ü Back to Top\n\n\tHow do you pass an event handler to a component?\n\t\tYou can pass event handlers and other functions as props to child components. It can be used in child component as below,\n\t\t‚¨Ü Back to Top\n\n\tIs it good to use arrow functions in render methods?\n\t\tYes, You can use. It is often the easiest way to pass parameters to callback functions. But you need to optimize the performance while using it.\n\t\tNote: Using an arrow function in render method creates a new function each time the component renders, which may have performance implications\n\t\t‚¨Ü Back to Top\n\n\tHow to prevent a function from being called multiple times?\n\t\tIf you use an event handler such as onClick or onScroll and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be achieved in the below possible ways,\n\t\t‚¨Ü Back to Top\n\n\tHow JSX prevents Injection Attacks?\n\t\tReact DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that‚Äôs not explicitly written in your application. Everything is converted to a string before being rendered.\n\t\tFor example, you can embed user input as below,\n\t\tThis way you can prevent XSS(Cross-site-scripting) attacks in the application.\n\t\t‚¨Ü Back to Top\n\n\tHow do you update rendered elements?\n\t\tYou can update UI(represented by rendered element) by passing the newly created element to ReactDOM's render method.\n\t\tFor example, lets take a ticking clock example, where it updates the time by calling render method multiple times,\n\t\t‚¨Ü Back to Top\n\n\tHow do you say that props are read only?\n\t\tWhen you declare a component as a function or a class, it must never modify its own props.\n\t\tLet us take a below capital function,\n\t\tThe above function is called ‚Äúpure‚Äù because it does not attempt to change their inputs, and always return the same result for the same inputs. Hence, React has a single rule saying \"All React components must act like pure functions with respect to their props.\"\n\t\t‚¨Ü Back to Top\n\n\tHow do you say that state updates are merged?\n\t\tWhen you call setState() in the component, React merges the object you provide into the current state.\n\t\tFor example, let us take a facebook user with posts and comments details as state variables,\n\t\tNow you can update them independently with separate setState() calls as below,\n\t\tAs mentioned in the above code snippets, this.setState({comments}) updates only comments variable without modifying or replacing posts variable.\n\t\t‚¨Ü Back to Top\n\n\tHow do you pass arguments to an event handler?\n\t\tDuring iterations or loops, it is common to pass an extra parameter to an event handler. This can be achieved through arrow functions or bind method.\n\t\tLet us take an example of user details updated in a grid,\n\t\tIn both the approaches, the synthetic argument e is passed as a second argument. You need to pass it explicitly for arrow functions and it forwarded automatically for bind method.\n\t\t‚¨Ü Back to Top\n\n\tHow to prevent component from rendering?\n\t\tYou can prevent component from rendering by returning null based on specific condition. This way it can conditionally render component.\n\t\tIn the above example, the greeting component skips its rendering section by applying condition and returning null value.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the conditions to safely use the index as a key?\n\t\tThere are three conditions to make sure, it is safe use the index as a key.\n\t\t‚¨Ü Back to Top\n\n\tIs it keys should be globally unique?\n\t\tKeys used within arrays should be unique among their siblings but they don‚Äôt need to be globally unique. i.e, You can use the same keys with two different arrays.\n\t\tFor example, the below book component uses two arrays with different arrays,\n\t\t‚¨Ü Back to Top\n\n\tWhat is the popular choice for form handling?\n\t\tFormik is a form library for react which provides solutions such as validation, keeping track of the visited fields, and handling form submission.\n\t\tIn detail, You can categorize them as follows,\n\t\tIt is used to create a scalable, performant, form helper with a minimal API to solve annoying stuff.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the advantages of formik over redux form library?\n\t\tBelow are the main reasons to recommend formik over redux form library,\n\t\t‚¨Ü Back to Top\n\n\tWhy do you not required to use inheritance?\n\t\tIn React, it is recommend using composition instead of inheritance to reuse code between components. Both Props and composition give you all the flexibility you need to customize a component‚Äôs look and behavior in an explicit and safe way. Whereas, If you want to reuse non-UI functionality between components, it is suggested to extracting it into a separate JavaScript module. Later components import it and use that function, object, or a class, without extending it.\n\t\t‚¨Ü Back to Top\n\n\tCan I use web components in react application?\n\t\tYes, you can use web components in a react application. Even though many developers won't use this combination, it may require especially if you are using third-party UI components that are written using Web Components.\n\t\tFor example, let us use Vaadin date picker web component as below,\n\t\t‚¨Ü Back to Top\n\n\tWhat is dynamic import?\n\t\tThe dynamic import() syntax is a ECMAScript proposal not currently part of the language standard. It is expected to be accepted in the near future. You can achieve code-splitting into your app using dynamic import.\n\t\tLet's take an example of addition,\n\t\t‚¨Ü Back to Top\n\n\tWhat are loadable components?\n\t\tIf you want to do code-splitting in a server rendered app, it is recommend to use Loadable Components because React.lazy and Suspense is not yet available for server-side rendering. Loadable lets you render a dynamic import as a regular component.\n\t\tLets take an example,\n\t\tNow OtherComponent will be loaded in a separated bundle\n\t\t‚¨Ü Back to Top\n\n\tWhat is suspense component?\n\t\tIf the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while you‚Äôre waiting for it to load using a loading indicator. This can be done using Suspense component.\n\t\tFor example, the below code uses suspense component,\n\t\tAs mentioned in the above code, Suspense is wrapped above the lazy component.\n\t\t‚¨Ü Back to Top\n\n\tWhat is route based code splitting?\n\t\tOne of the best place to do code splitting is with routes. The entire page is going to re-render at once so users are unlikely to interact with other elements in the page at the same time. Due to this, the user experience won't be disturbed.\n\t\tLet us take an example of route based website using libraries like React Router with React.lazy,\n\t\tIn the above code, the code splitting will happen at each route level.\n\t\t‚¨Ü Back to Top\n\n\tGive an example on How to use context?\n\t\tContext is designed to share data that can be considered global for a tree of React components.\n\t\tFor example, in the code below lets manually thread through a ‚Äútheme‚Äù prop in order to style the Button component.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of default value in context?\n\t\tThe defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them.\n\t\tBelow code snippet provides default theme value as Luna.\n\t\t‚¨Ü Back to Top\n\n\tHow do you use contextType?\n\t\tContextType is used to consume the context object. The contextType property can be used in two ways,\n\t\tLets assign contextType property on MyClass as below,\n\t\t‚¨Ü Back to Top\n\n\tWhat is a consumer?\n\t\tA Consumer is a React component that subscribes to context changes. It requires a function as a child which receives current context value as argument and returns a react node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree.\n\t\tLets take a simple example,\n\t\t‚¨Ü Back to Top\n\n\tHow do you solve performance corner cases while using context?\n\t\tThe context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider‚Äôs parent re-renders.\n\t\tFor example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value.\n\t\tThis can be solved by lifting up the value to parent state,\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of forward ref in HOCs?\n\t\tRefs will not get passed through because ref is not a prop. It handled differently by React just like key. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component. In this case, you can use Forward Ref API. For example, we can explicitly forward refs to the inner FancyButton component using the React.forwardRef API.\n\t\tThe below HOC logs all props,\n\t\tLet's use this HOC to log all props that get passed to our ‚Äúfancy button‚Äù component,\n\t\tNow lets create a ref and pass it to FancyButton component. In this case, you can set focus to button element.\n\t\t‚¨Ü Back to Top\n\n\tIs it ref argument available for all functions or class components?\n\t\tRegular function or class components don‚Äôt receive the ref argument, and ref is not available in props either. The second ref argument only exists when you define a component with React.forwardRef call.\n\t\t‚¨Ü Back to Top\n\n\tWhy do you need additional care for component libraries while using forward refs?\n\t\tWhen you start using forwardRef in a component library, you should treat it as a breaking change and release a new major version of your library. This is because your library likely has a different behavior such as what refs get assigned to, and what types are exported. These changes can break apps and other libraries that depend on the old behavior.\n\t\t‚¨Ü Back to Top\n\n\tHow to create react class components without ES6?\n\t\tIf you don‚Äôt use ES6 then you may need to use the create-react-class module instead. For default props, you need to define getDefaultProps() as a function on the passed object. Whereas for initial state, you have to provide a separate getInitialState method that returns the initial state.\n\t\tNote: If you use createReactClass then auto binding is available for all methods. i.e, You don't need to use .bind(this) with in constructor for event handlers.\n\t\t‚¨Ü Back to Top\n\n\tIs it possible to use react without JSX?\n\t\tYes, JSX is not mandatory for using React. Actually it is convenient when you don‚Äôt want to set up compilation in your build environment. Each JSX element is just syntactic sugar for calling React.createElement(component, props, ...children).\n\t\tFor example, let us take a greeting example with JSX,\n\t\tYou can write the same code without JSX as below,\n\t\t‚¨Ü Back to Top\n\n\tWhat is diffing algorithm?\n\t\tReact needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithms is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n3) where n is the number of elements in the tree.\n\t\tIn this case, for displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:\n\t\t‚¨Ü Back to Top\n\n\tWhat are the rules covered by diffing algorithm?\n\t\tWhen diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements. It covers the below rules during reconciliation algorithm,\n\t\t‚¨Ü Back to Top\n\n\tWhen do you need to use refs?\n\t\tThere are few use cases to go for refs,\n\t\t‚¨Ü Back to Top\n\n\tIs it prop must be named as render for render props?\n\t\tEven though the pattern named render props, you don‚Äôt have to use a prop named render to use this pattern. i.e, Any prop that is a function that a component uses to know what to render is technically a ‚Äúrender prop‚Äù. Lets take an example with the children prop for render props,\n\t\tActually children prop doesn‚Äôt need to be named in the list of ‚Äúattributes‚Äù in JSX element. Instead, you can keep it directly inside element,\n\t\tWhile using this above technique(without any name), explicitly state that children should be a function in your propTypes.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the problems of using render props with pure components?\n\t\tIf you create a function inside a render method, it negates the purpose of pure component. Because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop. You can solve this issue by defining the render function as instance method.\n\t\t‚¨Ü Back to Top\n\n\tHow do you create HOC using render props?\n\t\tYou can implement most higher-order components (HOC) using a regular component with a render prop. For example, if you would prefer to have a withMouse HOC instead of a  component, you could easily create one using a regular  with a render prop.\n\t\tThis way render props gives the flexibility of using either pattern.\n\t\t‚¨Ü Back to Top\n\n\tWhat is windowing technique?\n\t\tWindowing is a technique that only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created. If your application renders long lists of data then this technique is recommended. Both react-window and react-virtualized are popular windowing libraries which provides several reusable components for displaying lists, grids, and tabular data.\n\t\t‚¨Ü Back to Top\n\n\tHow do you print falsy values in JSX?\n\t\tThe falsy values such as false, null, undefined, and true are valid children but they don't render anything. If you still want to display them then you need to convert it to string. Let's take an example on how to convert to a string,\n\t\t‚¨Ü Back to Top\n\n\tWhat is the typical use case of portals?\n\t\tReact portals are very useful when a parent component has overflow: hidden or has properties that affect the stacking context(z-index,position,opacity etc styles) and you need to visually ‚Äúbreak out‚Äù of its container.\n\t\tFor example, dialogs, global message notifications, hovercards, and tooltips.\n\t\t‚¨Ü Back to Top\n\n\tHow do you set default value for uncontrolled component?\n\t\tIn React, the value attribute on form elements will override the value in the DOM. With an uncontrolled component, you might want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a defaultValue attribute instead of value.\n\t\tThe same applies for select and textArea inputs. But you need to use defaultChecked for checkbox and radio inputs.\n\t\t‚¨Ü Back to Top\n\n\tWhat is your favorite React stack?\n\t\tEven though the tech stack varies from developer to developer, the most popular stack is used in react boilerplate project code. It mainly uses Redux and redux-saga for state management and asynchronous side-effects, react-router for routing purpose, styled-components for styling react components, axios for invoking REST api, and other supported stack such as webpack, reselect, ESNext, Babel. You can clone the project https://github.com/react-boilerplate/react-boilerplate and start working on any new react project.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between Real DOM and Virtual DOM?\n\t\tBelow are the main differences between Real DOM and Virtual DOM,\n\t\t‚¨Ü Back to Top\n\n\tHow to add Bootstrap to a react application?\n\t\tBootstrap can be added to your React app in a three possible ways,\n\t\t‚¨Ü Back to Top\n\n\tCan you list down top websites or applications using react as front end framework?\n\t\tBelow are the top 10 websites using React as their front-end framework,\n\t\t‚¨Ü Back to Top\n\n\tIs it recommended to use CSS In JS technique in React?\n\t\tReact does not have any opinion about how styles are defined but if you are a beginner then good starting point is to define your styles in a separate *.css file as usual and refer to them using className. This functionality is not part of React but came from third-party libraries. But If you want to try a different approach(CSS-In-JS) then styled-components library is a good option.\n\t\t‚¨Ü Back to Top\n\n\tDo I need to rewrite all my class components with hooks?\n\t\tNo. But you can try Hooks in a few components(or new components) without rewriting any existing code. Because there are no plans to remove classes in ReactJS.\n\t\t‚¨Ü Back to Top\n\n\tHow to fetch data with React Hooks?\n\t\tThe effect hook called useEffect is used to fetch the data with axios from the API and to set the data in the local state of the component with the state hook‚Äôs update function.\n\t\tLet's take an example in which it fetches list of react articles from the API\n\t\tRemember we provided an empty array as second argument to the effect hook to avoid activating it on component updates but only for the mounting of the component. i.e, It fetches only for component mount.\n\t\t‚¨Ü Back to Top\n\n\tIs Hooks cover all use cases for classes?\n\t\tHooks doesn't cover all use cases of classes but there is a plan to add them soon. Currently there are no Hook equivalents to the uncommon getSnapshotBeforeUpdate and componentDidCatch lifecycles yet.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the stable release for hooks support?\n\t\tReact includes a stable implementation of React Hooks in 16.8 release for below packages\n\t\t‚¨Ü Back to Top\n\n\tWhy do we use array destructuring (square brackets notation) in useState?\n\t\tWhen we declare a state variable with useState, it returns a pair ‚Äî an array with two items. The first item is the current value, and the second is a function that updates the value. Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.\n\t\tFor example, the array index access would look as follows:\n\t\tWhereas with array destructuring the variables can be accessed as follows:\n\t\t‚¨Ü Back to Top\n\n\tWhat are the sources used for introducing hooks?\n\t\tHooks got the ideas from several different sources. Below are some of them,\n\t\t‚¨Ü Back to Top\n\n\tHow do you access imperative API of web components?\n\t\tWeb Components often expose an imperative API to implement its functions. You will need to use a ref to interact with the DOM node directly if you want to access imperative API of a web component. But if you are using third-party Web Components, the best solution is to write a React component that behaves as a wrapper for your Web Component.\n\t\t‚¨Ü Back to Top\n\n\tWhat is formik?\n\t\tFormik is a small react form library that helps you with the three major problems,\n\t\t‚¨Ü Back to Top\n\n\tWhat are typical middleware choices for handling asynchronous calls in Redux?\n\t\tSome of the popular middleware choices for handling asynchronous calls in Redux eco system are Redux Thunk, Redux Promise, Redux Saga.\n\t\t‚¨Ü Back to Top\n\n\tDo browsers understand JSX code?\n\t\tNo, browsers can't understand JSX code. You need a transpiler to convert your JSX to regular Javascript that browsers can understand. The most widely used transpiler right now is Babel.\n\t\t‚¨Ü Back to Top\n\n\tDescribe about data flow in react?\n\t\tReact implements one-way reactive data flow using props which reduce boilerplate and is easier to understand than traditional two-way data binding.\n\t\t‚¨Ü Back to Top\n\n\tWhat is react scripts?\n\t\tThe react-scripts package is a set of scripts from the create-react-app starter pack which helps you kick off projects without configuring. The react-scripts start command sets up the development environment and starts a server, as well as hot module reloading.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the features of create react app?\n\t\tBelow are the list of some of the features provided by create react app.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of renderToNodeStream method?\n\t\tThe ReactDOMServer#renderToNodeStream method is used to generate HTML on the server and send the markup down on the initial request for faster page loads. It also helps search engines to crawl your pages easily for SEO purposes. Note: Remember this method is not available in the browser but only server.\n\t\t‚¨Ü Back to Top\n\n\tWhat is MobX?\n\t\tMobX is a simple, scalable and battle tested state management solution for applying functional reactive programming (TFRP). For reactJs application, you need to install below packages,\n\t\t‚¨Ü Back to Top\n\n\tWhat are the differences between Redux and MobX?\n\t\tBelow are the main differences between Redux and MobX,\n\t\t‚¨Ü Back to Top\n\n\tShould I learn ES6 before learning ReactJS?\n\t\tNo, you don‚Äôt have to learn es2015/es6 to learn react. But you may find many resources or React ecosystem uses ES6 extensively. Let's see some of the frequently used ES6 features,\n\t\t‚¨Ü Back to Top\n\n\tWhat is Concurrent Rendering?\n\t\tThe Concurrent rendering makes React apps to be more responsive by rendering component trees without blocking the main UI thread. It allows React to interrupt a long-running render to handle a high-priority event. i.e, When you enabled concurrent Mode, React will keep an eye on other tasks that need to be done, and if there's something with a higher priority it will pause what it is currently rendering and let the other task finish first. You can enable this in two ways,\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between async mode and concurrent mode?\n\t\tBoth refers the same thing. Previously concurrent Mode being referred to as \"Async Mode\" by React team. The name has been changed to highlight React‚Äôs ability to perform work on different priority levels. So it avoids the confusion from other approaches to Async Rendering.\n\t\t‚¨Ü Back to Top\n\n\tCan I use javascript urls in react16.9?\n\t\tYes, you can use javascript: URLs but it will log a warning in the console. Because URLs starting with javascript: are dangerous by including unsanitized output in a tag like <a href> and create a security hole.\n\t\tRemember that the future versions will throw an error for javascript URLs.\n\t\t‚¨Ü Back to Top\n\n\tWhat is the purpose of eslint plugin for hooks?\n\t\tThe ESLint plugin enforces rules of Hooks to avoid bugs. It assumes that any function starting with ‚Äùuse‚Äù and a capital letter right after it is a Hook. In particular, the rule enforces that,\n\t\t‚¨Ü Back to Top\n\n\tWhat is the difference between Imperative and Declarative in React?\n\t\tImagine a simple UI component, such as a \"Like\" button. When you tap it, it turns blue if it was previously grey, and grey if it was previously blue.\n\t\tThe imperative way of doing this would be:\n\t\tBasically, you have to check what is currently on the screen and handle all the changes necessary to redraw it with the current state, including undoing the changes from the previous state. You can imagine how complex this could be in a real-world scenario.\n\t\tIn contrast, the declarative approach would be:\n\t\tBecause the declarative approach separates concerns, this part of it only needs to handle how the UI should look in a sepecific state, and is therefore much simpler to understand.\n\t\t‚¨Ü Back to Top\n\n\tWhat are the benefits of using typescript with reactjs?\n\t\tBelow are some of the benefits of using typescript with Reactjs,\n\t\t‚¨Ü Back to Top\n\n\tHow do you make sure that user remains authenticated on page refresh while using Context API State Management?\n\t\tWhen a user logs in and reload, to persist the state generally we add the load user action in the useEffect hooks in the main App.js. While using Redux, loadUser action can be easily accessed.\n\t\tApp.js\n\t\tindex.js\n\t\tApp.js\n\t\tloadUser\n\t\t‚¨Ü Back to Top\n\n\tWhat are the benefits of new JSX transform?\n\t\tThere are three major benefits of new JSX transform,\n\n\tHow does new JSX transform different from old transform?\n\t\tThe new JSX transform doesn‚Äôt require React to be in scope. i.e, You don't need to import React package for simple scenarios.\n\t\tLet's take an example to look at the main differences between the old and the new transform,\n\t\tOld Transform:\n\t\tNow JSX transform convert the above code into regular JavaScript as below,\n\t\tNew Transform:\n\t\tThe new JSX transform doesn't require any React imports\n\t\tUnder the hood JSX transform compiles to below code\n\t\tNote: You still need to import React to use Hooks.\n\n\n\n"
}, {
    "title": "The Ultimate FREE React Resources for an Interview Preparation from GitHub",
    "tags": [],
    "link": "https://dev.to/aajinkya/the-ultimate-free-react-resources-for-an-interview-preparation-from-github-dll",
    "reactions": 8,
    "cmt": null,
    "content": "When preparing for a React interview, having access to the right resources is crucial. Fortunately, there are numerous free resources available on GitHub that can help you sharpen your skills and knowledge. From comprehensive courses to curated lists of interview questions and answers, these resources cover a wide range of topics essential for interview preparation.\nReact\n\tA curated list of all FREE resources to learn and build things in React!\n\tReact\n\t\tThese resources not only help you understand the fundamentals of React but also provide insights into the types of questions that are commonly asked in interviews. By leveraging these free resources, you can enhance your React skills and approach your interview with confidence.\n\t\tI have also created a github repository for it so keep a watch on it as well. Also, feel free to raise a PR with your resources to keep it up to date. If you found it useful then consider giving it a star and share it with the one who is in great need and save their time. Cheers!\n\t\tGitHub Repo: https://github.com/TheAjinkya/react-interview-questions-answers\n\n\n"
}, {
    "title": "Build a Full-Stack app using these React libraries and cloud backend.",
    "tags": ["#react", "#opensource", "#programming", "#webdev"],
    "link": "https://dev.to/winglang/build-a-full-stack-app-using-these-react-libraries-and-cloud-backend-2o4b",
    "reactions": 335,
    "cmt": 23,
    "content": "Today, we're going to learn how to build a full-stack app with Wing as a backend.\n\nWe will use React with Vite for the frontend.\nI know there are other frameworks like Vue, Angular, and Next but React is still the most common, and a huge number of trusted startups use it to date.\nIf you don't know, React is an open source library created by Facebook to build web and native user interfaces. As you can see from the repository, it is used by 20.4M+ developers. So, it's worth the effort.\nLet's see how we can use Wing as a backend.\n\nWing - A programming language for the cloud.\n\tWinglang is a new open-source programming language designed for the cloud (aka \"cloud-oriented\"). It lets you build apps in the cloud and has a fairly easy syntax.\n\tWing programs can be executed locally (yes, no internet required) using a fully functional simulator, or deployed to any cloud provider.\n\tYou would need Node v20 or higher for Wing.\n\tMake a parent directory (we are using shared-counter) and set up the frontend with a new React app using Vite. You can use this npm command.\n\tYou can install Wing using this npm command.\n\tYou can verify the installation using wing -V.\n\tWing also provides official VSCode extension & IntelliJ which provides syntax highlighting, completions, go-to-definition, and embedded Wing Console support. You can install it before building an app!\n\tCreate a backend directory.\n\tTo create a new empty Wing project.\n\tThe structure would be as follows after using the command wing new empty.\n\tYou can install @winglibs/vite to start the dev server rather than using the npm run dev to start the local web server.\n\tYou can send data to your frontend using publicEnv available at backend/main.w.\nLet's see a minor example.\n\tYou can do more:\n\tYou can read the complete step-by-step guide on how to build a simple web application with React for our frontend and Wing for our backend. Testing is done using Wing Simulator and it's deployed to AWS using Terraform.\n\tThe AWS architecture after the deployment would be like this.\n\tTo give developers options and a better experience, Wing has rolled out full support for additional languages such as TypeScript (Wing). The only mandatory thing is you will have to install the Wing SDK.\n\tThis will also make the console fully accessible for local debugging and testing without learning the Wing language.\n\tWing even has other guides so it's easier to follow along.\n\tYou can read the docs and see the examples.\n\tYou can also use Wing in the playground to check out the structure and examples.\n\tIf you're more of a tutorial person. Watch this!\n\tWing has 3.5k+ Stars on GitHub, 1500+ Releases, and is still not on the v1 release which means a huge deal. \nGo try it out and make something cool!\n\tStar Wing ‚≠êÔ∏è\n\tThe developer ecosystem has grown and many developers have built something unique around React.\n\tI'm not covering how you can use React because it's such a wide topic and I've pasted a couple of resources at the end that will help you learn React.\n\tBut to help you make an awesome React project, we are covering 25 open source projects that you can use to make your work easier.\nThis will have plenty of resources, ideas, and concepts.\n\tI will even give you some learning resources, and project examples of a few products to learn React. \nEverything would be free & only React.\n\tLet's cover it all!\n\n\n\n\n\n\n\n1. Mantine Hooks - react hooks for state and UI management.\n\tThis may not be especially for React, but you can use these hooks to make your work easier. The hooks are ready to use with each having a good number of options.\n\tIf I have to rate, this would be the most useful project that everyone can use rather than writing code from scratch.\n\tTrust me, getting 60+ hooks is a big deal considering they have a simple way for you to see the demo of each of the hooks with easy docs to follow.\n\tGet started with the following npm command.\n\tThis is how you can use useScrollIntoView as part of mantine hooks.\n\tThey almost have everything from local storage to pagination, to scroll view, intersection, and even some very cool utilities like eye dropper and text selection. This is damn too helpful!\n\tYou can read the docs.\n\tYou can also use an alternative library if you're looking for more options.\n\tThey have more than 23k stars on GitHub but it's not only for the hooks because they are a component library for React.\n\tIt has weekly downloads of 380k+ along with the v7 release that shows they are constantly improving and trustworthy.\n\tStar Mantine Hooks ‚≠êÔ∏è\n\n\n\n\n2. React Grid Layout - draggable and resizable grid layout with responsive breakpoints.\n\tReact-Grid-Layout is a responsive grid layout system built exclusively for React applications.\n\tWith support for draggable, resizable, and static widgets, it offers an easy solution for using a grid.\n\tUnlike similar systems like Packery or Gridster, React-Grid-Layout is jQuery-free, ensuring a lightweight and efficient implementation.\n\tIts seamless integration with server-rendered apps and the ability to serialize and restore layouts make it a valuable tool for developers to use grid layouts in their React projects.\n\tGet started with the following npm command.\n\tThis is how you can use a responsive grid layout.\n\tYou can read the docs and see the demo. There is a series of demos and it's even available by clicking on \"view the next example\".\n\tYou can also try the things on codesandbox.\n\tThe project has 19k+ Stars on GitHub, is used by 16k+ Developers, and has massive weekly downloads of 600k+ on the npm package.\n\tStar React Grid Layout ‚≠êÔ∏è\n\n\n\n3. React Spectrum - A collection of libraries and tools for great UX.\n\tReact Spectrum is a collection of libraries and tools that help you build adaptive, accessible, and robust user experiences.\n\tThey provide so many things that it's hard to cover everything in just a single post.\n\tOverall, they provide these four libraries.\n\tWe will see a bit about React Aria which is a library of unstyled React components and hooks that helps you build accessible, high-quality UI components for your app.\nIt has been meticulously tested across a wide variety of devices, interaction modalities, and assistive technologies to ensure the best experience possible for all users.\n\tGet started with the following npm command.\n\tThis is how you can build a custom select.\n\tTrust me, for study purposes, this is a goldmine.\n\tThey use their own robust 40+ styling components which is way more than what is generally provided. They also have their own set of design systems such as font, UI, typography, motion, and more.\n\tYou can read about Spectrum and their architecture in detail.\n\tThey have over 11k stars on GitHub, indicating their quality despite not being widely known. Studying them can provide valuable insights into setting up your library.\n\tStar React Spectrum ‚≠êÔ∏è\n\n\n\n\n\n\n\n4. Keep React - UI component library for Tailwind CSS & React.js.\n\tKeep React is an open source component library built on Tailwind CSS and React.js. It provides a versatile set of pre-designed UI components that enable developers to streamline the creation of modern, responsive, and visually appealing web applications.\n\tGet started with the following npm command.\n\tThis is how you can use Timeline.\n\tThe output would be as below.\n\tThe little smooth animations make it all worth it, and you can use it if you want to quickly build a UI without any hassle.\n\tYou can read the docs and check the storybook for detailed usage testing.\n\tThe project has over 1k stars on GitHub, and some of its components are incredibly handy to use.\n\tStar Keep React ‚≠êÔ∏è\n\n\n\n\n\n\n5. React Content Loader - SVG-powered component to easily create skeleton loadings.\n\tThis project provides you with an SVG-powered component to easily create placeholder loadings (like Facebook's cards loading).\n\tSkeletons are used during the loading state to indicate to users that content is still loading. \nOverall, it's a very handy project for enhancing the overall user experience.\n\tGet started with the following npm command.\n\tThis is how you can use it.\n\tYou can even drag the individual skeleton or use pre-defined made for different socials like Facebook, and Instagram.\n\tYou can read the docs and see the demo.\n\tThe project has 13k+ Stars on GitHub and is used by 45k+ developers on GitHub.\n\tStar React Content Loader ‚≠êÔ∏è\n\n\n\n\n6. React PDF - Create PDF files using React.\n\tThis package is used to create PDFs using React.\n\tGet started with the following npm command.\n\tThis is how you can use this.\n\tYou can read the docs and see the demo.\n\tReact-pdf now ships a hook called usePDF that enables accessing all PDF creation capabilities via a React hook API. This is great if you need more control over how the document gets rendered or how often it's updated.\n\tThe project has 13k+ Stars on GitHub and has more than 270 releases with 400k+ weekly downloads which is a good sign.\n\tStar React PDF ‚≠êÔ∏è\n\n\n\n\n\n7. Recharts - redefined chart library built with React and D3.\n\tThe main purpose of this library is to help you write charts in React applications without any pain.\n\tThe Main principles of Recharts are.\n\tGet started with the following npm command.\n\tThis is how you can use this.\n\tYou can read the docs and see more on Storybook.\n\tThey provide an insane amount of options to customize it, which is why developers love it. They also provide a wiki page for general FAQs.\n\tYou can also try it on codesandbox here.\n\tThe project has 22k+ Stars on GitHub and is used by 200k+ developers.\n\tStar Recharts ‚≠êÔ∏è\n\n\n\n\n\n8. React Joyride - create guided tours in your apps.\n\tTours can be an excellent way to showcase your app to new users or explain the functionality of new features. It improves the user experience and can create a personalized touch.\n\tGet started with the following npm command.\n\tThis is how you can use it.\n\tThey also provide a list of components and an easy way to customize the default user interface.\n\tYou can read the docs and see the demo.\n\tYou can also try the things on codesandbox.\n\tThey have 6k+ Stars on GitHub and have more than 250k weekly downloads on the npm package.\n\tStar React Joyride ‚≠êÔ∏è\n\n\n\n\n9. SVGR - Transform SVGs into React components.\n\tSVGR is a universal tool to transform SVG into React components.\nIt takes a raw SVG and transforms it into a ready-to-use React component.\n\tGet started with the following npm command.\n\tFor instance, you take this SVG.\n\tAfter running SVGR, it will be converted to.\n\tIt optimized SVG using SVGO and uses Prettier for formatting code.\n\tTransforming HTML into JSX takes place in several steps:\n\tYou can read the docs and check things at playground.\n\tThe project has 10k+ Stars on GitHub and is used by 8M+ developers with weekly downloads of 800k+ on npm.\n\tStar SVGR ‚≠êÔ∏è\n\n\n\n10. React Sortable Tree - Drag-and-drop sortable component for nested data and hierarchies.\n\tA React component that enables the drag-and-drop sorting of hierarchical data.\n\tGet started with the following npm command.\n\tThis is how you can use this.\n\tCheck the various props options and themes that you get with this.\n\tYou can read the docs and check out the Storybook for a demonstration of some basic and advanced features.\n\tIt may not be actively maintained (still not archived), so you can also use a maintained fork version.\n\tThe project has 4.5k+ Stars on GitHub and is used by 5k+ developers.\n\tStar React Sortable Tree ‚≠êÔ∏è\n\n\n\n\n11. React Hot Toast - Smoking Hot React Notifications.\n\tReact Hot Toast offers a blazing üî• default experience with easy customization options. It leverages a Promise API for automatic loaders, ensuring smooth transitions. \nLightweight at under 5kb, it remains accessible while empowering developers with headless hooks like useToaster().\n\tAdd the Toaster to your app first. It will take care of rendering all notifications emitted. Now you can trigger toast() from anywhere!\n\tGet started with the following npm command.\n\tThis is how easy it is to use.\n\tThey have lots of options to customize it but the useToaster() hook provides you a headless system that will manage the notification state for you. This makes building your notification system much easier.\n\tYou can read the docs, the styling guide and see the demo.\n\tThe project has 8k+ Stars on GitHub and is used by 230k+ developers.\n\tStar React Hot Toast ‚≠êÔ∏è\n\n\n\n\n\n12. Payload - the best way to build a modern backend + admin UI.\n\tPayload is a headless CMS and application framework. It's meant to boost your development process, but importantly, stay out of your way as your apps get more complex.\n\tNo black magic and fully open source, Payload is both an app framework and a headless CMS. It is truly the Rails for TypeScript‚Äîand you get an admin panel. You can understand more about Payload using this YouTube Video.\n\tYou can learn about the concepts involved by using Payload.\n\tPayload interacts with your database via the database adapter that you choose. Right now, Payload officially supports two database adapters:\n\tGet started with the following command.\n\tYou will have to generate a Payload secret key and update your server.ts to initialize Payload.\n\tYou can read the docs and see the demo.\n\tThey also offer an e-commerce template that integrates seamlessly with Payload + Stripe. This template features a stunning, fully functional front end, including components for shopping carts, checkout processes, order management, and more.\n\tPayload has 18k+ Stars on GitHub and has more than 290 releases so they're constantly improving especially in DB support.\n\tStar Payload ‚≠êÔ∏è\n\n\n\n\n\n\n13. React Player - A React component for playing a variety of URLs.\n\tA React component for playing a variety of URLs, including file paths, YouTube, Facebook, Twitch, SoundCloud, Streamable, Vimeo, Wistia, Mixcloud, DailyMotion, and Kaltura. You can see the list of supported media.\n\tThe maintenance of ReactPlayer is being taken over by Mux which makes them a good choice.\n\tGet started with the following npm command.\n\tThis is how you can use this.\n\tYou can also use react-player/lazy to lazy load the appropriate player for the URL you pass in. This adds several reactPlayer chunks to your output but reduces your main bundle size.\n\tYou can read the docs and see the demo. They provide plenty of options including adding subtitles and making it responsive in an easy way.\n\tThey have 8k+ stars on GitHub, are used by 135k+ developers, and have a massive 800k+ weekly downloads on the npm package.\n\tStar React Player ‚≠êÔ∏è\n\n\n\n14. Victory - React components for building interactive data visualizations.\n\tVictory is an ecosystem of composable React components for building interactive data visualizations.\n\tGet started with the following npm command.\n\tThis is how you can use this.\n\tThis is how it's rendered. They also offer animations and theme options, which are generally useful.\n\tYou can read the docs and follow the tutorial to get started. They provide around 15 different chart options.\n\tIt's also available for React Native (docs), so that's a plus point. I would also recommend checking out their FAQs where they describe solutions of common problems with code and explanation such as styling, annotation (labels), handling axes.\n\tThe project has 10k+ Stars on GitHub and is used by 23k+ developers on GitHub.\n\tStar Victory ‚≠êÔ∏è\n\n\n\n\n\n15. React Slick - React carousel component.\n\tReact Slick is a carousel component built with React. It is a react port of a slick carousel\n\tGet started with the following npm command.\n\tThis is how you can use custom pagination.\n\tYou can read about the prop options and methods that are available.\n\tYou can read the docs and all sets of examples with code & output.\n\tThey have 11k+ Stars on GitHub and 360k+ developers use it on GitHub.\n\tStar React Slick ‚≠êÔ∏è\n\n\n\n\n16. Medusa - Building blocks for digital commerce.\n\tMedusa is a set of commerce modules and tools that allow you to build rich, reliable, and performant commerce applications without reinventing core commerce logic.\n\tThe modules can be customized and used to build advanced e-commerce stores, marketplaces, or any product that needs foundational commerce primitives. All modules are open source and freely available on npm.\n\tGet started with the following npm command.\n\tInclude this in app.ts. \nOnly children of MedusaProvider can benefit from its hooks. So, the Storefront component and its child components can now use hooks exposed by Medusa React.\n\tFor instance, this is how you can create a cart by using mutations.\n\tThey have provided a set of e-commerce modules (vast options) like discounts, price lists, gift cards, and more.\n\tThey also provide an easy way for admin & customer authentication which you can read in the docs.\n\tThey provide a nextjs starter template and Medusa React as an SDK.\n\tThe project has 22k+ Stars on GitHub and is used by 4k+ developers.\n\tStar Medusa ‚≠êÔ∏è\n\n\n\n\n17. React Markdown - Markdown component for React.\n\tMarkdown is crucial, and rendering it with React is highly useful for various scenarios.\n\tIt offers a React component capable of safely rendering a string of markdowns into React elements. You can customize the transformation of markdown by passing plugins and specifying components to be used instead of standard HTML elements.\n\tGet started with the following npm command.\n\tThis is how you can use this.\n\tEquivalent JSX would be.\n\tThey have also provided a cheatsheet and a ten-minute step-by-step tutorial.\n\tYou can read the docs and check the demo.\n\tThe project has 12k+ Stars on GitHub, has 2700k+ weekly downloads, and is used by 200k+ developers which proves how useful it really is.\n\tStar React Markdown ‚≠êÔ∏è\n\n\n\n\n18. React JSONSchema Form - for building Web forms from JSON Schema.\n\treact-jsonschema-form automatically generates React forms from JSON Schema, making it ideal for generating forms for any data with just a JSON schema. It offers customization options like uiSchema to tailor the form's appearance beyond default themes.\n\tGet started with the following npm command.\n\tThis is how you can use this.\n\tThey provide advanced customization options including custom widgets.\n\tYou can read the docs and check the live playground.\n\tIt has 13k+ Stars on GitHub and is used by 5k+ developers. They are on the v5 with 190+ releases so they're constantly improving.\n\tStar React JSONSchema Form ‚≠êÔ∏è\n\n\n\n19. Craft.js - build extensible drag and drop page editors.\n\tPage editors enhance user experience but building one from scratch can be daunting. Existing libraries offer pre-built editors with editable components, but customization often requires modifying the library itself.\n\tCraft.js addresses this by modularizing page editor components, simplifying customization with drag-and-drop functionality, and rendering management. Design your editor in React without complex plugin systems, focusing on your specific needs and specifications.\n\tGet started with the following npm command.\n\tThey have also provided a short tutorial on how you can get started. I'm not covering it since it's very easy and detailed.\n\tYou can read the docs and check the live demo along with one other live example.\n\tIt has around 6k+ Stars on GitHub but still useful considering they are improving.\n\tStar Craft.js ‚≠êÔ∏è\n\n\n\n20. Gatsby - best React-based framework with performance, scalability, and security built-in.\n\tGatsby is a React-based framework that empowers developers to build lightning-fast websites and apps, merging the flexibility of dynamic rendering with the speed of static site generation.\n\tWith features like customizable UIs and support for various data sources, Gatsby offers unparalleled control and scalability. Plus, it automates performance optimizations, making it a top choice for static websites.\n\tGet started with the following npm command.\n\tThis is how you can use Link in Gatsby (react component).\n\tThey have provided a set of starter templates with how to use it, the dependencies involved, and a demo of each of the templates.\n\tYou can read about some of the common concepts involved with Gatsby such as React Hydration, the Gatsby build process, and more.\n\tYou can read the docs and check tutorials for getting started.\n\tGatsby has 55k+ Stars on GitHub and is used by 240k+ developers\n\tStar Gatsby ‚≠êÔ∏è\n\n\n\n\n21. Chat UI Kit React - Build your chat UI with React in minutes.\n\tThe Chat UI Kit by Chatscope is an open source UI toolkit for developing web chat applications.\nEven though the project is not widely used, the features are useful for beginners just checking out the project.\n\tGet started with the following npm command.\n\tThis is how you can create a GUI.\n\tYou can read the docs.\nMore detailed documentation is present in the storybook.\n\tIt provides some handy components like TypingIndicator, Multiline Incoming, and many more.\n\tI know some of you prefer a blog to understand the whole structure, so you can read How to Integrate ChatGPT with React by Rollbar that uses Chat UI Kit React.\n\tSome of the demos that you can see:\n\tStar Chat UI Kit React ‚≠êÔ∏è\n\n\n\n\n\n22. Botonic - React Framework to Build Conversational Apps.\n\tBotonic is a full-stack Javascript framework to create chatbots and modern conversational apps that work on multiple platforms: web, mobile, and messaging apps (Messenger, WhatsApp, Telegram, etc). It's built on top of ‚öõÔ∏è React, Serverless, and Tensorflow.js.\n\tIf you're not aware of the concept of conversational apps, you can read them on the official blog.\n\tWith Botonic you can create conversational applications that incorporate the best out-of-text interfaces (simplicity, natural language interaction) and graphical interfaces (multimedia, visual context, rich interaction). \nIt's a powerful combination to provide a better user experience than traditional chatbots, which rely only on text and NLP.\n\tThis is how you can simple Botonic is.\n\tThey support TypeScript as well so it's a plus point.\n\tYou can see some of the examples built using Botonic along with their source code.\n\tYou can read the docs and how to Create a Conversational App from Scratch.\n\tStar Botonic ‚≠êÔ∏è\n\n\n\n23. React Flowbite - React components built for Flowbite and Tailwind CSS.\n\tEveryone has a different preference for the UI they want to build their website with.\n\tFlowbite React is an open source collection of UI components, built in React, with utility classes from Tailwind CSS that you can use as a starting point for user interfaces and websites.\n\tGet started with the following npm command.\n\tThis is how you can use table and keyboard components together.\n\tYou can read the docs and see features in Storybook. You can also see the list of components.\n\tIn my opinion, this is good if you quickly want to set up a UI, but don't want to end up using pre-defined library components for a high-quality open source project.\n\tWith over 1.5k stars on GitHub and a user base of 37k+ developers, this project is widely recognized and trusted by the community, making it a solid option.\n\tStar React Flowbite ‚≠êÔ∏è\n\n\n\n\n24. DND Kit - lightweight, performant, accessible, and extensible drag & drop.\n\tThis is a robust drag & drop toolkit for React, boasting features like customizable collision detection, multiple activators, and auto-scrolling.\n\tDesigned with React in mind, it offers hooks for easy integration without requiring major architectural changes. Supporting diverse use cases, from lists to grids and virtualized lists, it's both dynamic and lightweight, with no external dependencies.\n\tGet started with the following npm command.\n\tThis is how you can build a draggable & droppable component.\n\tExample.jsx\n\tDroppable.jsx\n\tDraggable.jsx\n\tI'm holding the draggable component on the droppable one.\n\tYou can read the docs and the options of sensors such as Mouse, and Pointer.\n\tIt has 10k+ Stars on GitHub and is used by 47k+ Developers on GitHub.\n\tStar DND Kit ‚≠êÔ∏è\n\n\n\n\n25. Expo - Develop, review, & deploy native apps from a single React codebase for Android, iOS, & web.\n\tExpo is an open source platform for making universal native apps that run on Android, iOS, and the web. It includes a universal runtime and libraries that let you build native apps by writing React and JavaScript. You can read about the core concepts involved with the Expo.\n\tWhen Expo was first created, React Native had yet to be publicly released. This means there were no third-party packages.\n\tTo make React Native easier to use, they made a bunch of tools themselves to handle common tasks. Some of these tools have been changed and improved over time to fit different needs.\n\tThe Expo SDK is thoroughly tested, written in TypeScript, and made for Android, iOS, and the web. Every part of the Expo SDK works together smoothly, so you won't have any trouble upgrading. All Expo tools and services work great in any React Native app.\n\tGet started using the following commands.\n\tUltimately, you have to make several components to design any screen. Such as the image can be attached to the screen with the below code.\n\tYou can also use the SDK for Camera that renders a preview for the device's front or back camera & Notifications that provides an API to fetch push notification tokens and to present, schedule, receive and respond to notifications.\n\tThey also provide a step-by-step tutorial that you can follow to get started.\n\tYou can read the docs and see the live demo of Hello World on Snack.\n\tIt has 28k+ Stars on GitHub and is used by a massive amount of 850k+ developers.\n\tStar Expo ‚≠êÔ∏è\n\tHere are some resources that can help you with React.\n\tIf you're looking for React-like alternative libraries, you can check out Inferno & Preact.\n\tDidn't I say, that I would cover it all :D\n\tSeriously though, these are some fantastic projects for your React project. I hope you'll improve the ecosystem by contributing to these open source projects.\nThese projects are very good if you're trying to use your curiosity to build something cool.\n\tAs I've mentioned earlier, developer experience (DX) is crucial, and these projects have worked hard to keep it top-notch.\n\tComment down to let us know which project are you going to use in your react project.\n\tHave a great day! Till next time.\n\tFollow me on GitHub.\n\tFollow Winglang for more content like this.\n\n\n\n\n\n"
}, {
    "title": "101 React Tips & Tricks For Beginners To Experts ‚ú®",
    "tags": ["#webdev", "#javascript", "#react", "#beginners"],
    "link": "https://dev.to/_ndeyefatoudiop/101-react-tips-tricks-for-beginners-to-experts-4m11",
    "reactions": 593,
    "cmt": 35,
    "content": "I have been working professionally with React for the past +5 years.\nIn this article, I share the 101 best tips & tricks I learned over the years.\nReady? Let's dive in üí™!\nCategory #1: Components organization üßπ\n\t1. Use self-closing tags to keep your code compact\n\t2. Prefer fragments over DOM nodes (e.g., div, span, etc.) to group elements\n\t\tIn React, each component must return a single element. Instead of wrapping multiple elements in a <div> or <span>, use <Fragment> to keep your DOM neat and tidy.\n\t\t‚ùå Bad: Using div clutters your DOM and may require more CSS code.\n\t\t‚úÖ Good: <Fragment> wraps elements without affecting the DOM structure.\n\n\t3. Use React fragment shorthand <></> (except if you need to set a key)\n\t\t‚ùå Bad: The code below is unnecessarily verbose.\n\t\t‚úÖ Good: Unless, you need a key, <></> is more concise.\n\n\t4. Prefer spreading props over accessing each one individually\n\t\t‚ùå Bad: The code below is harder to read (especially at scale).\n\t\t‚úÖ Good: The code below is more concise.\n\n\t5. When setting default values for props, do it while destructuring them\n\t\t‚ùå Bad: You may need to define the defaults in multiple places and introduce new variables.\n\t\t‚úÖ Good: You can set all your defaults in one place at the top. This makes it easy for someone to locate them.\n\n\t6. Drop curly braces when passing string type props.\n\t7. Ensure that value is a boolean before using value && <Component {...props}/> to prevent displaying unexpected values on the screen.\n\t\t‚ùå Bad: When the list is empty, 0 will be printed on the screen.\n\t\t‚úÖ Good: Nothing will be printed on the screen when there are no items.\n\n\t8. Use functions (inline or not) to avoid polluting your scope with intermediate variables\n\t\t‚ùå Bad: The variables gradeSum and gradeCount are cluttering the component's scope.\n\t\t‚úÖ Good: The variables gradeSum and gradeCountare scoped within computeAverageGrade function.\n\n\t9. Use curried functions to reuse logic (and properly memoize callback functions)\n\t\t‚ùå Bad: The logic for updating a field is very repetitive.\n\t\t‚úÖ Good: Introduce createFormValueChangeHandler that returns the correct handler for each field.\n\n\t10. Move data that doesn't rely on the component props/state outside of it for cleaner (and more efficient) code\n\t\t‚ùå Bad: OPTIONS and renderOption don't need to be inside the component because they don't depend on any props or state.\n\t\tAlso, keeping them inside means we get new object references every time the component renders. If we were to pass renderOption to a child component wrapped in memo, it would break the memoization.\n\t\t‚úÖ Good: Move them out of the component to keep the component clean and references stable.\n\n\t11. When storing the selected item from a list, store the item ID rather than the entire item\n\t\t‚ùå Bad: If an item is selected but then it changes (i.e., we receive a completely new object reference for the same ID), or if the item is no longer present in the list, selectedItem will either retain an outdated value or become incorrect.\n\t\t‚úÖ Good: We store the selected item by its ID (which should be stable). This ensures that even if the item is removed from the list or one of its properties changed, the UI should be correct.\n\n\t12. If you're frequently checking a prop's value before doing something, introduce a new component\n\t\t‚ùå Bad: The code is cluttered because of all the user == null checks.\n\t\t‚úÖ Good: We introduce a new component, UserPosts, that takes a defined user and is much cleaner.\n\n\t13. Use the CSS :empty pseudo-class to hide elements with no children\n\t\tIn the example below üëá, a wrapper takes children and adds a red border around them.\n\t\t‚ùå Problem: The border remains visible on the screen even if the children are empty (i.e., equal to null, undefined, etc.).\n\t\t‚úÖ Solution: Use the :empty CSS pseudo-class to ensure the wrapper is not displayed when it's empty.\n\n\t14. Group all the state and context at the top of the component\n\t\tWhen all the state and context are located at the top, it is easy to spot what can trigger a component re-render.\n\t\t‚ùå Bad: State and context are scattered, making it hard to track.\n\t\t‚úÖ Good: All state and context are grouped at the top, making it easy to spot.\n\n\n\nCategory #2: Effective Design Patterns & Techniques üõ† Ô∏è\n\t15. Leverage the children props for cleaner code (and performance benefits)\n\t\tUsing the children props has several benefits:\n\t\t‚ùå Bad: MyVerySlowComponent renders whenever Dashboard renders, which happens every time the current time updates. You can see it in the next image, where I use React Developer Tool's profiler.\n\t\tGIF\n\t\t‚úÖ Good: MyVerySlowComponent doesn't render when Dashboard renders.\n\t\tGIF\n\n\t16. Build composable code with compound components\n\t\tThink of compound components as Lego blocks.\n\t\tYou piece them together to create a customized UI. These components work exceptionally well when creating libraries, resulting in both expressive and highly extendable code.\n\t\tExample from reach.ui (Menu, MenuButton, MenuList, MenuLink are compound components)\n\n\t17. Make your code more extensible with render functions or component functions props\n\t\tLet's say we want to display various lists, such as messages, profiles, or posts, and each one should be sortable.\n\t\tTo achieve this, we introduce a List component for reuse. There are two ways we can go around this:\n\t\t‚ùå Bad: Option 1\nList handles rendering each item and how they are sorted. This is problematic as it violates the Open Closed Principle. Whenever a new item type is added, this code will be modified.\n\t\t‚úÖ Good: Option 2\nList takes render functions or component functions, invoking them only when needed.\n\t\tYou can find an example in this sandbox below üëá:\n\n\t18. When dealing with different cases, use value === case && <Component /> to avoid holding onto old state\n\t\t‚ùå Problem: In the sandbox below, the counter doesn't reset when switching between Posts and Snippets. This happens because when rendering the same component, its state persists across type changes.\n\t\t‚úÖ Solution: Render a component based on the selectedType or use a key to force a reset when the type changes.\n\n\t19. Always use error boundaries\n\t\tBy default, if your application encounters an error during rendering, the entire UI crashes üí•.\n\t\tTo prevent this, use error boundaries to:\n\n\n\n\nCategory #3: Keys & Refs üóùÔ∏è\n\t20. Use crypto.randomUUID or Math.random to generate keys\n\t\tJSX elements inside a map() call always need keys.\n\t\tSuppose your elements don't already have keys. In that case, you can generate unique IDs using crypto.randomUUID, Math.random, or the uuid library.\n\n\t21. Make sure your list items IDs are stable (i.e., they don't change between renders)\n\t\tAs much as possible, keys/IDs should be stable.\n\t\tOtherwise, React may re-render some components uselessly, or selections will no longer be valid, like in the example below.\n\t\t‚ùå Bad: selectedQuoteId changes whenever App renders, so there is never a valid selection.\n\t\t‚úÖ Good: The IDs are added when we get the quotes.\n\n\t22. Strategically use the key attribute to trigger component re-renders\n\t\tWant to force a component to re-render from scratch? Just change its key.\n\t\tIn the example below, we use this trick to reset the error boundary when switching to a new tab.\n\n\t23. Use a ref callback function for tasks such as monitoring size changes and managing multiple node elements.\n\t\tDid you know you can pass a function to the ref attribute instead of a ref object?\n\t\tHere's how it works:\n\t\tIn the example below, we use this tip to skip the useEffect\n\t\t‚ùå Before: Using useEffect to focus the input\n\t\t‚úÖ After: We focus on the input as soon as it is available.\n\n\nCategory #4: Organizing React code üß©\n\t24. Colocate React components with their assets (e.g., styles, images, etc.)\n\t\tAlways keep each React component with related assets, like styles and images.\n\n\t25. Limit your component file size\n\t\tBig files with tons of components and exports can be confusing.\n\t\tPlus, they tend to grow even bigger as more stuff gets added.\n\t\tSo, aim for a reasonable file size and split components into separate files when it makes sense.\n\n\t26. Limit the number of return statements in your functional component file\n\t\tMultiple return statements in a functional component make it hard to see what the component is returning.\n\t\tThis was not a problem for class components where we could search for the render term.\n\t\tA handy trick is to use arrow functions without braces when possible (VSCode has an action for this üòÄ).\n\t\t‚ùå Bad: It is harder to spot the component return statement\n\t\t‚úÖ Good: There is one return statement for the component\n\n\t27. Prefer named exports over default exports\n\t\tI see default exports everywhere, and it makes me sad ü•≤.\n\t\tLet's compare the two approaches:\n\t\tWe now import the component like this:\n\t\tThese are the problems with default exports:\n\t\tFor example, if Dashboard is renamed into Console, we will have this:\n\t\tFor example, in the case of named imports, once I type import { } from \"/path/to/file\", I get autocompletion when I set my cursor inside the brackets.\n\t\tFor example, if I wanted to re-export the Dashboard component from let's say an index file, I would have to do this:\n\t\tThe solution is more straightforward with named exports.\n\t\tSo, please default to named exports üôè.\n\n\n\nCategory #5: Efficient State Management üö¶\n\t28. Never create a state for a value that can be derived from other state or props\n\t\tMore state = more trouble.\n\t\tEvery piece of state can trigger a re-render and make resetting the state a hassle.\n\t\tSo, if a value can be derived from state or props, skip adding a new state.\n\t\t‚ùå Bad: filteredPosts doesn't need to be in the state.\n\t\t‚úÖ Good: filteredPosts is derived from posts and filters.\n\n\t29. Keep the state at the lowest level necessary to minimize re-renders\n\t\tWhenever the state changes inside a component, React re-renders the component and all its children (there is an exception with children wrapped in memo).\n\t\tThis happens even if those children don't use the changed state. To minimize re-renders, move the state down the component tree as far as possible.\n\t\t‚ùå Bad: When sortOrder changes, both LeftSidebar and RightSidebar re-render.\n\t\t‚úÖ Good: sortOrder change will only affect Main.\n\n\t30. Clarify the distinction between the initial state and the current state\n\t\t‚ùå Bad: It's unclear that sortOrder is just the initial value, which may lead to confusion or errors in state management.\n\t\t‚úÖ Good: Naming is clear about what is the initial state and what is current.\n\n\t31. Update state based on the previous state, especially when memoizing with useCallback\n\t\tReact allows you to pass an updater function to the set function from useState.\n\t\tThis updater function uses the current state to calculate the next state.\n\t\tI use this behavior whenever I need to update the state based on the previous state, especially inside functions wrapped with useCallback. In fact, this approach prevents the need to have the state as one of the hook dependencies.\n\t\t‚ùå Bad: handleAddTodo and handleRemoveTodo change whenever todos changes.\n\t\t‚úÖ Good: handleAddTodo and handleRemoveTodo remain the same even when todos changes.\n\n\t32. Use functions in useState for lazy initialization and performance gains, as they are invoked only once.\n\t\tUsing a function in useState ensures the initial state is computed only once.\n\t\tThis can improve performance, especially when the initial state is derived from an \"expensive\" operation like reading from local storage.\n\t\t‚ùå Bad: We read the theme from local storage every time the component renders\n\t\t‚úÖ Good: We only read from the local storage when the component mounts.\n\n\t33. Use react context for broadly needed, static state to prevent prop drilling\n\t\tI will use React context whenever I have some data that:\n\t\tThis approach helps avoid prop drilling (i.e., passing down data or state through multiple layers of the component hierarchy).\n\t\tSee an example in the sandbox below üëá.\n\n\t34. React Context: Split your context into parts that change frequently and those that change infrequently to enhance app performance\n\t\tOne challenge with React context is that all components consuming the context re-render whenever the context data changes, even if they don't use the part of the context that changed ü§¶‚Äç‚ôÄÔ∏è.\n\t\tA solution? Use separate contexts.\n\t\tIn the example below, we've created two contexts: one for actions (which are constant) and another for state (which can change).\n\n\t35. React Context: Introduce a Provider component when the value computation is not straightforward\n\t\t‚ùå Bad: There is too much logic inside App to manage the theme.\n\t\t‚úÖ Good: The theme logic is encapsulated in ThemeProvider\n\n\t36. Consider using the useReducer hook as a lightweight state management solution\n\t\tWhenever I have too many values in my state or a complex state and don't want to rely on external libraries, I will reach for useReducer.\n\t\tIt's especially effective when combined with context for broader state management needs.\n\t\tExample: See #Tip 34.\n\n\t37. Simplify state updates with useImmer or useImmerReducer\n\t\tWith hooks like useState and useReducer, the state must be immutable (i.e., all changes need to create a new state vs. modifying the current one).\n\t\tThis is often cumbersome to achieve.\n\t\tThis is where useImmer and useImmerReducer offer a simpler alternative. They allow you to write \"mutable\" code automatically converted to immutable updates.\n\t\t‚ùå Tedious: We must carefully ensure we're creating a new state object.\n\t\t‚úÖ More straightforward: We can directly modify draftState.\n\n\t38. Use Redux (or another state management solution) for complex client-side state accessed across multiple components\n\t\tI turn to Redux whenever:\n\t\tFor a streamlined experience, I recommend using redux-tooltkit.\n\n\t39. Redux: Use Redux DevTools to debug your state\n\t\tThe Redux DevTools browser extension is an useful tool for debugging your Redux projects.\n\t\tIt allows you to visualize your state and actions in real-time, maintain state persistence across refreshes, and much more.\n\t\tTo understand its use, watch this great YouTube video.\n\n\nCategory #6: React Code Optimization üöÄ\n\t40. Prevent unnecessary re-renders with memo\n\t\tWhen dealing with components that are costly to render and their parent components frequently update, wrapping them in memo can be a game changer.\n\t\tmemo ensures that a component only re-renders when its props have changed, not simply because its parent re-rendered.\n\t\tIn the example below, I get some data from the server through useGetDashboardData. If the posts didn't change, wrapping ExpensiveList in memo will prevent it from re-rendering when other parts of the data update.\n\n\t41. Specify an equality function with memo to instruct React on how to compare the props.\n\t\tBy default, memouses Object.is to compare each prop with its previous value.\n\t\tHowever, specifying a custom equality function can be more efficient than default comparisons or re-rendering for more complex or specific scenarios.\n\t\tExample üëá\n\n\t42. Prefer named functions over arrow functions when declaring a memoized component\n\t\tWhen defining memoized components, using named functions instead of arrow functions can improve clarity in React DevTools.\n\t\tArrow functions often result in generic names like _c2, making debugging and profiling more difficult.\n\t\t‚ùå Bad: Using arrow functions for memoized components results in less informative names in React DevTools.\n\t\t‚úÖ Good: The component's name will be visible in DevTools.\n\n\t43. Cache expensive computations or preserve references with useMemo\n\t\tI will generally useMemo:\n\t\t‚ùå Bad: The memo for ExpensiveList does not prevent re-renders because styles are recreated on every render.\n\t\t‚úÖ Good: The use of useMemo ensures styles only changes when baseStyles changes, allowing memo to effectively prevent unnecessary re-renders.\n\n\t44. Use useCallback to memoize functions\n\t\tuseCallback is similar to useMemo but is designed explicitly for memoizing functions.\n\t\t‚ùå Bad: Whenever the theme changes, handleThemeChange will be called twice, and we will push logs to the server twice.\n\t\t‚úÖ Good: Wrapping handleThemeChange in useCallback ensures that it is recreated only when necessary, reducing unnecessary executions.\n\n\t45. Memoize callbacks or values returned from utility hooks to avoid performance issues\n\t\tWhen you create a custom hook to share with others, memoizing the returned values and functions is crucial.\n\t\tThis practice makes your hook more efficient and prevents unnecessary performance issues for anyone using it.\n\t\t‚ùå Bad: loadData is not memoized and creates performance issues.\n\t\t‚úÖ Good: We memoize everything so there are no unexpected performance issues.\n\n\t46. Leverage lazy loading and Suspense to make your apps load faster\n\t\tWhen you're building your app, consider using lazy loading and Suspense for code that is:\n\t\tIn the sandbox below üëá, the Slider assets (JS + CSS) only load after you click on a card.\n\n\t47. Throttle your network to simulate a slow network\n\t\tDid you know you can simulate slow internet connections directly in Chrome?\n\t\tThis is especially useful when:\n\t\tGIF\n\n\t48. Use react-window or react-virtuoso to efficiently render lists\n\t\tNever render a long list of items all at once‚Äîsuch as chat messages, logs, or infinite lists.\n\t\tDoing so can cause the browser to freeze.\n\t\tInstead, virtualize the list. This means rendering only the subset of items likely to be visible to the user.\n\t\tLibraries like react-window, react-virtuoso or @tanstack/react-virtual are designed for this purpose.\n\t\t‚ùå Bad: NonVirtualList renders all 50,000 log lines simultaneously, even if they aren't visible.\n\t\t‚úÖ Good: VirtualList renders only the items likely to be visible.\n\t\tYou can switch between the two options in the sandbox below and notice how bad the app performs when NonVirtualList is used üëá.\n\n\n\n\n\n\n\n\n\nCategory #7: Debugging React code üêû\n\t49. Use StrictMode to catch bugs in your components before deploying them to production\n\t\tUsing StrictMode is a proactive way to detect potential issues in your application during development.\n\t\tIt helps identify problems such as:\n\t\tThe example below shows a bug because clearInterval is never called. StrictMode helps catch this by running the effect twice, which creates two intervals.\n\n\t50. Install the React Developer Tools browser extension to view/edit your components and detect performance issues\n\t\tReact Developer Tools is a must extension (Chrome, Firefox).\n\t\tThis extension lets you:\n\n\t51. React DevTools Components: Highlight components that render to identify potential issues\n\t\tI will use this trick whenever I suspect that my app has performance issues. You can highlight the components that render to detect potential problems (e.g., too many renders).\n\t\tThe gif below shows that the FollowersListFn component re-renders whenever the time changes, which is wrong.\n\t\tGIF\n\n\t52. Leverage useDebugValue in your custom hooks for better visibility in React DevTools\n\t\tuseDebugValue can be a handy tool for adding descriptive labels to your custom hooks in React DevTools.\n\t\tThis makes it easier to monitor their states directly from the DevTools interface.\n\t\tFor instance, consider this custom hook I use to fetch and display the current time, updated every second:\n\t\t‚ùå Bad: Without useDebugValue, the actual time value isn't immediately visible; you'd need to expand the CurrentTime hook:\n\t\t‚úÖ Good: With useDebugValue, the current time is readily visible:\n\n\t53. Use the why-did-you-render library to track component rendering and identify potential performance bottlenecks\n\t\tSometimes, a component re-renders, and it's not immediately clear why ü§¶‚Äç‚ôÄÔ∏è.\n\t\tWhile React DevTools is helpful, in large apps, it might only provide vague explanations like \"hook #1 rendered,\" which can be useless.\n\t\tIn such cases, you can turn to the why-did-you-render library. It offers more detailed insights into why components re-render, helping to pinpoint performance issues more effectively.\n\t\tI made an example in the sandbox below üëá. Thanks to this library, we can find the issue with the FollowersList component.\n\n\t54. Hide logs during the second render in Strict Mode\n\t\tStrictMode helps catch bugs early in your application's development.\n\t\tHowever, since it causes components to render twice, this can result in duplicated logs, which might clutter your console.\n\t\tYou can hide logs during the second render in Strict Mode to address this.\n\t\tCheck out how to do it in the gif below üëá:\n\t\tGIF\n\n\n\n\n\n\n\n\n\n\n\nCategory #8: Testing React code üß™\n\t55. Use React Testing Library to test your React components effectively\n\t\tWant to test your React apps?\n\t\tMake sure to use @testing-library/react.\n\t\tYou can find a minimal example here.\n\n\t56. React Testing Library: Use testing playground to effortlessly create queries\n\t\tStruggling to decide which queries to use in your tests?\n\t\tConsider using testing playground to quickly generate them from your component's HTML.\n\t\tHere are two ways to leverage it:\n\t\tOption #1: Use screen.logTestingPlaygroundURL() in your test. This function generates a URL that opens the Testing Playground tool with the HTML of your component already loaded.\n\t\tOption #2: Install Testing Playground Chrome extension. This extension allows you to hover over elements in your app directly in the browser to find the best queries for testing them.\n\n\t57. Conduct end-to-end tests with Cypress or Playwright\n\t\tNeed to conduct end-to-end tests?\n\t\tMake sure to check out Cypress or Playwright.\n\n\t58. Use MSW to mock network requests in your tests\n\t\tSometimes, your tests need to make network requests.\n\t\tRather than implementing your own mocks (or, God forbid, making actual network requests üòÖ), consider using MSW (Mock Service Worker) to handle your API responses.\n\t\tMSW allows you to intercept and manipulate network interactions directly in your tests, providing a robust and straightforward solution for simulating server responses without affecting live servers.\n\t\tThis approach helps maintain a controlled and predictable testing environment, enhancing the reliability of your tests.\n\n\n\n\nCategory #9: React hooks üé£\n\t59. Make sure you perform any required cleanup in your useEffect hooks\n\t\tAlways return a cleanup function in your useEffect hooks if you're setting up anything that needs to be cleaned up later.\n\t\tThis could be anything from ending a chat session to closing a database connection.\n\t\tNeglecting this step can lead to poor resource usage and potential memory leaks.\n\t\t‚ùå Bad: This example sets an interval. But we never clear it, which means it keeps running even after the component is unmounted.\n\t\t‚úÖ Good: The interval is properly cleared when the component unmounts.\n\n\t60. Use refs for accessing DOM elements\n\t\tYou should never manipulate the DOM directly with React.\n\t\tMethods like document.getElementById and document.getElementsByClassName are forbidden since React should access/manipulate the DOM.\n\t\tSo, what should you do when you need access to DOM elements?\n\t\tYou can use the useRef hook, like in the example below, where we need access to the canvas element.\n\n\t61. Use refs to preserve values across re-renders\n\t\tIf you have mutable values in your React component that aren't stored in the state, you'll notice that changes to these values don't persist through re-renders.\n\t\tThis happens unless you save them globally.\n\t\tYou might consider putting these values in the state. However, if they are irrelevant to the rendering, doing so can cause unnecessary re-renders, which wastes performance.\n\t\tThis is where useRef also shines.\n\t\tIn the example below, I want to stop the timer when the user clicks on some button. For that, I need to store the intervalId somewhere.\n\t\t‚ùå Bad: The example below won't work as intended because intervalId gets reset with every component re-render.\n\t\t‚úÖ Good: By using useRef, we ensure that the interval ID is preserved between renders.\n\n\t62. Prefer named functions over arrow functions within hooks such as useEffect to easily find them in React Dev Tools\n\t\tIf you have many hooks, finding them in React DevTools can be challenging.\n\t\tOne trick is to use named functions so you can quickly spot them.\n\t\t‚ùå Bad: It's hard to find the specific effect among many hooks.\n\t\t‚úÖ Good: You can quickly spot the effect.\n\n\t63. Encapsulate logic with custom hooks\n\t\tLet's say I have a component that gets the theme from the user's dark mode preferences and uses it inside the app.\n\t\tIt's better to extract the logic that returns the theme into a custom hook (to reuse it and keep the component clean).\n\t\t‚ùå Bad: App is overcrowded\n\t\t‚úÖ Good: App is much simpler, and we can reuse the logic\n\n\t64. Prefer functions over custom hooks\n\t\tNever put logic inside a hook when a function can be used üõë.\n\t\tIn effect:\n\t\t‚ùå Bad: The useLocale hook is unnecessary since it doesn't need to be a hook. It doesn't use other hooks like useEffect, useState, etc.\n\t\t‚úÖ Good: Create a function getLocale instead\n\n\t65. Prevent visual UI glitches by using the useLayoutEffect hook\n\t\tWhen an effect isn't caused by a user interaction, the user will see the UI before the effect runs (often briefly).\n\t\tAs a result, if the effect modifies the UI, the user will see the initial UI version very quickly before seeing the updated one, creating a visual glitch.\n\t\tUsing useLayoutEffect ensures the effect runs synchronously after all DOM mutations, preventing the initial render glitch.\n\t\tIn the sandbox below, we want the width to be equally distributed between the columns (I know this can be done in CSS, but I need an example üòÖ).\n\t\tWith useEffect, you can see briefly at the beginning that the table is changing. The columns are rendered with their default size before being adjusted to their correct size.\n\t\tIf you're looking for another great usage, check out this post.\n\n\t66. Generate unique IDs for accessibility attributes with the useId hook\n\t\tTired of coming up with IDs or having them clash?\n\t\tYou can use the useId hook to generate a unique ID inside your React component and ensure your app is accessible.\n\t\tExample\n\n\t67. Use the useSyncExternalStoreto subscribe to an external store\n\t\tThis is a rarely needed but super powerful hook üí™.\n\t\tUse this hook if:\n\t\tIn the example below, I want a Logger singleton to log errors, warnings, info, etc., in my entire app.\n\t\tThese are the requirements:\n\t\tüëâ I can use useSyncExternalStore inside my Logs component to access the logs and listen to changes.\n\n\t68. Use the useDeferredValue hook to display the previous query results until the new results become available\n\t\tImagine you're building an app that represents countries on a map.\n\t\tUsers can filter to see countries up to a specific population size.\n\t\tEvery time maxPopulationSize updates, the map is re-rendered (see sandbox below).\n\t\tAs a result, notice how janky the slider is when you move it too fast. This is because the map is re-rendered every time the slider moves.\n\t\tTo solve this, we can use the useDeferredValue hook so that the slider updates smoothly.\n\t\tIf you're looking for another great usage, check out this post.\n\n\n\n\n\n\nCategory #10: Must-known React Libraries/Tools üß∞\n\t69. Incorporate routing into your app with react-router\n\t\tIf you need your app to support multiple pages, check out react-router.\n\t\tYou can find a minimal example here.\n\n\t70. Implement first-class data fetching in your app with swr or React Query\n\t\tData fetching can be notoriously tricky.\n\t\tHowever, libraries like swr or React Query make it much easier.\n\t\tI recommend swr for simple use cases and React Query for more complex ones.\n\n\t71. Simplify form state management with libraries like formik, React Hook Form, or TanStack Form\n\t\tI used to hate form management in React ü•≤.\n\t\tThat was until I discovered libraries like:\n\t\tSo make sure to check these out if you're struggling with forms.\n\n\t72. Internationalize your app using Format.js, Lingui, or react-i18next.\n\t\tIf your app needs to support multiple languages, it should be internationalized.\n\t\tYou can achieve this with libraries like:\n\n\t73. Effortlessly create impressive animations with framer-motion\n\t\tAnimations can make your app stand out üî•.\n\t\tYou can create them easily with framer-motion.\n\n\t74. Tired of re-inventing the wheel with custom hooks? Check out https://usehooks.com/\n\t\tIf you're like me, you've written the same hooks over and over again.\n\t\tSo check usehooks.com first to see if someone has already done the work for you.\n\n\t75. Streamline app development by leveraging UI libraries like Shadcdn or Headless UI\n\t\tIt's hard to build UI at scale that is accessible, responsive, and beautiful.\n\t\tLibraries like Shadcdn or Headless UI make it easier.\n\n\t76. Check your website's accessibility with the axe-core-npm library\n\t\tWebsites should be accessible to everyone.\n\t\tHowever, it's easy to miss accessibility issues.\n\t\taxe-core-npm is a fast, secure, and reliable way to check your website's accessibility while developing it.\n\n\t77. Refactor React code effortlessly with react-codemod\n\t\tCodemods are transformations that run on your codebase programmatically üíª.\n\t\tThey make it easy to refactor your codebase.\n\t\tFor example, React codemods can help you remove all React imports from your codebase, update your code to use the latest React features, and more.\n\t\tSo, make sure to check those out before manually refactoring your code.\n\n\t78. Transform your app into a Progressive Web Application (PWA) using vite-pwa\n\t\tProgressive Web Applications (PWAs) load like regular web pages but offer functionality such as working offline, push notifications, and device hardware access.\n\t\tYou can easily create a PWA in React using vite-pwa.\n\n\nCategory #11: React & Visual Studio Code üõ†Ô∏è\n\t79. Enhance your productivity with the Simple React Snippets snippets extension\n\t\tBootstrapping a new React component can be tedious üò©.\n\t\tSnippets from the Simple React Snippets extension make it easier.\n\n\t80. Set editor.stickyScroll.enabled to true to quickly locate the current component\n\t\tI love this feature ‚ù§Ô∏è.\n\t\tIf you have a big file, it can be hard to locate the current component.\n\t\tBy setting editor.stickyScroll.enabled to true, the current component will always be at the top of the screen.\n\t\tGIF\n\n\t81. Simplify refactoring with extensions like VSCode Glean or VSCode React Refactor\n\t\tIf you need to refactor your code frequently (for example, extract JSX into a new component), make sure to check out extensions like VSCode Glean or VSCode React Refactor.\n\n\n\nCategory #12: React & TypeScript üöÄ\n\t82. Use ReactNode instead of JSX.Element | null | undefined | ... to keep your code more compact\n\t\tI see this mistake a lot.\n\t\tInstead of typing the leftElement and rightElement props like this:\n\t\tYou can use ReactNode to keep the code more compact.\n\n\t83. Simplify the typing of components expecting children props with PropsWithChildren\n\t\tYou don't have to type the children prop manually.\n\t\tIn fact, you can use PropsWithChildren to simplify the typings.\n\n\t84. Access element props efficiently with ComponentProps, ComponentPropsWithoutRef,‚Ä¶\n\t\tThere are cases where you need to figure out a component's props.\n\t\tFor example, let's say you want a button that will log to the console when clicked.\n\t\tYou can use ComponentProps to access the props of the button element then override the click prop.\n\t\tThis trick also works with custom components.\n\n\t85. Leverage types like MouseEventHandler, FocusEventHandler and others for concise typings\n\t\tRather than typing the event handlers manually, you can use types like MouseEventHandler to keep the code more concise and readable.\n\n\t86. Specify types explicitly in useState, useRef, etc., when the type can't be or shouldn't be inferred from the initial value\n\t\tDon't forget to specify the type when it can't be inferred from the initial value.\n\t\tFor example, in the example below, there is a selectedItemId stored in the state. It should be a string or undefined.\n\t\tsince the type is not specified, TypeScript will infer the type as undefined, which is not what we want.\n\n\t87. Leverage the Record type for cleaner and more extensible code\n\t\tI love this helper type.\n\t\tLet's say I have a type that represents log levels.\n\t\tWe have a corresponding function for each log level that logs the message.\n\t\tInstead of typing the logFunctions manually, you can use the Record type.\n\t\tUsing the Record type makes the code more concise and readable.\n\t\tAdditionally, it helps capture any error if a new log level is added or removed.\n\t\tFor example, if I decided to add a debug log level, TypeScript would throw an error.\n\n\t88. Use the as const trick to accurately type your hook return values\n\t\tLet's say we have a hook useIsHovered to detect whether a div element is hovered.\n\t\tThe hook returns a ref to use with the div element and a boolean indicating whether the div is hovered.\n\t\tCurrently, TypeScript will not correctly infer the function return type.\n\t\tYou can either fix this by explicitly typing the return type like this:\n\t\tOr you can use the as const trick to accurately type the return values:\n\n\t89. Redux: Ensure proper typing by referring to https://react-redux.js.org/using-react-redux/usage-with-typescript to correctly type your Redux state and helpers\n\t\tI love using Redux to manage heavy client-side state.\n\t\tIt also works well with TypeScript.\n\t\tYou can find a great guide on how to use Redux with TypeScript here.\n\n\t90. Simplify your types with ComponentType\n\t\tLet's say you're designing an app like Figma (I know, you're ambitious üòÖ).\n\t\tThe app is made of widgets, each accepting a size.\n\t\tTo reuse logic, we can define a shared WidgetWrapper component that takes a widget of type Widget defined as follows:\n\t\tThe WidgetWrapper component will render the widget and pass the relevant size to it.\n\n\t91. Make your code more reusable with TypeScript generics\n\t\tIf you're not using TypeScript generics, only two things could be happening:\n\t\tTypeScript generics make your code more reusable and flexible.\n\t\tFor example, let's say I have different items on a blog (e.g., Post, Follower, etc.), and I want a generic list component to display them.\n\t\tEach list should be sortable.\n\t\tThere is a bad and a good way to do this.\n\t\t‚ùå Bad: I create a single list component that accepts a union of items.\n\t\tThis is bad because:\n\t\tInstead, we can use TypeScript generics to create a more reusable and type-safe list component.\n\t\tI made an example in the sandbox below üëá.\n\n\t92. Ensure precise typing with the NoInfer utility type\n\t\tImagine you're developing a video game üéÆ.\n\t\tThe game has multiple locations (e.g., LeynTir, Forin, Karin, etc.).\n\t\tYou want to create a function that teleports the player to a new location.\n\t\tThe function will be called this way:\n\t\tThe second example is invalid because anythingCanGoHere is not a valid location.\n\t\tHowever, TypeScript will not throw an error since it inferred the type of L from the list and the default location.\n\t\tTo fix this, use the NoInfer utility type.\n\t\tNow TypeScript will throw an error:\n\t\tUsing the NoInfer utility type ensures that the default location must be one of the valid locations provided in the list, preventing invalid inputs.\n\n\t93. Effortlessly type refs with the ElementRef type helper\n\t\tThere is a hard and easy way to type refs.\n\t\tThe hard way is to remember the element's type name and use it directly ü§£.\n\t\tThe easy way is to use the ElementRef type helper. This method is more straightforward since you should already know the element's name.\n\n\n\n\nCategory #13: Miscellaneous Tips üéâ\n\t94. Boost your code's quality and safety with eslint-plugin-react and Prettier.\n\t\tYou can't be serious about React if you're not using eslint-plugin-reactüòÖ.\n\t\tIt helps you catch potential bugs and enforce best practices.\n\t\tSo, make sure to install and configure it for your project.\n\t\tYou can also use Prettier to format your code automatically and ensure your codebase is consistent.\n\n\t95. Log and monitor your app with tools like Sentry or Grafana Cloud Frontend Observability.\n\t\tYou can't improve what you don't measure üìè.\n\t\tIf you're looking for a monitoring tool for your production apps, check out Sentry or Grafana Cloud Frontend Observability.\n\n\t96. Start coding quickly with online IDEs like Code Sandbox or Stackblitz\n\t\tLocal development environments can be a pain to set up.\n\t\tEspecially as a beginner üê£.\n\t\tSo start with online IDEs like Code Sandbox or Stackblitz.\n\t\tThese tools allow you to start coding quickly without worrying about setting up your environment.\n\n\t97. Looking for advanced react skills? Check out these books üëá\n\t\tIf you're looking for advanced React books üìö, I would recommend:\n\n\t98. Prepping React interviews? Check reactjs-interview-questions\n\t\tReact interviews ‚öõÔ∏è can be tricky.\n\t\tLuckily, you can prep for them by checking this repo.\n\n\t99. Learn React best practices from experts like Nadia, Dan, Josh, Kent, etc.\n\t\tIf you want to stay up-to-date with the best practices and learn tips, make sure to follow experts like:\n\n\t100. Stay updated with the React ecosystem by subscribing to newsletters like This Week In React or ui.dev\n\t\tReact is a fast-moving ecosystem.\n\t\tThere are many tools, libraries, and best practices to keep up with.\n\t\tTo stay updated, make sure to subscribe to newsletters üíå like:\n\n\t101. Engage with the React community on platforms like r/reactjs\n\t\tThe React community is fantastic.\n\t\tYou can learn a lot from other developers and share your knowledge.\n\t\tSo engage with the community on platforms like r/reactjs.\n\t\tThat's a wrap üéâ.\n\t\tLeave a comment üì© to share your favorite tip (or add one).\n\t\tAnd don't forget to drop a \"üíñü¶Ñüî•\".\n\t\tIf you're learning React, download my 101 React Tips & Tricks book for FREE.\n\t\tIf you like articles like this, join my FREE newsletter, FrontendJoy.\n\t\tIf you want daily tips, find me on X/Twitter.\n\n\n"
}]