[{
    "title": "React testing-library で getByText, expect, debug, を使ってみる",
    "tags": ["#react", "#testing"],
    "link": "https://dev.to/kaede_io/react-testing-library-de-getbytext-expect-debug-woshi-tutemiru-4c97",
    "reactions": 2,
    "cmt": null,
    "content": "参考\n\thttps://qiita.com/ossan-engineer/items/4757d7457fafd44d2d2f#react-testing-library-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0\n\tossan-engineer さんの記事\n\nプロジェクト作成\n\tこれで作成できる\n\t===\n\nApp.tsx に文字列を書く\n\tシンプルに App Text を入れる\n\t===\n\nApp Text が入ってるエレメントが Document にあるかテストする\n\tsrc/App.test.tsx を\n\tdescribe を使ってブロックを作る\ntest のストーリーを書いて App コンポーネントを表示\nApp Text のテキストからエレメントを取得して変数に入れる\nそれがドキュメントにあるか期待する。\n\t===\n\nnpm test で動かす\n\tこれでテストが通った。\n\t===\n\n中身を変えて通らないテストを打つ\n\tこれで打ってみる\n\tしっかりエラーが出てくれる。\n\t===\n\ndebug を使ってみる\n\tエラーではない形で DOM を出してくれる。\n\t===\n\t次は他の取得方法でエレメントを取得してみる\n\t===\n\n"
}, {
    "title": "React Context and Hooks: Pass data and update it easily",
    "tags": ["#react", "#javascript", "#webdev", "#programming"],
    "link": "https://dev.to/napoleon039/react-context-and-hooks-pass-data-and-update-it-easily-3akb",
    "reactions": 9,
    "cmt": null,
    "content": "In the previous article, we looked at what Context is and how to pass values with it. In this article we will look at updating the Context value from the child component. For our theme example this means clicking the button will now switch the theme between light and dark.\nUpdating Context value\n\tIn the previous article, we directly passed the theme via the Provider component. Although the value is passed to ThemeButton.js and ThemeWindow.js components, we cannot update this value.\n\tTo switch between the two theme types, we need to pass a function as well. This function will allow us to switch between both themes.\n\tSo we need to pass this function along with the dark theme via the Provider component. To do this, we can create a stateful object which will contain both the theme and a function. This way React can keep track of the theme and perform the necessary re-renders when it updates.\n\tThis is pretty straightforward. A stateful object containing a theme type and a function is passed via the Provider component. While the ThemeWindow component only needs minor changes, we do need to implement the function in the ThemeButton component.\n\n\nImplementing theme switch function\n\tNothing special needs to be done to implement the function. Calling it when the button is pressed will switch the theme.\n\tAs easy as that. When this button is clicked, the switchTheme() function will be executed. This will update the stateful value and thus trigger a re-render. And finally, the updated theme will be rendered in the ThemeWindow component.\n\n\n\nWrapping up\n\tThis was the conclusion to the previous article about React Context. As you have seen, React Context is a powerful tool.\n\tHowever, this simple example does not really showcase its power. In complex applications with dozens of components, where values and state need to be passed to several different components, React Context will make this job far easier than regular props.\n\n"
}, {
    "title": "React Hooks: useRef()",
    "tags": ["#react", "#javascript", "#beginners", "#programming"],
    "link": "https://dev.to/fig781/react-hooks-useref-40m6",
    "reactions": 7,
    "cmt": null,
    "content": "What are React hooks?\nThey are functions in React that allow you to add react functionality to function based components.\nWhat is the useRef hook\nThis hook is used to track values between renders and access DOM elements. The main difference between a ref and state is that updating a ref will not cause a re-render. This is especially useful if you want to track the number of renders of a component or when you want to track the previous state of a component. The syntax follows a common pattern:\nExample using useRef to access a DOM node:\nExample using useRef to track previous state:\nMore information about useRef can be found in the React docs: https://reactjs.org/docs/hooks-reference.html#useref\nLeave comment if you have any questions or feedback.\n"
}, {
    "title": "React Basics | Part - 3",
    "tags": ["#react", "#javascript", "#beginners", "#webdev"],
    "link": "https://dev.to/elwinjyot/react-basics-part-3-3fa5",
    "reactions": 10,
    "cmt": 6,
    "content": "Hey developer, welcome to part 3 of the React Basics series. In the last part we learned to setup a React project and looked at different types of React components. In this part as promised, we will be learning about states of a component.\nState of a Component\nAs discussed in the earlier parts, React has the ability to render values of variables in an HTML template. This funtionality can be performed with the help of state of a component.\nLet's take an example of our Cart component.\n\nHere, the name john is hard coded into the template(in the render function). But let's say this name John should change when user interacts with the webapp. In order to do this we use the amazing power of Component State. We can define a variable which will hold this changing name and just simply call the variable in the template. Let us do that then.\nBefore that we need to understand the basic idea of how a constructor in classes work.\nA constructor, in simple words, is a set of instructions to run as soon as a class is called. These instructions can be creating essential variables, calling APIs to store essential data for the application/component and many more. In our case we will initialize a state for our component. Let us analyze the below snippet.\nYou can see a constructor keyword before the render method. This is how we define a constructor for a particular class in JavaScript. Inside the curly braces, we will define all the instructions to run at call. Here we can see a variable getting initialized this.state which is assigned to...well..two curly braces 😕. This is actually how we define  objects in JavaScript. \nAn object is a collection of key-value pairs, just like normal variables assigned to a value, in simple words it acts kind of like a collection of variables. So just like a variable, we can call a key in an object and get the assigned value. Now inside the this.state object, we will be creating all the variables that we need to use in the template. Let us understand it with a code snippet.\nHere we created a key named first_name and assigned a string value \"John\" to it. Calling this key is pretty simple. As we learned, an object is a collection of key-value pairs, which basically means we should be storing this collection somewhere. So in this case we stored it in the variable this.state. In order to call a key inside an object, we first have to refer to the variable holding the object followed by the name of the key you want to call. There are multiple ways to refer to a key in an object\nFor sometime we will be using method 1 and afterwards when the situation arises we will use method 2. Yes! These methods has to be used based on some situation. It's nothing complicated, we can do this!!!\nLet us call the the first_name key in our HTML template. We will have to use a weird syntax to do this. Let us analyze the below given snippet.\nIn the above code snippet, you can see how a variable is called inside the render function. You should use curly braces and write the name of the variable you want to call.\nFeeling a little suspicious 🧐?\nCheck out line number 5. You see a super() keyword. This is to setup all the functions and variables inherited from the React.Components object. Have you wondered why is there a this keyword before the state variable. The this keyword is used to access objects, variables and functions created in the class. Yes you directly cannot access the state variable. Now if you check the browser, uhmmm...nothing has changed, lets try changing the value of the first_name key to, let us say Sarah.\n\nYeheheee 😉, look how it changed to the new value Sarah. This is how React renders HTML dynamically. How about we take this a level up.\nFirst 1 - let us add a button which will change the value of first_name when clicked.\nStep 2 - create a function which will change the name.\nIn a React component, we can create different functions for different tasks and call them inside the HTML template or call it normally also. Lets create a function to do this.\nWhoa whoa whoa what just happened 😵\nYeah, just added a function.\nIf you are familiar with JavaScript, you might wonder where is the function keyword. Here is how react works, the \"thing\" you just saw is called an arrow function. If you want to read more about arrow function click here. If you have to access the variables of a class, you should be able to access the this object. But when you create a function inside a class, you lose context to the this object. Now if we bind or tie the this object whenever we create a function inside a class, we will be able to access it inside the function. This is more like a React thing. There are multiple ways of binding the this object. Below is a simple snippet showing that.\nIn method 1, we have used a normal syntax of creating a function. But in method 2, we have used the arrow function to create a function. While using method 1, you will have to manually bind the this object to the function in the constructor with the bind function. But this is not the case for method 2, it automatically binds it to the function. We will be using method 2 in this series. Let us get back to our app.\nThis is where we were!\nInside the change_name function I we have added some code. In react we cannot directly reassign values of state keys. We have to use the setState function to change the state. So you can just simply call the this.setState() function and pass in an object with the key as the key you want to change the value of followed by the value as the new value.\nStep 3 - Bind the change_name function to the button\nWe are going to use the onClick attribute of <button> element. The value of the attribute should be inside curly braces and keep in mind not to call the function with paranthesis, just end it with the name of the function only. If you add the paranthesis after the function name, it will be called immediately after the component is rendered.\nIt's time to check the browser\n\n\nThat's it for todayyyy!!\nDrop your queries as comments.\nThank you for your time ☺️\nPart 4 -->\n"
}, {
    "title": "React `updateState`",
    "tags": ["#react", "#state"],
    "link": "https://dev.to/agnel/react-updatestate-3j90",
    "reactions": 5,
    "cmt": null,
    "content": "I'm a newbie in React, and I'm working on a project for a Public Health Unit named 'Gully Clinic' using Material UI and Redux Toolkit.\nI believe if you have worked on a React project then it wouldn't be soon enough to come across component state management. I think this one of those basics you learn when you begin learning React.\nThe syntax goes like this for a functional component -\nIn case you are wondering what are those empty <></> brackets, they are the shorthand form for <React.Fragment></React.Fragment>. You can find more on this in the official docs.\nThis was a component which made use of a single state value.\nIn a real-world scenario, this is not the only case and there are multiple state values to be stored and handled.\nFor example, if you have a data grid whose pageSize needs to be managed via state along with values for various filters, all of which could be managed via a single state, say like this -\nTo update a state, for example when pageSize is changed via some user interaction, for a such a scenario the best practice is to set the state as shown below -\nHere we are using the function argument variant of the setState method\nAnother scenario is wherein you need to update multiple state values together, say for example you provide the user to reset all the filters at once with a button interaction which you'd handle using an event listener like resetFilters -\nIf you notice, if there are many such interactions in your app which changes the state, then eventually you'll have many functions or event listeners with this piece of code setState((prevState) => { ... }) in them. For me, this became a problem because it began to reduce the readability of the code and the unnecessary increase in the component code size.\nThe updateState function along with setState\n\tSo, I wrote the updateState function in the component itself which would accept partial state key value pairs and update the state. Take a look -\n\tAdding updateState to the components was repetitive because every stateful component needed updateState. So, I extracted out it to a separate individual utility function named useObjectState which return the updateState along with the usual state object and setState function.\n\tIf you liked this post, may be found it useful in someway or have something to say just let me know in the comments. :)\n\tYou may say updateState is not required as this is handled already by setState as stated in the official docs. If you've really worked with both the Class based components and functional components then you would notice that setState doesn't work with partial objects in functional components. The type definition of SetStateAction in the @types/react/index.d.ts confirms this. You'll find in this file the following around line 885.\n\n"
}, {
    "title": "React js Crash Course",
    "tags": ["#react", "#webdev", "#webcomponents", "#javascript"],
    "link": "https://dev.to/w3tsa/react-js-crash-course-4b04",
    "reactions": 4,
    "cmt": null,
    "content": "\n"
}, {
    "title": "React.useEffect hook explained with practical examples",
    "tags": ["#react", "#webdev", "#beginners"],
    "link": "https://dev.to/crunchstack/reactuseeffect-hook-explained-with-practical-examples-4me7",
    "reactions": 5,
    "cmt": null,
    "content": "useEffect hook are very useful to manage side effects and to control lifecycle methods. However, many subtleties in its implementation can cause unexpected behavior, causing all kinds of bugs. 🐛\nLifecycle definition 📖📖📖\n\tThe life cycle is defined as the behavior of a component while it exists.\n\nUsage and definition ⚙️⚙️⚙️\n\tTo use useEffect, we need to import it into our file from React.\n\tThen we can use it in a function component or in a custom hook. Let's use it in the first way. useEffect takes as parameters a callback and an array of dependencies.\n\tcomponentDidMount()/componentWillUnmount()\n\t\tuseEffect with an empty dependency array and a callback that returns a cleanup function is like using componentDidMount() and componentWillUnmount() in this way.\n\t\tCleanup function can be anonymous function as well.\n\n\tcomponentDidMount()/componentDidUpdate() with dependency check\n\t\tuseEffect with an array of dependencies is the same as using componentDidMount() and componentDidUpdate() together with a props and state comparison.\n\n\tcomponentDidMount()/componentDidUpdate without dependency check\n\t\tuseEffect without an array of dependencies is like using componentDidMount() and componentDidUpdate() together without props and state comparison\n\n\tcomponentDidUpdate() only\n\t\tuseEffect is not designed to handle componentDidUpdate() only.\n\t\tYou must check that the component has already been rendered with a reference. A custom hook is made for that, here it is\n\n\nUsage 1 : useEffect to subscribe/unsubscribe to API 👨‍💻\n\tMost of the time you have to subscribe to services to benefit from features.\n\tHere we use the browser's setInterval API to manage a timer that updates every second.\n\tThe callback passed as parameter to useEffect is executed when the component is mounted, setInterval is launched at this time.\n\tWhen the component is unmounted, we clean up our interval so that it does not run anymore.\n\nUsage 2 : useEffect to manage side effects when modifying local state. 👨‍💻👨‍💻👨‍💻\n\tSide effects are common in React applications.\n\tHere, we useEffect to verify that the number entered by the user is a number.\n\tWe perform this operation at the mounting and updating phases\n\n6.0 Pros and cons\n\tuseEffect is not a perfect tool and is not intended to completely replace life cycle management with Class Component\n\t6.0.1 useEffect pros\n\t6.0.2 useEffect cons\n\t6.0.3 Lifecycle Class Component pros\n\t6.0.4 Lifecycle Class Component cons\n\t\tThank you for reading.\n\t\tI hope you have learned a lot from this article and that like me, your mastery of front-end development has improved.\n\t\tDo not hesitate to correct errors or ask me questions in the comments, I will respond to them as soon as possible\n\t\tIf you like my content and want to support me, don't hesitate :\n\n\n"
}, {
    "title": "REACT APIS WITH EXAMPLE PART1:React.memo()",
    "tags": ["#react", "#javascript", "#functional", "#performance"],
    "link": "https://dev.to/kevinkh89/lesser-known-react-apis-with-examplepart1reactmemo-2ckj",
    "reactions": 3,
    "cmt": null,
    "content": "introduction\n\tA fast and reliable user interface (UI) is an important factor in modern web development. To improve performance React offers several APIs.\n\tReact.memo() is a high-order component that wraps around our functional component and returns a memoized version. whenever users interact with the UI React re-renders the component and compares the previous component to the next one.\nif it is not the same then React would update the DOM with the new one (re-rendered component).\n\tlet's explore this API through an example. let's say we want to present a input wuth a heading or labels\nwhenever we change the input whole section get re-rendered(the heading or any other component) but in fact it's a unnecessary re-render\n\tthis is where React.memo() comes to the rescue!.it wraps around the Heading component and gives us a memoize result back.in simple terms, it gives us a rendered component and it will use the result on the next DOM update unless the component props have changed.\ntype something in the input. heading wrapped around memo is not re-rendering\n\nareEqual\n\tReact.memo() accepts a second argument:\n\tit passes prevProps and newProps to the function giving the ability to the developer to decide when to re-render the component.\n\tRemember React.memo() does a shallow comparison, it means if there are complex arrays or objects as props it always returns false, therefore, need to add a custom function(areEqual) to compare complex objects and arrays\n\twhenever dealing with middle or big size components that consist of a couple of small size components and they keep re-rendering the same result over and over\n\tif the component updates occasionally and it wouldn't make much difference using a memoized version.\n\nconclusion\n\talthough React does a lot of optimization internally but React.memo() gives the ability to the developer to define more suitable optimization. remember using React.memo() is not the solution to every performance issue. implementing a good design pattern and data structure is the key factor in optimization.\n\tfollow me on twitter😎\n\n"
}, {
    "title": "React's bogus setState anti-pattern",
    "tags": ["#react", "#hooks", "#antipattern"],
    "link": "https://dev.to/josepot/react-s-bogus-setstate-anti-pattern-287e",
    "reactions": 12,
    "cmt": 5,
    "content": "TL; DR\n\tThis is bad:\n\tThis is good:\n\nRule of thumb\n\tWhen transforming the state, use the function overload. Otherwise, you may not be working with the latest state.\n\tWhen replacing the state, use the value overload.\n\nWhat's wrong with the first implementation?\n\tBasically, things won't work correctly if either increment or decrement get invoked more than once during the same event handler.\n\tTo illustrate this issue, let's check how composable useCounter is:\n\tuseNCouter is a hook that enhances useCounter by accepting a parameter that represents the number of times that the counter should increase/decrease.\n\tIn this codesanbox -which uses the first implementation of useCounter- we can see how useNCounter doesn't work correctly. On the other hand, in this other codesandbox -which uses the second implementation- useNCounter works just fine.\n\nWhy are those 2 implementations not equivalent?\n\tReact batches the updates that happen inside its event handlers in order to avoid pointless evaluations of the render function.\n\tWith the initial implementation, the increment/decrement functions always set the same value. It's not until that value gets updated that a new callback function is created. And that doesn't happen until the next update. That's why setState should be treated as an asynchronous function.\n\nIs this problem specific to hooks?\n\tNope. The traditional this.setState is also asynchronous. So, just remember this simple rule: if your next state depends on the previous one, use the function overload.\n\nIs there an ESLint rule for this?\n\tNot that I know of.\n\nIs this actually an issue?\n\tIn my experience, this anti-pattern is responsible for lots of unexpected bugs. The code I have used comes from the main example of the react-hooks-testing-library, and I have seen it in many other places, like in Rangle's blog-post, or in Dan Abramov's post.\n\nNo way! Dan Abramov wouldn't make a mistake like that! You have to be wrong!\n\tOk, you are right. Dan Abramov knows what he is doing. That code works just fine.\n\tHowever, just to try to prove my point, a slightly better implementation could have been:\n\tThe point that I'm trying to make here is that if your next state depends on the previous one, it's always a good idea to use the function overload.\n\tFinally, I don't want to unfairly criticize Dan's code from the post. I think the main reason why he didn't use the function overload is because he didn't want to confuse the reader with too many concepts at once. That is a great post, you should read it if you haven't yet.\n\n"
}, {
    "title": "React component as prop: the right way™️",
    "tags": ["#react", "#webdev", "#javascript", "#tutorial"],
    "link": "https://dev.to/adevnadia/react-component-as-prop-the-right-way-ane",
    "reactions": 45,
    "cmt": 6,
    "content": "\nOriginally published at https://www.developerway.com. The website has more articles like this 😉\nAs always in React, there is one million way to do exactly the same thing. If, for example, I need to pass a component as a prop to another component, how should I do this? If I search the popular open-source libraries for an answer, I will find that:\nNot confusing at all 😅.\nSo which way is the best way and which one should be avoided? Which one should be included in some “React best practices” list and why? Let’s figure it out together!\nOr, if you like spoilers, just scroll to the summary part of the article. There is a definitive answer to those questions 😉\nWhy would we want to pass components as props?\n\tBefore jumping into coding, let’s first understand why we would want to pass components as props to begin with. Short answer: for flexibility and to simplify sharing data between those components.\n\tImagine, for example, we’re implementing a button with an icon. We could, of course, implement it like this:\n\tBut what if we need to give people the ability to change that icon? We could introduce iconName prop for that:\n\tWhat about the ability for people to change the appearance of that icon? Change its size and color for example? We’d have to introduce some props for that as well:\n\tWhat about giving people the ability to change the icon when something in the button changes? If a button is hovered, for example, and I want to change icon’s color to something different. I’m not even going to implement it here, it’d be way too complicated: we’d have to expose onHover callback, introduce state management in every single parent component, set state when the button is hovered, etc, etc.\n\tIt’s not only a very limited and complicated API. We also forced our Button component to know about every icon it can render, which means the bundled js of this Button will not only include its own code, but also every single icon on the list. That is going to be one heavy button 🙂\n\tThis is where passing components in props come in handy. Instead of passing to the Button the detailed limited description of the Icon in form of its name and its props, our Button can just say: \"gimme an Icon, I don't care which one, your choice, and I'll render it in the right place\".\n\tLet’s see how it can be done with the three patterns we identified at the beginning:\n\nBuilding a button with an icon\n\tOr, to be precise, let’s build three buttons, with 3 different APIs for passing the icon, and then compare them. Hopefully, it will be obvious which one is better in the end. For the icon we’re going to use one of the icons from material ui components library. Lets start with the basics and just build the API first.\n\tFirst: icon as React Element\n\t\tWe just need to pass an element to the icon prop of the button and then render that icon near the children like any other element.\n\t\tAnd then can use it like this:\n\n\tSecond: icon as a Component\n\t\tWe need to create a prop that starts with a capital letter to signal it’s a component, and then render that component from props like any other component.\n\t\tAnd then can use it like this:\n\n\tThird: icon as a function\n\t\tWe need to create a prop that starts with render to indicate it’s a render function, i.e. a function that returns an element, call the function inside the button and add the result to component’s render function as any other element.\n\t\tAnd then use it like this:\n\t\tThat was easy! Now our buttons can render any icon in that special icon slot without even knowing what’s there. See the working example in the codesandbox.\n\t\tTime to put those APIs to a test.\n\n\nModifying the size and color of the icon\n\tLet’s first see whether we can adjust our icon according to our needs without disturbing the button. After all, that was the major promise of those patterns, isn’t it?\n\tFirst: icon as React Element\n\t\tCouldn’t have been easier: all we need is just pass some props to the icon. We are using material UI icons, they give us fontSize and color for that.\n\n\tSecond: icon as a Component\n\t\tAlso simple: we need to extract our icon into a component, and pass the props there in the return element.\n\t\tImportant: the AccessAlarmIcon component should always be defined outside of the Page component, otherwise it will re-create this component on every Page re-render, and that is really bad for performance and prone to bugs. If you’re not familiar with how quickly it can turn ugly, this is the article for you: How to write performant React code: rules, patterns, do's and don'ts\n\n\tThird: icon as a Function\n\t\tAlmost the same as the first one: just pass the props to the element.\n\t\tEasily done for all three of them, we have infinite flexibility to modify the Icon and didn’t need to touch the button for a single thing. Compare it with iconName and iconProps from the very first example 🙂\n\n\nDefault values for the icon size in the button\n\tYou might have noticed, that I used the same icon size for all three examples. And when implementing a generic button component, more likely than not, you’ll have some prop that control button’s size as well. Infinity flexibility is good, but for something as design systems, you’d want some pre-defined types of buttons. And for different buttons sizes, you’d want the button to control the size of the icon, not leave it to the consumer, so you won’t end up with tiny icons in huge buttons or vice versa by accident.\n\tNow it’s getting interesting: is it possible for the button to control one aspect of an icon while leaving the flexibility intact?\n\tFirst: icon as React Element\n\t\tFor this one, it gets a little bit ugly. We receive our icon as a pre-defined element already, so the only thing we can do is to clone that element by using React.cloneElement api and override some of its props:\n\t\tAnd at the consumer side we can just remove the fontSize property.\n\t\tBut what about default value, not overriding? What if I want consumers to be able to change the size of the icon if they need to?\n\t\tStill possible, although even uglier, just nee to extract the passed props from the element and put them as default value:\n\t\tFrom the consumer side everything stays as it was before\n\n\tSecond: icon as a Component\n\t\tEven more interesting here. First, we need to give the icon the default value on button side:\n\t\tAnd this is going to work perfectly when we pass the directly imported icon:\n\t\tIcon prop is nothing more than just a reference to material UI icon component here, and that one knows how to deal with those props. But we extracted this icon to a component when we had to pass to it some color, remember?\n\t\tNow the props' Icon is a reference to that wrapper component, and it just assumes that it doesn’t have any props. So our fontSize value from <Icon fontSize=\"small\" /> from the button will be just swallowed. This whole pattern, if you’ve never worked with it before, can be confusing, since it creates this a bit weird mental circle that you need to navigate in order to understand what goes where.\n\t\tIn order to fix the icon, we just need to pass through the props that AccessAlarmIcon receives to the actual icon. Usually, it’s done via spread:\n\t\tOr can be just hand-picked as well:\n\t\tWhile this pattern seems complicated, it actually gives us perfect flexibility: the button can easily set its own props, and the consumer can choose whether they want to follow the direction buttons gives and how much of it they want, or whether they want to do their own thing. If, for example, I want to override button’s value and set my own icon size, all I need to do is to ignore the prop that comes from the button:\n\n\tThird: icon as a Function\n\t\tThis is going to be pretty much the same as with icon as a Component, only with the function. First, adjust the button to pass settings to the renderIcon function:\n\t\tAnd then on the consumer side, similar to props in Component step, pass that setting to the rendered component:\n\t\tAnd again, if we want to override the size, all we need to do is to ignore the setting and pass our own value:\n\t\tSee the codesandbox with all three examples.\n\n\n\n\nChanging the icon when the button is hovered\n\tAnd now the final test that should decide everything: I want to give the ability for the users to modify the icon when the button is hovered.\n\tFirst, let’s teach the button to notice the hover. Just some state and callbacks to set that state should do it:\n\tAnd then the icons.\n\tFirst: icon as React Element\n\t\tThat one is the most interesting of the bunch. First, we need to pass that isHover prop to the icon from the button:\n\t\tAnd now, interestingly enough, we created exactly the same mental circle that we had when we implemented “icon as Component”. We passed isHover property to the icon component, now we need to go to the consumer, wrap that original icon component into another component, that component will have isHover prop from the button, and it should return the icon we want to render in the button. 🤯 If you managed to understand that explanation from just words I’ll send you some chocolate 😅 Here’s some code to make it easier.\n\t\tInstead of the original simple direct render of the icon:\n\t\twe should create a wrapper component that has isHovered in its props and renders that icons as a result:\n\t\tAnd then render that new component in the button itself:\n\t\tLooks a little bit weird, but it works perfectly 🤷🏽‍♀️\n\n\tSecond: icon as a Component\n\t\tFirst, pass the isHover to the icon in the button:\n\t\tAnd then back to the consumer. And now the funniest thing ever. In the previous step we created exactly the same mental circle that we need to remember when we’re dealing with components passed as Components. And it’s not just the mental picture of data flow, I can literally re-use exactly the same component from the previous step here! They are just components with some props after all:\n\t\t💥 works perfectly.\n\n\tThird: icon as a Function\n\t\tSame story: just pass the isHovered value to the function as the arguments:\n\t\tAnd then use it on the consumer side:\n\t\t🎉 again, works perfectly.\n\t\tTake a look at the sandbox with the working solution.\n\n\nSummary and the answer: which way is The Right Way™️?\n\tIf you read the full article, you’re probably saying right now: Nadia, aren’t they are basically the same thing? What’s the difference? You promised a clear answer, but I don’t see it 🙁 And you’re right.\n\tAnd if you just scrolled here right away because you love spoilers: I’m sorry, I lied a bit for the sake of the story 😳. There is no right answer here.\n\tAll of them are more or less the same and you probably can implement 99% of the needed use cases (if not 100%) with just one pattern everywhere. The only difference here is semantics, which area has the most complexity, and personal preferences and religious beliefs.\n\tIf I had to extract some general rules of which pattern should be used where, I’d probably go with something like this:\n\tHope this article made those patterns easier to understand and now you can use all of them when the use case needs it. Or you can now just totally ban any of them in your repo, just for fun or consistency sake, since now you can implement whatever you want with just one pattern 😊\n\tSee ya next time! ✌🏼\n\t...\n\tOriginally published at https://www.developerway.com. The website has more articles like this 😉\n\tSubscribe to the newsletter, connect on LinkedIn or follow on Twitter to get notified as soon as the next article comes out.\n\n"
}, {
    "title": "React: Senior devs write small components! 🚀",
    "tags": ["#react", "#javascript"],
    "link": "https://dev.to/mikewudev/react-senior-devs-write-small-components-5351",
    "reactions": 8,
    "cmt": null,
    "content": "Rather than have a few components that do many things, we should prefer to create many smaller components that we can put together (compose) to achieve the desired effect.\nA large component\n\tPageHeader.tsx\n\tContains lots of behavior:\n\tWe could say this component is very specific. It only renders a single layout, and pre-defined children. Any variations would either require:\n\tUsing PageHeader.tsx\n\nUsing smaller components\n\tLet's start with how we'd like to use it.\n\tPageHeader/index.tsx\n\tPageHeader/Title.tsx\n\tDesktopOnly/MobileOnly\n\tStyle utility component that wraps whatever component you pass in, so that it only shows at the given width.\n\tPageHeader/Button.tsx\n\tSimilar to title, but we'll also extend the base <Button>, and set some default props.\n\n"
}, {
    "title": "React Query as a persistent state manager",
    "tags": ["#react", "#beginners"],
    "link": "https://dev.to/dailydevtips1/react-query-as-a-persistent-state-manager-579f",
    "reactions": 7,
    "cmt": null,
    "content": "I had to leverage a kind of context-based state a while ago; however, the element needing context was so small that it seemed overkill to make a full context for this.\nAnd that's when I started building this context of a small reusable hook that does just that.\nTo demonstrate the difference and difficulties with managing a persistent shareable state, I will also demo another option and work our way up to modify it by leveraging React Query.\nBelow you can see a short video demo to showcase the downsides of the persistent state hook compared to the React Query hook.\n\nA persistent state hook in React\n\tLet's start by creating a persistent state hook in React.\nThis will be a hook that we can use to read and write from a specified storage module.\nI'll use local storage in this example, but you can change this to any storage.\n\tThe hook should be able to retrieve the data set in the storage module and return that.\nIn return, it should be able to persist a new value in the storage, and the module should return this.\n\tLet's create a file called usePersistentState.\nThe hook will look like this:\n\tWe leverage a react useState hook to keep track of the value.\nAnd we use the useEffect hook to run once it mounts by using the [] property.\n\tTo use this hook we can do something like this:\n\tAnd this will work perfectly.\n\tUntil... We need to introduce another component that also needs to read this value separately.\nSince we used useState it does not update across our application, and it will cause really weird side-effects.\n\nReact Query as a state manager\n\tYou might have remembered that React Query does not have to work with API calls. It can keep track of any variable.\n\tAnd in our case, we want it to keep track of our storage object.\nSo let's also create a usePeristentContext hook.\n\tThis will be our hook that uses React Query to keep track of our state.\n\tYou can see that we define the query to read from the localStorage. This will be able to set our initial value if it exists.\n\tThen we use a React Query mutation as our set value. This can update our storage and, in the meantime, mutate the query data so it will reflect application-wide!\n\tWe can use this hook in the following fashion:\n\tThe benefit of this method is that another component can read it simultaneously, and the updated value will be read!\n\tViva la React Query!\n\tYou can try both methods on this Code Sandbox.\n\tThank you for reading, and let's connect!\n\t\tThank you for reading my blog. Feel free to subscribe to my email newsletter and connect on Facebook or Twitter\n\n\n\n"
}, {
    "title": "React performance",
    "tags": ["#react", "#javascript", "#performance"],
    "link": "https://dev.to/dpak1999/react-performance-5c8n",
    "reactions": 4,
    "cmt": null,
    "content": "Sometimes because of poor interface design or slow operations, there is a perceptible pause in the smooth rendering of a software application's user interface. To deliver a buttery-smooth UI performance the react performance should be optimized. React is an extensible, and declarative open-source JavaScript library used for building easy, fast, and scalable front-ends. This makes the processes easier for developing web applications. React can be part of an app that feels slow because of app start, animation, and scroll performance. A performance problem is mainly related to unnecessary rendering.\nCommon sources of performance problems:\nTo solve performance issues and to enhance the overall app's performance, functions, applications, here are some simple steps to be followed for React Performance Optimization:\nTo reduce Re-rendering – Use React Pure Component\n\tPure components are built into React Top-Level API and is similar to react components. The only difference is that if render() function renders the same result given the same props and state, we can use React.PureComponent for a performance boost in some cases.\n\nFor component memoization – Use React memo\n\tReact memo is a higher order component. If the component renders the same result given the same props, we can wrap it in a call to React.memo for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.\n\nFor External Resources – Use CDNs.\n\tCDN stands for content delivery network which is a great way to deliver static content from your website to your audience more quickly and efficiently.\n\tWe can cache our content on a CDN so that it’s delivered from the edge to your end-users much faster than if it had to be delivered all the way from the origin. If you use a CDN, it means that if someone tries to access content from your website, then that person’s request for content only needs to travel to a nearby POP and back, not all the way to the company’s origin servers and back.\n\nFor Iteration – Use a Unique Key.\n\tKeys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity.\n\nTo avoid Further Tag – Use React Fragments.\n\tReact.fragment lets you group a list of children without adding an extra tag or node.\n\nFor Animation – Use CSS Animation.\n\tAnimations are inevitable for a fluid and pleasurable user experience. There are many ways to implement web animations.\n\nDon’t use Inline Function Definition.\n\tSince functions are objects in JavaScript ({} !== {}), the inline function will always fail the prop diff when React does a diff check. Also, an arrow function will create a new instance of the function on each render if it's used in a JSX property.\n\tInstead of defining the inline function for props, you can define the arrow function.\n\nModify gzip compression on the webserver.\n\tGzip compression allows the web server to provide a smaller file size, which means your website loads faster. The reason gzip works so well is because JavaScript, CSS, and HTML files use a lot of repeated text with lots of whitespace. Since gzip compresses common strings, this can reduce the size of pages and style sheets by up to 70%, shortening your website’s first render time.\n\nThrottling and Debouncing Events.\n\tIt means delaying function execution. So instead of executing the event handler/function immediately, you’ll be adding a few milliseconds of delay when an event is triggered. This can be used when implementing infinite scrolling, for example. Rather than fetching the next result set as the user is scrolling, you can delay the XHR call.\n\tAnother good example of this is Ajax-based instant search. You might not want to hit the server for every key press, so it’s better to throttle until the input field is dormant for a few milliseconds.\n\tThrottling can be implemented a number of ways. You can throttle by the number of events triggered or by the delay event handler being executed.\n\tUnlike throttling, debouncing is a technique to prevent the event trigger from being fired too often. If you are using lodash, you can wrap the function you want to call in lodash’s debounce function\n\nNeed to Avoid Async Requests in componentWillMount().\n\tcomponentWillMount() is only called once and before the initial render. Since this method is called before render(), our component will not have access to the refs and DOM element.\n\tThe follwoing is a bad approach:-\n\tThis is an optimized version of above:-\n\nImmutable Data Structures for Components.\n\tData immutability, which comes from the functional programming world, can be applied to the design of front-end apps. It can have many benefits, such as:\n\nSome other techniques that one can use are:-\n\tReact is used by various massive corporations like Amazon, Microsoft, Facebook, etc for a lot of their Public-Facing Apps. Thus for a smooth functioning and enhanced performance of apps, these optimization steps of React Performance are extremely needed.\n\n"
}, {
    "title": "React Query leveraging placeholder data",
    "tags": ["#react", "#beginners"],
    "link": "https://dev.to/dailydevtips1/react-query-leveraging-placeholder-data-144p",
    "reactions": 9,
    "cmt": null,
    "content": "Now that we are pretty familiar with the concepts of React Query let's take a look at how we can leverage placeholder data.\nWe can update the user with as much information as before, showing the loaded data with placeholder data.\nLet's take the following example.\nIn the video below, I've added a delay on the request so you can see the initial data already loading something before showing the actual data.\n\nReact Query placeholder data\n\tIf you like to follow along, I'm using the result of this article on React Query as our starting point.\n\tThe placeholder data will be returned as your data object, so it's important to keep this in mind and ensure they have overlapping properties.\n\tFirst let's modify the usePokemon function to use placeholder data.\n\tThis is how it will work, but as we said, we already queried the actual data once, so we might as well use that here.\n\tBesides having the ability to return something directly, we can use a function to extract the correct item from our existing primary query data.\n\tWe tell React Query to look in our existing cached data and return the Pokemon that matches this name with this function.\n\tWhat do we have to change in our rendering?\n\tWe just have to make sure we are using conditional access to the property we might not have loaded yet.\n\tOr you could opt to show a placeholder for those specific elements that are still being retrieved.\n\nplaceholderData vs initialData\n\tIn React Query, we not only get placeholder data, which we described above.\nThere is also a thing called initialData.\nOn paper, these two are very similar. They can return data before the query is actually done.\n\tHowever, there are some main differences.\n\tPlaceholder data works on the observer level, which means the data is never persisted into the cache.\ninitial data, however, persists in the cache, and it acts as a temporary set of data until it gets updated with the real thing.\n\tThe error handling between the two also has some differences.\nWith initial data, the query will be in an error state, but it will be available since the data was already set.\n\tWe are also in error state with the placeholder option, but the data is gone since it was only available in the observer.\n\tThere is also a big difference if you optimize your loads with stale time, and TKDodo has a fantastic article on that.\n\nTry it out\n\tIf you'd like to play around with this, I've set up a Code Sandbox you can use.\n\tSome things to try:\n\tThank you for reading, and let's connect!\n\t\tThank you for reading my blog. Feel free to subscribe to my email newsletter and connect on Facebook or Twitter\n\n\n\n"
}, {
    "title": "React Hooks: useMemo()",
    "tags": ["#react", "#javascript", "#beginners", "#programming"],
    "link": "https://dev.to/fig781/react-hooks-usememo-2d51",
    "reactions": 7,
    "cmt": null,
    "content": "What are React hooks?\nThey are functions in React that allow you to add react functionality to function based components.\nWhat is the useMemo hook?\nThis hook will only run if its dependencies change. This is especially useful in preventing expensive operations from needlessly running.\nThe syntax follows a common pattern:\nA few things to note:\nHere is a practicle example using the useMemo hook:\nMore information about useMemo can be found in the React docs: https://reactjs.org/docs/hooks-reference.html#usememo\nLeave comment if you have any questions or feedback.\n"
}, {
    "title": "React hooks for your Interview",
    "tags": ["#react", "#reacthooks", "#webdev", "#beginners"],
    "link": "https://dev.to/pritamdeb/-react-hooks-for-your-interview-2gej",
    "reactions": 6,
    "cmt": null,
    "content": "Now if you are a fresh react developer like I am, I’m pretty sure you’ve come across questions about React hooks in your technical rounds. This blog can be served as a resource for revision of all 9 built-in React hooks.\nWith the intro out of the way let’s dive right in!\nSince, all this information can be a bit overwhelming in a single read. Soon there will be another blog covering useContext, useMemo and useCallback hooks.\n"
}, {
    "title": "React Router: Updating from v5",
    "tags": ["#react"],
    "link": "https://dev.to/lada496/react-router-updating-from-v5-kjj",
    "reactions": 5,
    "cmt": null,
    "content": "This is a memo when I updated React Router in my app from v5 to v6. \nDemo app is here.\nSwitch -> Routes\n\tUse Routes instead of Switch and exact keyword is not necessary in v6. Also, element is a new attribute to assign components inside of a Route page.\n\tv5\n\tv6\n\t\tA minor finding is that it is impossible to put Layout component inside of Routes. As a result, it is necessary to wrap each page component in Layout, respectively. In addition, “*” is important to let Router know the path has at least one child path.\n\t\t**refactoring\nI added WithLayout component and wrapped page components in it to avoid the repeating pattern in Routes.\n\t\tWithLayout\n\t\tHome\n\t\tMyBooks\n\t\tNotFound\n\t\tApp\n\n\nFull path -> relative path\n\tUse relative path when you add children paths whereas we had to use full path in v5.\n\tv5\n\tv6\n\nuseRouteMatch -> useLocation\n\tAccording to the official document, useMatch is the alternative to useRouteMatch. However, useLocation can be an alternative depending on the way of using useRouteMatch. In my case, I used useRouteMatch to know the previous path and this is a case when useLocation becomes the alternative solution.\n\tv5\n\tv6\n\nuseHistory -> useNavigate\n\tuseHistory is no longer available and use useNavigate instead when you want to navigate from the previous page to another page.\n\tv5\n\tv6\n\t\tPut an object to specify when you want to replace.\n\n\nactiveClassName -> isActive\n\tactiveClassName was deleted and we have to recognize if a certain nav is active or not by using isActive instead.\n\tv5\n\tv6\n\nRedirect -> Navigate\n\tAlthough I did not use Redirect, I think the deletion of Redirect is another big change from v5. Alternative Component is Navigate but attributes are bit changed. In Redirect, replace was the default and we used push if necessary. On the other hand, in Navigate, push is the default and we need to use replace.\n\tv5\n\tv6\n\t\tYou can find more detailed information from the official document.\n\t\tMy impression of this update is that it becomes easier to deal with nested paths in v6. Also, it gets more important to separate page components and other components because of using element, which I believe makes my coding cleaner. However, the deletion of activeClassName is a bit inconvenient for me.\n\t\tThank you for reading :)\n\t\tThe original article is here\n\n\n"
}, {
    "title": "React Query and optimistic updates",
    "tags": ["#react", "#beginners"],
    "link": "https://dev.to/dailydevtips1/react-query-and-optimistic-updates-8ee",
    "reactions": 6,
    "cmt": null,
    "content": "In the previous article, we looked at React Query Mutations, which are great for updating the data once we receive a mutation callback.\nHowever, how great would it be if we could do an optimistic update to make our application even faster?\nLet's see what that even means?\nWe'll have the original list of Pokemon we saw yesterday, and once we decide to add a new Pokemon to this list, we fire an API request.\nAt the same time, we ask React Query to add this Pokemon already and not care if the mutation was correct or not.\nThe only thing we would care about is if it failed for some reason. In that case, we should revert to its previous state.\nReact Query optimistic updates\n\tAlright let's start with the mutation we had in the previous article:\n\tInstead of this onSuccess callback, we can leverage the onMutate option.\n\tThis option gets fired right away and doesn't care about the state of the actual mutation.\n\tLet's see what's going on here.\nWe first cancel the existing query so React Query won't start updating it in between us trying to set it manually.\n\tThen we get the current data object for this query.\nAnd manipulate it, as we did before.\n\tThen we return the previous data. This return context can be accessed in the onError function.\n\tSpeaking off the error function, this function gets triggered if the mutation fails.\nIt will get the context from the onMutate return object.\n\tWhat we want to do is reset the previous state.\n\tLet's complete the function by introducing a failing request.\nWhat should happen when we run this function:\n\tI've also created this Code Sandbox environment so you can try it out directly.\n\tThank you for reading, and let's connect!\n\t\tThank you for reading my blog. Feel free to subscribe to my email newsletter and connect on Facebook or Twitter\n\n\n\n"
}, {
    "title": "React State Management in 2022",
    "tags": ["#react", "#state", "#hooks", "#redux"],
    "link": "https://dev.to/nanxiaobei/react-state-management-in-2022-3hpg",
    "reactions": 13,
    "cmt": 2,
    "content": "1. What is \"state\"?\n\tIn the era of jQuery, JS code is mixed with DOM structure. When various processes are complex and intertwined, it forms spaghetti code. When using publish/subscribe model, debugging will be messy.\n\tjQuery is imperative programming for \"process\", and so many commands are ultimately to update the \"data\" in the UI. Why not change the data directly?\n\tBeijing → Shanghai, just change city=\"Beijing\" into city=\"Shanghai\". No matter whether the plane or train breaks down on foot, or whether you will meet Wang Baoqiang on the pipeline.\n\tThe significance of modern front-end framework is the innovation of problem-solving ideas, which changes various commands of \"process\" into the description of \"state\".\n\tWhat is state? State is the dynamic data in the UI.\n\n2. State in React\n\tReact was born in May 2013. But before 2015, it was probably the world of jQuery. React 0.13.0 was released in March 2015, bringing the writing method of class components.\n\tIn the era of React class components, the state is this.state, use this.setState to update.\n\tIn order to avoid a mess, React introduces the concepts of \"component\" and \"unidirectional data flow\". With state and components, there is naturally the transfer of state between components, which is generally called \"communication\".\n\tParent-child communication is relatively simple, while the communication of deep-level and long-distance components depends on \"lifting state up\" + pass props layer by layer.\nTherefore, React introduced Context, an official solution to solve the \"cross level\" communication of components.\n\tHowever, Context is actually equivalent to \"lifting state up\". There is no additional performance optimization, and it is wordy.\n\tIn order to optimize performance, multiple contexts are usually added, which is more verbose. When the project is not so complex, it is better to pass props layer by layer.\n\n3. What is \"state management\"?\n\tIn terms of pragmatism, \"state management\" is to solve the \"cross level\" communication between components.\n\tOf course, when using state management library, it will bring some derived thinking patterns, such as how to organize state, how to split public logic, business logic, component logic, etc. but in the final analysis, these are not the core reasons.\n\tThe core is to solve practical problems — communication. Other concepts and philosophies are not necessary.\n\tContext is not so easy to use, and React officials have no best practices, so community libraries were born.\n\n4. State management in class era\n\tThe era of React class components is the story of Redux (and its related derivative libraries) and MobX.\n\tRedux is an implementation in line with the concept of React. MobX’s \"monitoring\" mode is characterized by \"not enough React\", but it is simple to use.\n\tThe pros and cons of Redux have been discussed too much. In short, developers are concerned about \"use\", while Redux is concerned about \"philosophy\".\n\tPreviously, I joked that in fact, Redux can express it in one line of code, but wrote a sleepy document with paper specifications:\n\tThe principle of almost all React state managers are actually very simple. An implementation of \"observer mode\":\n\tSubscribe a listener in each component. When the state is updated, call the listeners again to trigger the component update.\n\n5. Why hooks?\n\tReact class component has the following problems:\n\tIn order to solve the above problems, React introduces Hooks:\n\tThis is an innovation of development concept and organization concept. Hooks has 3 strong characteristics: primitive, decentralization and algebraic effects.\n\n6. State management in Hooks Era\n\tAfter the emergence of Hooks, the community has not had a state manager that once unified like Redux.\n\tRedux has added some capabilities such as useSelector, useDispatch and useStore, and Facebook also opened a library Recoil.\n\tHowever, Redux is old-fashioned after all, and the shadow left by it in the early stage is too big. Many people’s thinking is formatted. Writing it casually is in the clouds, just to realize a simple function,\n\tRecoil’s writing rules seem awkward and wordy, and its development is not warm.\n\tIn the Hooks era, a mysterious organization emerged and contributed three state management libraries at one go.\n\tIt’s pmndrs, pmndrs for poimandres. pmnd.rs\n\tWhen it comes to \"organization\", in fact, the main developer should be one person, the master, Daishi Kato. github.com/dai-shi\n\tThe three libraries are zustand, jotai and valtio. Interestingly, these three words actually mean \"state\".\n\tzustand 🇩🇪 German \"state\", jotai 🇯🇵 Japanese \"status\", valtio 🇫🇮 Finnish \"state\".\n\tTake a brief look at the usage:\n\n7. Greedy update vs lazy update?\n\tAs mentioned earlier when referring to MobX, the scheme of proxy \"monitoring\" is not React, but it is practical, simple and most intuitive.\n\tIn essence, React is a \"greedy update\" strategy, full re-render then diff.\n\tProxy is a \"lazy update\" strategy, which can accurately know which variable is updated. Therefore, using proxy, we can optimize the performance of re-render.\n\tReact Forget introduced on React conf represents that React itself does not exclude some optimization in the idea of \"lazy update\".\n\tNote that the above words \"greedy update\" and \"lazy update\" are my own words, referring to the concepts of greedy and lazy in regular expression.\n\n8. Change of React state management ideas\n\tGenerally speaking, although this is a change in state management, it is also a change in React community development, a continuous exploration of best practices:\n\n9. Introducing resso, the simplest React state manager\n\tI have been thinking about what kind of React state manager is the simplest to use, and constantly explore a tool that is the most comfortable to use.\n\tRetalk (Redux best practice) and flooks (hooks state management) have been developed before, but with the emergence of new ideas, some of the latest inspiration is now concentrated in the state management library of resso.\n\tHere is resso:\n\tGitHub: github.com/nanxiaobei/resso\n\tNote that it is easier to write than the very simple valtio. It should not be simpler. If so, please let me know.\n\tMore importantly, resso will automatically optimize re-render, and never trigger additional re-render just because the data is in the same object.\n\tIn fact, state management is a very simple thing, but Redux and other tools add too much complexity. The original purpose of people using a tool is to solve problems.\n\tSo, simple and clear, let the tool return to the tool. The way we know a hammer is to pick it up and use it.\n\tI hope resso will be liked by those who need it.\n\n10. Invest the future\n\tBut what’s the use of all this?\n\tWhen new things keep coming, people will inevitably ask: class components are not unusable, Redux is not unusable, or more thoroughly, jQuery is not unusable. Why do you have to chase these new things?\n\tAn abstract explanation: we should constantly invest in the future.\n\tThis is not only in the development, in the work, but also in any field — \"in the form of continuous subdivision in the new track, exchange the first identity for resources.\"\nThe track of the old world is crowded with hard-working travelers. Although the new world is a mirage, only the new world will jump everything.\n\tThe above content comes from the share of React State Management in 2022.\n\t→ PDF download\n→ Keynote download (more animation~)\n\n"
}, {
    "title": "React forms and useRef Hook",
    "tags": ["#react", "#productivity", "#beginners", "#codenewbie"],
    "link": "https://dev.to/sobhandash/react-forms-and-useref-hook-4p1l",
    "reactions": 6,
    "cmt": null,
    "content": "So, in the last article we got to know about useState and useEffect hooks of react. Let's dive a little deeper this time with learning what are Forms and does useRef hook really work. I have also thrown in a bonus of what is prop drilling.\nForms\n\tNow, if you have learnt JavaScript chances are you already know what forms are and how to use them. But if you have jumped staight into React with just the basics of JavaScript then this will help you learn a new concept. \nSo, basically forms are as the name suggests a form, often seen in hardcopies as well in official settings. We have textarea, check boxes in traditional forms. In the web format the possibility increases with buttons, radio buttons, dropdowns, and many more. \nThe forms are submitted using onClick or onSubmit events. When we do interact with the button then the form by default displays the output immediately and re-renders the component. So to prevent that from happening we need to use \ne.preventDefault in the form handler. Here, 'e' is the event.\n\tonClick event can be used with button tags and onSubmit with the form tag itself.\n\tForms by default keep some internal state unlike other DOM Elements and thus the concept of controlled input or components comes in.\nControlled inputs or components are used for the submission of a form and they have access to the data user has entered as well. We can use these to pass the value of inputes to other UI elements or reset it from other event handlers. \nWhen we have to handle multiple inputs, a name attribute can be assigned and the handler functikn can work accordingly. \nAlthough, multiple inputs can be used everytime, it's not a good practice. We should group the inputs that can be handled by one function. Ex- Taking inputs of name, email, and age, then displaying on the screen.\n\tThat's the basics of form. Use these tips to write code more efficiently!\n\nuseRef Hook\n\tFrom forms we know the concept of controlled inputs. But we can also use uncontrolled inputs and components in our app. And thus useRef hook comes in a clutch.\n\tThe hook preserves the value in between renders like useState. However it does not trigger a re-render like useState.\n\tThe most popular use of this hoon is to target DOM nodes and elements. Something similar to what querySelector does in JavaScript.\n\tThe hook has to be assigned to some container\n\tWe need to pass the container along with a keyword 'ref'.\n\tThe container is an object with a property of 'current' so we can use it to get the exact DOM element.\n\tOne more thing to keep in mind is that useRef is not restricted to any one HTML element.\nAn example of useRef is given below.\n\tThat's the end of React Basics Part 3. Check out other articles in this series.\nI’ll keep adding more of these. Do let me know your thoughts and follow my Twitter and LinkedIn.\n\n"
}, {
    "title": "React Query mutating data",
    "tags": ["#react", "#beginners"],
    "link": "https://dev.to/dailydevtips1/react-query-mutating-data-45jo",
    "reactions": 5,
    "cmt": null,
    "content": "So far, we have looked at how we can load data with React Query and even use an infinite loader.\nBut often, we also have the option to manipulate data. This could be either creating, updating, or deleting data.\nReact Query has a super cool hook for this type of mutation called useMutation. By using this hook, you can leverage not having to call the initial query to update.\n\nReact Query mutation example\n\tLet's sketch an example, so it's easier to explain.\n\tWe have this list of Pokemon, but we found out that a new Pokemon exists.\nWe use a form to update this Pokemon, which makes a post request to our API and often will return the format we need.\n\tSince the API would already return the data, we need there is no need for us to update the whole query as we know what we already want to add.\n\tInstead, we can leverage this hook to tell us to update the cached values once it's succeeded manually.\n\tLet's see how this works.\n\nUsing the useMutation hook in React Query\n\tFirst, let's add a button to demo this out, we usually have a complete form, but you'll get the point.\n\tThe button acts as our \"form\" submit and passes the name of this new Pokemon.\n\tNow it's time to introduce you to the useMutation hook. Let's start by importing it.\n\tWe can then use it like this:\n\tThe mutate extraction is how we can invoke the actual mutation to happen, since we called our function addNewPokemon we can destructure it to a different name:\n\tThen for our mutation, we would generally have a call to your API, but for the sake of this tutorial, we'll mimic that effect and return what our API would return.\n\tNow for the fun part, which is the options, we want to use onSuccess. This option is called once the mutation is successfully finished.\n\tOnce that happens, we want to use the setQueryData function to change the existing data for a specific key.\n\tThe setQueryData function has a parameter that can return the old data, and we then merge the old data with this new data.\n\tAnd that's it!\nWhen we click the button, our Pokemon will be added to the list without refetch the whole query.\n\tFeel free to have a play with this Code Sandbox.\n\tThank you for reading, and let's connect!\n\t\tThank you for reading my blog. Feel free to subscribe to my email newsletter and connect on Facebook or Twitter\n\n\n\n"
}, {
    "title": "React - Meet Virtual DOM",
    "tags": ["#react"],
    "link": "https://dev.to/thanhtr99270163/react-meet-virtual-dom-3lk2",
    "reactions": 3,
    "cmt": null,
    "content": "We briefly discussed the features of React in the introductory post of this series. In this article, we will dive deeper into the declarative programming aspect of React by exploring React's virtual DOM.\n\nA major theme in React is a drive to simplify otherwise complex tasks and abstract unnecessary complexity away from the developer. React tries to do just enough to be performant while freeing you up to think about other aspects of your application. One of the main ways it does that is by promoting declarative instead of imperative programming. You get to declare how your components should behave and look under different states, and React's internal machinery handles the complexity of managing updates, updating the UI to reflect changes, etc. One of the major pieces of technology driving this is the virtual DOM.\nA virtual DOM is a data structure that mimics the Document Object Model (DOM) in the browsers. React is not the only framework using a virtual DOM. Other frameworks such as Ember employ their own implementation of a virtual DOM. A virtual DOM serves as an intermediate layer between the application code and the browser DOM. The virtual DOM allows the complexity of change detection and management to be hidden from the developer and moved to a specialized layer of abstraction. React's virtual DOM handles change detection in data as well as translating browser events into events that React components can understand and react to.\nThe DOM\n\tTo understand virtual DOM, we first need to understand the DOM. If you're already familiar with the DOM, feel free to jump ahead to the next section.\n\tThe Document Object Model (DOM) is a programming interface that allows JavaScript programs to interact with different types of documents ( HTML, XML, SVG, etc.). There are standards-driven specifications - a standard set of features created by the public working group - for the DOM.\n\tThe DOM provides a structured way of accessing, storing, and manipulating different parts of a document. At a high level, the DOM is a tree structure that reflects the hierarchy of an XML document. This tree structure is comprised of sub-trees that are in turn made of nodes as shown in the image below. The DOM API that is exposed to JavaScript allows access and operations on each of these elements in the tree.\n\tWhenever you use a method in JavaScript that accesses, modifies, or stores information related to something in an HTML document, you're using the DOM or its related API. Not all methods used in JavaScript are part of the JS language itself. In fact, they are part of a bigger collection of web APIs. For example, some common methods or properties that may be used to update or query a web page are: getElementById, parent.appendChild, querySelectorAll, innerHTML. These methods are provided by the host environment - the browser - and allow JS to interact with the DOM.\n\tIn the context of a large web application, interacting with the DOM in this manner could get quite complicated. That's when virtual DOM shines.😎\n\n\nVirtual DOM\n\tAs mentioned in the previous section, there are certain pain points when it comes to working directly with the DOM via the regular web APIs, especially when building large and complicated web applications. Generally, these pain points arise in the area of change detection.\n\tParticularly, when data changes, we need to update the UI to reflect that. However, doing that in a way that is efficient and easy to think about can be difficult due to the way browsers handle interactions with the DOM. When a DOM element is accessed, modified, or created, the browser is often performing a query across a structured tree to find a given element. It will then need to adjust the layout, sizing, and other actions as part of a mutation, all of which can be computationally expensive.\n\tA virtual DOM can help with optimizing DOM updates to account for these constraints. And that's exactly what React's virtual DOM aimed to solve, i.e. implementing a virtual DOM that is **fast enough* while maintaining a robust API, simple mental model, and cross-browser compatibility.* The keyword here is \"fast enough\" because there is another factor that influences the design in React, which is simplicity. In other words, it must be simple enough to allow developers to defer extensive thinking about how the virtual DOM is accomplishing complicated state update logic and focus on the more important aspects of building their applications. Therefore, when building applications with React, we don't often need to directly interact with the DOM. Instead, we mostly leave that to React. But, how does the virtual DOM work?\n\tDOM mutation done poorly can be computationally expensive, so React tries to be efficient in its update to the UI by implementing a diffing and update procedure.\n\tReact creates and maintains a virtual DOM in memory, and a renderer like react-dom handles updating the browser DOM based on changes. React solves the performance issue by implementing heuristic diffing - a method to calculate which parts of the in-memory DOM require changes to the DOM and perform intelligent updates only on the parts that have changed as shown in the image below.\n\tTo see the heuristic diffing mechanism in action, let's look at a simple example using both the native Web API and the React API for comparison purposes. To keep things simple, we will not be using components or JSX (the JavaScript extension that is used with React). Through this example, we will also learn about two core API methods: ReactDOM.render and React.createElement. These methods lay the foundation for our next article in which we get to learn about React components.\n\n\nHeuristic Diffing\n\tBefore we can use the React library, we need to somehow import it into our application code. We can do that using one of the following methods as suggested on the React documentation. Once imported, the React's top-level APIs are available on the React global variable.\n\tTo start off, let's render a simple HTML element to the display using two different methods: one from the native Web API, and the other from the React API as shown below.\n\tYou should see a \"Hello Native Web API\" box and a \"Hello React\" box. Let's study the code.👩‍💻\n\tBasically, we have two nodes: mountNode1 is controlled with the DOM API directly while mountNode2 is controlled with the React API, which in turn uses the DOM API. The only major difference in how these two nodes were built is that in the DOM API version we used a string to represent the DOM tree, while in the React API version we used pure JavaScript calls and represented the DOM tree with an object instead of a string.\n\t<!--kg-card-end: markdown--><!--kg-card-begin: markdown-->\n\tLet's focus on the React API. The ReactDOM.render and React.createElement methods are the core API methods in a React application. In fact, a React web application cannot exist without using both of these methods.\n\tReactDOM Render\n\t\tThis is basically the entry point for a React application into the browser's DOM.\n\t\tIt takes two required inputs and one optional input:\n\n\tReact Element\n\t\tWe mentioned React element in the previous section. What exactly is a React element anyway? Well, long answer short, it's a virtual element describing a DOM element. The React.createElement API method returns a React element.\n\t\tInstead of working with strings to represent DOM elements (as you've seen in the native Web API example above), DOM elements are represented as objects created by calling to the React.createElement method. These objects are known as React elements.\n\t\tThe above method has three arguments and returns a new React element of the given type :\n\t\tNo matter how complicated the UI is going to get, when using React every HTML element will be represented with a React element. React elements are created in memory. To actually make a React element show up in the DOM, we need to use the ReactDOM.render method which will figure out the most optimal way to reflect the state of a React element into the actual DOM tree in the browser.\n\t\tTo demonstrate how React elements can be nested, let's add a couple more elements to the current UI. Let's add a textbox to read input from the user and the current time displayed inside a <pre> tag. We'll do that to both the native Web API and React API versions. As shown below, both the <input> and <pre> tags were added by making a nested React.createElement method call inside of the top-level React element. Both versions should still be rendering the same exact HTML in the browser.\n\t\tAt this point, you're probably thinking that using React is a lot harder than the simple and familiar native way. What is it that React does so well that makes it worth giving up the familiar HTML and having to learn a new API to create what can be simply created using the native Web APIs? The answer is not about the initial rendering of the HTML view. Rather, it's all about updating the existing view in the DOM. And that's when the heuristic diffing mechanism comes in handy.\n\n\tHeuristic Diffing\n\t\tTo demo this concept, let's add an update operation to the DOM trees which can be done using the setInterval method from the Web timer API. But first, we'll need to put all of our DOM manipulations for both versions into a function, which we'll name as render, and pass it into the setInterval method as a callback in order to call it every second.\n\t\tAre you ready for what you're about to see next?😜 This is when React is going to blow your mind.💥 Now, try typing something into the textbox of the native Web API version. You won't be able to.😜 This is very much expected because we are basically throwing away the whole DOM node on every tick and regenerating it. However, try typing something in the textbox that is rendered with React. Magic!!!✨😎 So what's the difference?🤔\n\t\tAlthough the whole React rendering code is wrapped inside the ticking timer, React is only changing the content of the <pre> element and not the whole DOM tree. In other words, the textbox was not regenerated, which is why you were able to type in it.\n\t\tYou can see the difference in how the native Web API and the React API update the DOM visually by inspecting the two DOM nodes in the Chrome DevTools. As shown below, the native Web API regenerates the entire <div id=\"mountNode1\"> container with every tick, while React smartly regenerates only the <pre> tag in its <div id=\"mountNode2\"> container.\n\t\tGIF\n\t\tThis is React's smart diffing algorithm in action. It only updates in the main DOM tree what actually needs to be updated while keeping everything else the same. This diffing process is possible because of React's virtual DOM representation that it keeps around in memory. No matter how many times the UI views need to be regenerated, React will take to the browser only the needed partial updates.\n\t\tNot only is this method a lot more efficient but it also removes a big layer of complexity in the way think about updating UIs. Having React do all the computations about whether we should or should not update the DOM enabled developers to focus on thinking about their data (state) and the way to describe a UI for it. Developers can focus on updates on the data state as needed without worrying about the steps needed to reflect these updates in the actual UI in the browser because React's got their backs.😉\n\n\n"
}, {
    "title": "React.useCallback()",
    "tags": ["#react", "#performance", "#hook"],
    "link": "https://dev.to/mhsadique/reactusecallback-134g",
    "reactions": 7,
    "cmt": null,
    "content": "Before diving into useCallback() usage, let's distinguish the problem useCallback() solves — the functions equality check.\nFunctions in JavaScript are first-class citizens, meaning that a function is a regular object. The function object can be returned by other functions, be compared, etc.: anything you can do with an object.\nLet's write a function factory() that returns functions that sum numbers:\nsum1 and sum2 are functions that sum two numbers. They've been created by the factory() function.\nThe functions sum1 and sum2 share the same code source but they are different function objects. Comparing them sum1 === sum2evaluates to false.\nThe purpose of useCallback()\n\tDifferent function objects sharing the same code are often created inside React components:\n\thandleClick is a different function object on every rendering of MyComponent.\n\tBecause inline functions are cheap, the re-creation of functions on each rendering is not a problem. A few inline functions per component are acceptable.\n\tBut in some cases you need to maintain a single function instance between renderings:\n\tThat's when useCallback(callbackFun, deps) is helpful: given the same dependency values deps, the hook returns the same function instance between renderings (aka memoization):\n\thandleClick variable has always the same callback function object between renderings of MyComponent.\n\n"
}, {
    "title": "React Tips & Patterns",
    "tags": ["#react", "#tips", "#patterns", "#javascript"],
    "link": "https://dev.to/kwamedev/react-tips-patterns-3i8k",
    "reactions": 5,
    "cmt": null,
    "content": "Liquid syntax error: 'raw' tag was never closed\n"
}, {
    "title": "React is awesome!",
    "tags": ["#react", "#typescript", "#javascript", "#mobx"],
    "link": "https://dev.to/andreasbergqvist/react-is-awesome-ppd",
    "reactions": 6,
    "cmt": 4,
    "content": "Just wanna say that creating stuff with React is so much fun!\nHooks being an awesome addition!\nCurrently the following libraries/packages/language-supersets is making it even more fun!\nTypeScript\n\tLike 1-2 years ago, using TypeScript - especially with React (where more developers where using Flow), was like more trouble then what it was worth... Nowadays though, it makes a awesome developer experience and mst popular packages has typings available! Good job Microsoft!\n\thttps://github.com/Microsoft/TypeScript\n\nMobx\n\tSince the day Mobx was released it's been my goto state handler. The main benefit for me is that it makes the code very readable and easy to understand.\n\tNowadays, since hooks was released, the mobx-react-lite library is a great addition!\n\thttps://github.com/mobxjs/mobx\n\nStyled Components\n\tI just love creating my styled components instead of using style-objects. Makes the render functions really nice and readable!\n\thttps://github.com/styled-components/styled-components\n\nFormik\n\tForms in React has been troublesome... But no more!\n\thttps://github.com/jaredpalmer/formik\n\nPrettier / eslint\n\tI'm using prettier to format the code on save! Never do I need to think about how to format nor indent my code. Eslint is a great addition to warn me about other \"bad code\". Make sure they don't conflict with eachother with eslint-config-prettier\n\thttps://github.com/prettier/prettier\nhttps://github.com/eslint/eslint\n\nreact-test-library\n\tIf I where about to test my React code, I would be doing it with react-test-library 😂\n\thttps://github.com/kentcdodds/react-testing-library\n\t<end-of-react-love>\n\n"
}, {
    "title": "React NFT Website with Dark Mode Toggle",
    "tags": ["#react", "#html", "#css", "#webdev"],
    "link": "https://dev.to/kishansheth/react-nft-website-with-dark-mode-toggle-1k2g",
    "reactions": 9,
    "cmt": 1,
    "content": "You can get the template from the link proivided in the description of the video.\n\tTechnologies Used :\n\tLibraries and Assets Used :\n\nTo learn how to create this template watch the complete video. You can get the template for free from the link provided in the description of the video.\n\nPlease do like the video and subscribe to the channel. It helps and motivates me to create more content like this.\nIf there are any room for improvements please let me know. You can also fork the repository and give me a merge request if you can implement something more.\n"
}, {
    "title": "react-i18next useTranslation Does not Get Same Provider",
    "tags": ["#react", "#i18next", "#worknote", "#webpack"],
    "link": "https://dev.to/elpddev/react-i18next-usetranslation-does-not-get-same-provider-5faf",
    "reactions": 7,
    "cmt": null,
    "content": "Photo by Amador Loureiro on Unsplash\nScenario\n\tUsing react-i18next with I18nextProvider instead of one global provider.\n\tIn our case, in a hybrid app with Angular and React, the i18next instance was generated  in the Angular app. The React sub app needed that instance instead of its own.\n\nCase Problem\n\tAt first, it seems that the provider was receiving the instance correctly.\n\tBut the useTranslation hook, when asking for the react i18next conext, always received and empty one. Not the instance that was set on the provider\n\nSolution - TLDR\n\tMake the js bundler provider the same react-i18next library instance for both apps/libraries.\n\tFor webpack and yarn pnp, we use the reslove alias configuration:\n\nSolution Walkthrough\n\tTo debug the situation, the context can be marked by adding a property guid to the object.\n\tThen, in the useTranslation that does not work at the further down component, we can step into the useTranslation code and see if the useContext gives the same instance with  the __guid property on it.\n\tSince it does not, this indicate that the I18nContext given as a token for the useContext to search the correct context in its storage, is not the same.\n\tTo prove it, again, we can import the I18nContext in the TranslationProvider and tag it also. Then in the useTranslation we see it is not the same instance\n\tThis phenomenon is explained in more details here\n\tIn some js bundling scenarios, one library gets a different instance of the js module of third party library like react-i18next then the other library.\n\tSince React useContext works on reference equality for the tokens for its dependency injection like mechanism, it does not find the correct context.\n\tThis can happen more generally for other libraries that stumble on the same use case situation. The solution for webpack is the same\n\nStorybook Solution\n\tThis also happens in a monorepo with storybooks packages as self packages.\n\tThe solution is the same. You need to configure storybook main.js webpack settings to resolve the the import to the same package instance.\n\tmain.js\n\nReferences\n"
}, {
    "title": "React Virtual DOM, Diffing, and Keys",
    "tags": ["#react", "#webdev"],
    "link": "https://dev.to/smhaley/react-virtual-dom-diffing-and-keys-119g",
    "reactions": 2,
    "cmt": null,
    "content": "This post is a quick run through of the React Virtual DOM and it's implications on using the key prop during development.\nThere are many reviews of this topic around the web. However I still see many newer devs make mistakes with keys. I hope my addition with interactive examples will add some clarity to the topic.\nCheck out this link for the interactive demos\nThe React Virtual DOM and Reconciliation\n\tReact is fast. Very fast. Part of its secret sauce is calculating all the changes that occurred (such as state and prop changes) in memory before applying them to the actual browser DOM.\n\tIn memory React keeps a virtualized copy of the the DOM. Whenever an event triggers a rerender, React compares the new state of the Virtual DOM with that of  the previous via a diffing algorithm.\n\tThe algorithm then reconciles what has been updated with what has not and updates the browser DOM with all changes in batch. See this process in the image below.\n\tDiffing\n\t\tTo understand diffing it helps to think of a React app as a tree:\n\t\tThe left tree diagram is a React app. The red node is single component (element) updating within the application.\n\t\tReact then updates all the 'child' elements below the updating element (see the right side). That is, both the red elements are rerendering or possibly remounting as a result of the top level change.\n\n\tHow does React decide to rerender or remount?\n\t\tThis is controlled by the core assumption of diffing\n\t\tSo what does that mean?\n\t\tReact will fully remount a component when the actual element changes: such as <Component/> changing to <Component2/> or a <a> changing to a <div>.\n\t\tThis is reasonable. If the the component itself is different the diffing process completely unmounts the outdated element and remounts the new element. The catch is, everything below the unmounted element gets unmounted and remounted as well (all state is wiped out of each unmounted element). In this context, the change on the left causes both the red elements on the right to remount.\n\t\tBut what about rerendering?\n\t\tIf the diffing algorithm determines that the changes were only attributes on the element (such as props or state) it will only rerender the component that changed and all components below (that is why the image on the right has both elements as red).\n\t\tThe second assumption allows developers to let React know that a component has changed using the key prop. The key prop is often used in lists, but in the context of a component it will force the component to unmount and remount whereas the diffing algorithm was hinted about the change.\n\t\tOkay let's look at a demo:\n\t\tGIF\n\t\tIn the above gif there is a Root (blue background), Child (Color Changing), a Deep Child (Pink), and a Tree. Each of these components is represented by the Tree diagram showing the state of mounts, remounts and rerenders.\n\t\tWhen the gif starts all render counts are 1. \nAs  the user updates the state of the Child component (by paginating), React diffing renders all components within the Child causing the render count to increase. Since there was just an attribute change, there was no remount.\n\t\tUpdating state at the Root (Update Element Attribute button) causes all the components in the Tree diagram to rerender--increasing the render count. This is because the Update Element Attribute button updates state at the root (color prop) and passes this new prop to the child.\n\t\tIt is not until the actual Change Element button is selected that the diffing algorithm realizes that the Child and everything below it must be unmounted and remounted. This is because the Change Element button updates a counter state in the Root component and passes this new count to the key prop of the Child. The diffing algorithm simply rerenders the Root due to the state change, but completely removes all child elements below--wiping all internal state (see the cache data loss).\n\t\tInteractive demo\nCode for this gif -- key-demo.tsx is Root\n\n\n\n\nBut what about Keys with lists?\n\tLists are a special use case for the key prop. This is because React is fairly inefficient with list element rendering. If a list were to be updated with a new element anywhere other than the bottom, React will mutate each item within that list. To prevent this, React uses the key prop within lists to track which element is new and which is not.\n\tFor this reason the general wisdom within the community is to never use indices as the key when iterating over a list.\n\tDoing so will confuse the diffing algorithm to what is actually changing.\n\tTake a look below:\n\tGIF\n\tBoth the left and right list columns are the same data. The only difference is that the left list keys off an index while the right keys off a locally unique value.\n\tOnce both inputs are checked, the Add Item button is selected. The buttom adds additional elements to the top of the list.\n\tAs a result, the input stays with the index 0 key on the left, but travels with the properly selected a label on the right. The diffing algorithm does not notice the issue on the left whereas the key has not changed!\n\tInteractive demo\nCode for this gif\n\tThanks for reading!\n\n"
}, {
    "title": "React Hooks: useContext()",
    "tags": ["#react", "#javascript", "#beginners", "#programming"],
    "link": "https://dev.to/fig781/react-hooks-usecontext-167h",
    "reactions": 54,
    "cmt": 8,
    "content": "What are React hooks?\nThey are functions in React that allow you to add react functionality to function based components.\nWhat is the useContext hook?\nThis hook is used to efficiently pass state down the component chain. Prop drilling has historically been used to do this. Prop drilling is the process of passing state values as props deep down a component chain. Often times, this results in passing props to components that do not need them. The useContext hook allows us to pass state values down the component chain without prop drilling.\nThe best applications for this hook are to pass global values to children components. A few example use cases are application theme switching, and logged in user information (user id, user name...). This hook is not recommended as a replacement for the state management library Redux. Currently it is not robust enough to handle many of Redux's use cases. This hook can work great for small applications that may only have a few globally used pieces of state.\nThe syntax follows a common pattern:\nHere is an example using the useEffect and useState hooks:\nMore information about useContext can be found in the React docs: https://reactjs.org/docs/context.html\nLeave comment if you have any questions or feedback.\n"
}, {
    "title": "react-router-dom-v6",
    "tags": ["#react", "#javascript"],
    "link": "https://dev.to/adidoshi/react-router-dom-v6-51j2",
    "reactions": 22,
    "cmt": 3,
    "content": "Hey folks, I know most of us were using react-router-dom-v5 before & the v6 must be a little bit confusing. But trust me they have made it more simpler in the latest version for routing of different pages. Breaking down all the concepts one by one for better understanding. Let's start😊\nWhat is react-router-dom?\nWhat we'll be covering from the new version -\nInstallation -\n\tnpm install react-router-dom@6\n\tLet's begin with the most common usage for routes.\nTaking a scenario, suppose a user is on the home page & want's to visit the about page, vice versa.\n\tRemember history.push() from v5. Let's suppose you are placing an order on an e-commerce store and when the order is placed you want to navigate the user to another page which says order placed successfully. In that case you want to achieve that with an action button, which is possible by useNavigate provided by rrd.\nFor example - in home page you have a button 'Place order' you can include an onClick prop. Similarly if you want the user to navigate back to home page from order's page then you can simply use navigate(-1).\n\tCreate a page not found component -\n\tSimply add a route to App.js ('*' has a special meaning in rrd which means it matches routes which are not defined in your app.\n\tReact router dom also helps to switch between a portion of the view, inside a page. Take a scenario, we have a navigation link 'Products', when user clicks, it renders the '/products' page & within that we have a search bar then two more links 'featured', 'new'. When we click on featured it renders '/products/featured' & changes only the portion of the page beside links, same when clicked on 'new'. To achieve this we use nested routes.\n\tIn the previous section we saw how nested routes work, however you must have noticed that the child routes render only when the url is '/products/featured' or '/products/new'. Sometimes you may want the child route to render at the parent route level, i.e. if we click on products link, we still want to render the featured products when url reaches '/products', that can be achieved by the index route. It's also a nested routed, so simply specify in the route component & what's special here is we don't need to add path prop instead we just need to add index, this will share the path of the parent route that is '/products'.\n\tLet's suppose we are building an Admin dashboard and we require users list and user details page for particular user (followed by the id of that user). For example if navigate to 'users/1' then it should show details of first user & same for all. We achieve this by dynamic routes in rrd.\n\tSo url params is not the only way to add parameters to the route, we can also add an optional query string. For example if we want to filter active users from the user's list based on some condition then we can add in the url -> /users?filter=active. This is called as search params in rrd. useSearchParams behaves similar to the useState hook, instead of storing it in memory though it's stored in url.\nSo in the users file you can just add - (when user clicks on active user useSearchParams is initiated & on reset filters removed.\n\tLazy loading is a technique wherein components not required on the home page can be split into separate code bundles and downloaded only when user navigates to that page. Maybe you can think like incrementally downloading the application. It helps reduce initial load time thereby improving performance. Let's understand with an simple example, we will lazy load the about page by adding lot paragraphs meaning trying to make it bulky on purpose.\n\tIf we observe the bundle size when the entire app is loaded on initial load. Well to check that, open your dev tools, right click on refresh button of your browser and click on 'Empty Cache and Hard Reload'. Taking my example the main.chunk.js is of 10.8kb & it takes 19ms to load. \nIn App.js we need to add dynamic import syntax and make use of React suspense. Make sure in your about page you have a default export, as we need that in App.js file. A promise is returned by this dynamic import which is then converted into a module, that contains a default exported react component, in our case About.\n\tNow when we lazy load the about page, we see the difference. The main.chunk.js file size is reduced to 6.8kb& time also has reduced to 15ms. Hence we imporve our initial load time. Maybe you will not able to see the fallback loading text, as the file size in not that large, if you do want to ensure it's working throttle your network speed to 'slow 3g' & you will able to see the fallback element. While you haven't reduced overall code of your app you have reduced the amount of code needed during the initial load & if you think about it as the application increase in size, mote third party packages are installed , the bundle size loads up causing the initial time to be very long.\n\tThat is it folks, hope you have gained value from the post, where I've tried to introduce you to almost all topics from the react-router-dom-v6. Further if you want to deep dive more into rrd usage you can refer React Router Dom. There are more hooks like useLocation which would be useful.\nThankyou for visiting.\n\n\n\n\n"
}, {
    "title": "React Or Angular – Which Is Better? It Depends.",
    "tags": ["#react", "#angular", "#programming"],
    "link": "https://dev.to/davidnnussbaum/react-or-angular-which-is-better-it-depends-2pkb",
    "reactions": 1,
    "cmt": null,
    "content": "React which was developed by Facebook is a JavaScript library that facilitates the creation of interactive user interfaces. It uses server-side rendering to provide a flexible, performance-oriented solution and is unidirectional. Angular was developed by Google and is a structural framework (as opposed to just being a library) for developing dynamic web apps. It is bidirectional.\nMany postings extoll the virtues of one system over another, yet as with most things in life one must evaluate the situation with a view of what the particular circumstances are. In the final analysis, one should not simply add the number of factors that favor React or Angular but also take into account the importance of each factor to you.\nIf you don’t have time for a learning curve – React is better.\nIf community support is important – Angular is better.\nIf installation time cannot be lengthy – Angular is better.\nIf flexibility is important – React is better.\nIf you want simple updates – React is better.\nIf you want to develop Native, hybrid, or web apps – React is better.\nIf you want to develop Single Page Applications or mobile apps – Angular is better.\nIf you want to develop native-rendered apps for Android and iOS devices – React is better.\nIf you want to develop feature-rich, large-scale applications – Angular is better.\nIf you don’t want to have to update the model state with every data change -Angular is better.\nIf you want a single tool for testing and debugging – Angular is better.\nIf you want faster documentation – React is better.\nIf you prefer JavaScript – React is better.\nIf you prefer TypeScript – Angular is better.\nIf third party integration is important – React is better.\nIf ease of moving from one view to another is important – Angular is better.\nIf enhanced support for server side rendering is important – React is better.\nThank you for reading!\n"
}, {
    "title": "React Hooks Re-intro",
    "tags": ["#react", "#reacthooks", "#demo", "#tutorial"],
    "link": "https://dev.to/hayk94/react-hooks-re-intro-77m",
    "reactions": 8,
    "cmt": null,
    "content": "React Hooks Re-intro\n\tThe original post is in this repo \nhttps://github.com/hayk94/react-hooks-intro-coffeeshop\nwhere each branch has a readme.md explaining over the code.\n\tThis repository is for React Hooks introduction.\n\tIt consists of several numbered branches.\nIn each branch readme file goes over the code,\nexplaining the advantages and caveats.\n\tHere in the master branch is a plain CRA app.\nThere are some additional configs for eslint using eslint-config-fbjs\nwith eslint-plugin-react-hooks.\nAnd prettier config.\n\tDisclaimer\n\tMost stuff in this repo and posts have already been discussed,\nby react team in the docs, by Dan Abramov in his amazing talk and blog,\nand other people.\n\tThis repo is just a summation of my knowledge about hooks I gathered so far.\nJust putting stuff in my own words.\n\thttps://reactjs.org/docs/hooks-intro.html\n\thttps://dev.to/dan_abramov/making-sense-of-react-hooks-2eib\n\thttps://overreacted.io/react-as-a-ui-runtime/\n\thttps://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\thttps://overreacted.io/how-are-function-components-different-from-classes/\n\thttps://overreacted.io/a-complete-guide-to-useeffect/\n\thttps://overreacted.io/writing-resilient-components/\n\tApp Intro\n\t\tImagine we are writing a coffeeshop menu app.\nUsers can choose the product they want and order it.\n\t\tFirst we make aMenu.js component.\n\t\tAnd make it render in our App.js component.\n\t\tThen we add a select to our menu app, with some products.\nAdd a button for ordering.\n\t\tApparently this is what they sell at coffeeshops, isn't it?\n\t\tNow we need some state for the selected product.\n\t\tFinally we need methods to select the product and order it.\n\t\tAnd here we made our app that's it.\nNow lets go and order some stuff.\n\t\tAnd...\n\t\tOops...\n\t\tRight...\n\t\tWe get a big nice error message, guess what?\n\t\tTurn to the next branch...\n\n\tAnd now this!\n\t\tSo now we have an error! Or rather the error...\n\t\tYou know it right?\n\t\tLet's fix it!\n\t\tWe needed to bind this.\n\t\tNew Requirements\n\t\t\tSuddenly we got new requirements from the client...\nThey want the page title to be the selected item of the user.\n\t\t\tSo we need something like this.\n\t\t\tLifecycle methods yay!\nNow we got it once user selects an item the document title changes accordingly.\n\n\t\tYet another requirement\n\t\t\tAnd now we've been given another task based on the new requirements.\nUsers should be able to tell us how many products they want to order.\n\t\t\tPretty easy, right?\n\t\t\tWe add a number input, count to our state, and an onCountChange method.\nOh and right, we need to bind this.\n\t\t\tGreat we accomplished a lot today and feel proud.\n\n\t\tOh no, a bug was just reported\n\t\t\tWhoops... We just barely finished the previous task,\nyet a bug was reported from our previous feature.\n\t\t\tThey say when the users enter the page first time,\nthe page title doesn't show the selected product.\n\t\t\tBut it's not a bug! The user didn't select any product yet!\nOh really? It's a bug and you should fix it!\n\t\t\tAnyway it needs to be done.\nSo after thinking a while, the best place for this would be componentDidMount.\nYay another lifecycle method to the rescue!\n\t\t\tPhew... it's been a tough day, but we managed! Hooray!\n\t\t\tTurn to the next branch...\n\n\t\tApp grows! Performance issues come up!\n\t\t\tAs our app grows, we are encountering some performance issues here and there.\n\t\t\tTo identify them we start using some debugging tools.\nSo you decide to put some loggers in your Menu.js.\n\t\t\tSo we put loggers in componentDidUpdate and componentDidMount.\nNow you see the proper log after componentDidMount.\nYou select a product and see the proper log in componentDidUpdate, with new state and props.\nYou change the product count and see new state and props logged by componentDidUpdate.\n\t\t\tBut wait a minute...\nDoesn't that mean the document.title = newTitle code executes on every update,\neven though the selected product didn't change?\n\t\t\tWe need to fix that. And this logger tool is really helpful we should implement it for other components too in our app.\n\t\t\tSo maybe we fix the issue with an if check. And make a HOC for the logger.\n\t\t\tAs you are thinking about the solution a new high priority requirement arrives.\n\t\t\tTurn to the next branch...\n\n\t\tNew Requirement with lots async stuff\n\t\t\tSo suddenly a new requirement arrives.\nTo implement it you added lots of async stuff to your on order function, so now it looks like this.\n\t\t\tEverything seems to be working just fine, but then you get a bug report.\nWrong item is being ordered sometimes.\n\t\t\tAfter trying to reproduce it for a while, you find the problem!\n\t\t\tWhen you order a product then select another product before the order message appeared,\nyou get a wrong product in the message as it appears.\n\t\t\tHmmm...\nWhy that would happen? Nothing seems to be wrong with our code.\n\t\t\tTurn to the next branch...\n\n\t\tUgh not this again!\n\t\t\tSo why that bug happens?\n\t\t\tTo give you a hint, lets take a look at the solution first.\n\t\t\tSo we only changed this piece.\n\t\t\tJust one line of code fixes our issue.\n\t\t\tLet's dive deep and understand what happens here.\n\t\t\tLet's take a look at this buggy code first.\n\t\t\tWe select a product - \"GoGreen\". State changes to it. Component re-renders.\nthis.state.selected === \"GoGreen\"\nClick the order button. The onOrder method fires.\nsetTimeout starts. 3 seconds pass. The callback is executed.\nWe read this.state.selected and get \"GoGreen\".\n\t\t\tHere everything is working great. Now let's see how the bug happens.\n\t\t\tWe select a product - \"Amnesia\". State changes to it. Component re-renders.\nthis.state.selected === \"Amnesia\"\nClick the order button. The onOrder method fires.\nsetTimeout starts. Before 3 seconds pass, we select another product - \"GoGreen\".\nState changes to it. Component re-renders.\nthis.state.selected === \"GoGreen\"\n3 seconds pass. setTimeout callback runs. We read this.state.selected and get \"GoGreen\".\nHowever this time we clicked the order button when we selected the \"Amnesia\" product.\nThe problem here is the this. It changes during the scope of the onOrder.\n\t\t\tNow let's take a look at the solution.\n\t\t\tWe select a product - \"Amnesia\". State changes to it. Component re-renders.\n this.state.selected === \"Amnesia\"\n Click the order button. The onOrder method fires. \n We read the this.state.selected and assign it to the new variable selected in the function scope.\n selected === \"Amnesia\" \n setTimeout starts. Before 3 seconds pass, we select another product - \"GoGreen\".\n State changes to it. Component re-renders.\n this.state.selected === \"GoGreen\"\n 3 seconds pass. setTimeout callback runs. We read the selected of the function scope not from the this. And get \"Amnesia\".\nThe this changed/mutated but function scope and variables in it were still the same.\n\t\t\tSo we solved the this problem by function scope.\n\t\t\tOne way that I find easy to think about the this and function scope, is to think about them like dimensions.\n\t\t\tWe have these 2 dimensions where we store our data.\n\t\t\tThe this can change during the scope.\n\t\t\tSo you need to be aware of the 2 dimensions where our data reside. And how they interact.\n\n\t\tFucking bring hooks already!\n\t\t\tFine! Fine...\n\t\t\tSo you heard about this next hot thing that's called hooks.\nNow you want to refactor your Menu.js component to use hooks.\nYou were going to refactor it anyway because of performance issues in branch 3, so lets refactor straight to hooks.\n\t\t\tCreate a new simple functional component MenuFC.js.\n\t\t\tSo plain and beautiful. Simple function that returns some jsx.\n\t\t\tNow what do you think, wouldn't it be nice if we could do something like this?\n\t\t\tWow, our state to be a simple variable in function scope. That's crazy man!\n\t\t\tBut we need to somehow be able to change it, right? Otherwise it's not useful as state.\nImagine if we had setState as simple function in scope.\n\t\t\tWhat do you think? It's so nice and clean.\nSo how do we accomplish this with hooks?\n\t\t\tI know what you are thinking. \"I liked you at first, but now, what kind of black magic is this?\"\n\t\t\tPlease just give me a moment. It is a simple ES6 Array Destructuring.\nYou learnt the big and verbose class syntax, surely this tiny syntax won't hurt you.\n\t\t\tOur selected and setSelected are just plain variables in our function scope.\n\t\t\tuseState function imported from react gets one argument - the initial state.\nIt returns an array.\nThe first element is the value of our state.\nThe second is a function to change the value.\n\t\t\tWe use that function to create a callback to execute when a user selects different product.\n\t\t\tSo take a look at this beauty once more.\n\t\t\t\"But you are creating a new callback function on each render, it's bad for performance!\".\nSome of you might say.\nWell it turns out... No.\n\t\t\tHere is what react official docs say about that.\n\t\t\tMoreover\n\t\t\tSo if we just separate out politics from these sentences, the raw meaning strictly equals\n\t\t\tAs React components classes do so much shit that if we just throw them away and use functions,\nwe get a lot of performance benefit compared to which creating a new callback function at every render at most cases is nothing\n\t\t\tAnd you can find some performance tips and tricks mentioned there. We'll dive into these later.\n\t\t\tNow let's add the ordering functionality.\n\t\t\tAgain. Simple as that, just a plain function.\nNotice in this case we don't need to put the onOrder in the component scope.\nWe can declare it outside and use it inside the component by passing arguments.\n\t\t\tHere is another great thing about hooks. You can have as many of them as you'd like.\nLet's implement the count.\n\t\t\tWhat a beauty! And we don't have any this problems.\nNo bindings! No async bugs! Now it's just a plain function and only a scope.\n\t\t\tNow let's get acquainted with the next hook.\nTurn to the next branch.\n\n\t\tSide effects!\n\t\t\tWhere did we perform side effects in class components?\nLifecycle methods.\n\t\t\tTo perform side effects in functional components now we have useEffect.\n\t\t\tIn our Menu.js class component we have a side effect for changing our document title.\nHere is how we do it in MenuFC.js\n\t\t\tuseEffect accepts a function as an argument.\nThere we perform our side effects.\nIt runs on every render.\nIt behaves\n\t\t\thttps://reactjs.org/docs/hooks-effect.html\n\t\t\tWe also had a logger in our class component. Let's add it.\n\t\t\tEverything looks great right? Before we go deeper one thing...\n\n\t\tuseEffect is a whole new concept\n\t\t\tDo not think of useEffect as a new lifecycle method.\nIt's a whole new concept.\n\t\t\tIt's not a lifecycle method, it behaves similar to them.\n\t\t\tuseEffect timing is different.\n\t\t\thttps://reactjs.org/docs/hooks-reference.html#timing-of-effects\n\t\t\tIn our class component we had a few issues.\nAs state changes our component re-renders.\ncomponentDidUpdate fires and document.title = this.state.selected was running,\neven though we changed only the count and not the title. With classes we'd put some if check.\n\t\t\tAlso we wanted to make our logger functionality reusable. With classes we'd make a HOC.\n\t\t\tThe same problems we have now here with our useEffect hook.\nAt the moment it's as bad as lifecycle methods.\n\t\t\tLet's see how it's actually better.\nTurn to the next branch.\n\n\t\tIt's useEffect not effects\n\t\t\tTake a look at this code.\n\t\t\tWhile it may seem okay, conceptually it is not.\n\t\t\tIn the callback function, the 2 lines of code have different concerns.\nThey do stuff unrelated to each other.\nWe need better separation of concerns.\n\t\t\tSo in fact this is much more better.\n\n\t\tDeps\n\t\t\tNow we need our document.title effect run only when the selected state changed.\nIn usual componentDidUpdate you'd do some prevProps comparisons and so on.\n\t\t\tGuess what? useEffect now will do it for you! You just need to tell it what it needs to check.\nHow do we tell it what variables to check? Just pass a second argument to it.\n\t\t\tYes simple like that. useEffect gets second argument. It's an array.\nIn that array you put any variable which change should trigger the effect.\nIn case those variables don't change. The effect will not run.\n\t\t\tJust add another console.log to that effect and you will see it now runs only when the selected changes.\n\n\t\tRe-usable hooks\n\t\t\tLet's dive right into coding.\n\t\t\tWe create a new hooker.js file.\n\t\t\tThen we do this in our MenuFC.js\n\t\t\tThat's right!\nNow we can use any of these hooks in any React Functional Component.\n\t\t\tThat's how simple sharing logic can be.\n\n\t\tSome general rules for hooks\n\t\t\tRemember that custom hooks should be named as native hooks. The use word should be used.\n\t\t\tHooks cannot be in conditions. But you can have conditions in your useEffect callback\n\t\t\tAnd so on... You definitely should check eslint-plugin-react-hooks\n\n\t\tTo be continued...\n\t\t\tAnd that's it for hooks intro!\nSoon I'll dive deeper into more specific cases...\nSo keep up with me!\nSee you soon!\n\n\n\n\n\n\n"
}, {
    "title": "React architecture series, Render props, Hooks and Context API",
    "tags": ["#react", "#webdev", "#tutorial", "#beginners"],
    "link": "https://dev.to/softchris/react-architecture-series-render-props-hooks-and-context-api-3ell",
    "reactions": 47,
    "cmt": 3,
    "content": "Trying to learn React?\nThere are some patterns you should know about that will make it easier to organize your code.\n"
}, {
    "title": "React Ecommerce Website with Dark Mode Toggle",
    "tags": ["#react", "#html", "#css", "#webdev"],
    "link": "https://dev.to/kishansheth/react-ecommerce-website-with-dark-mode-toggle-4l0c",
    "reactions": 12,
    "cmt": 4,
    "content": "You can get the template from the link proivided in the description of the video.\n\tTechnologies Used :\n\tLibraries and Assets Used :\n\nTo learn how to create this template watch the complete video. You can get the template for free from the link provided in the description of the video.\n\nPlease do like the video and subscribe to the channel. It helps and motivates me to create more content like this.\nIf there are any room for improvements please let me know. You can also fork the repository and give me a merge request if you can implement something more.\n"
}, {
    "title": "React.js - Indicateur de \"force\" d'un mot de passe",
    "tags": ["#react", "#javascript", "#security", "#tutorial"],
    "link": "https://dev.to/kezios/reactjs-indicateur-de-force-dun-mot-de-passe-o9c",
    "reactions": 7,
    "cmt": null,
    "content": "Pour sécuriser les mots de passe, on demande souvent à l’utilisateur d’utiliser un mot de passe “complexe” en ajoutant par exemple une majuscule, un caractère spécial ou un chiffre. Cependant, ces méthodes ne permettent pas de créer un mot de passe aussi sécurisé qu’on le pense.\nPar exemple, le mot de passe: [Password1234] réponds à toutes ces règles, cependant il est l’un des plus testés lors des attaques.\nComment faire alors ?\n\tL’une des solutions pour créer un processus de validation de mot de passe fiable est d’utiliser une librairie comme zxcvbn-ts (https://zxcvbn-ts.github.io/zxcvbn/). Cette librairie permet d’estimer la complexité d’un mot de passe et ainsi d’empêcher l’utilisateur d’utiliser un mot de passe jugé trop faible.\n\nImplémentation en React.js\n\tL’idée est de calculer le score du mot de passe indiqué par l’utilisateur et en fonction de ce score affiché les indicateurs qui correspondent :\n\tGIF\n\tApp.tsx :\n\tIndicators.tsx\n\tApp.css\n\nPour allez plus loin\n\tA présent, on va ajouter des options dans notre validation. Avec pour objectif pour rendre notre validation de mot de passes plus sécurisé. On va aussi ajouter des suggestions pour indiquer à l’utilisateur comment rendre son mot de passe plus fort.\n\tGIF\n\tApp.tsx :\n\tSuggestions.tsx\n\tLien codesandbox:\n\t\thttps://codesandbox.io/s/password-zxcvbn-react-ts-3lt0q\n\n\n"
}, {
    "title": "React Router and nested routes",
    "tags": ["#react", "#webperf", "#javascript", "#performance"],
    "link": "https://dev.to/imkevdev/react-router-and-nested-routes-fmn",
    "reactions": 13,
    "cmt": 1,
    "content": "Cross-posted from https://imkev.dev/react-router-nested-routes\nFollowing the public launch of Remix v1, nested routes have become all the rage - at least within my tiny corner of cyberspace. But what are nested routes, why are they meaningful, and how can you use nested routes in your React app?\nReact Router\n\tNested routes have existed in React Router since very early on - heck, it was initially named react-nested-router. Now on version 6, React Router is one of the most popular React packages and will be used throughout this post to demonstrate the concept of nested routes. I will also include React Router v5 code samples and demos but, I will refer to the v6 version when explaining the code.\n\nNested routes\n\tIn my own words, a nested route is a region within a page layout that responds to route changes. For example, in a single-page application, when navigating from one URL to another, you do not need to render the entire page, but only those regions within the page that are dependent on that URL change.\n\tIn the wireframe above, when clicking on a header link (4), the main content (1) will be rendered to show the content for this route, while the header remains unchanged. Similarly, when clicking on the left navigation links (2), the page's content section (3) will update to show the new content, but the header, footer, and navigation menu remain unchanged.\n\tThis layout could be implemented in several ways.\n\tFlat routing structure - v6 | Flat routing structure - v5\n\tIn the above flat structure, we have four routes declared in a single file. /catalog/:id and /catalog would render the <Catalog> component which includes the left navigation and the content area. If the :id param is present, then it would show the content for that :id, if not it would show some default content. /welcome shows a welcome message and the final catch-all route shows the home page, including the <Header> and <Footer>.\n\tNavigating between the different routes would cause the main section (1) to render with the updated content. This includes the <Header>, <Footer>, and <Nav> - even if they are not changing. If you play around with the demo, you will probably feel that it works well, is snappy and there are no glaring bugs. This routing structure is fairly common and I have personally encountered it numerous times on production. However, this structure is not optimized and when navigating from one URL to another, the CPU is doing a lot of work that it doesn't need to. In our example this overhead is negligible, but on a more complex application, it may result in visible jank & deteriorate the user experience.\n\tTo make re-renderings more apparent, I have added the following code snippet but initially left it commented out. If you are sensitive to flashing images, please use caution.\n\n\nLet's get nested\n\tThe above routing structure could be optimized by using nested routes to avoid rendering components that have not changed. As a default rule, we only want to render what has changed. When a user clicks on the left navigation links, the only component we want to render is the content section. Similarly, when a user clicks on a header link, we only render the main section.\n\tNested routes (v6) | Nested routes (v5)\n\tInstead of having three routes on a single level, we now have six routes spread over three levels. At the topmost level, we have two routes, path=\"*\" and path=\"/welcome\". These two routes were separated because the <Header> and <Footer> are not visible on the <Welcome> page.\n\tOn the second level, we have two routes, path=\"/catalog/*\" and index. These are used to render the <Catalog> or <Home> respectively. As you can see in the code snippet above, the <Header> and <Footer> are included in the element attribute for path=\"*\" instead of being declared within <Catalog> and <Home> as we had done in the flat-structure.\n\tFinally, on the inner-most level, there are two more routes. The first path exposes the :id param with path=\":id\". Since this route is a nested route of path=\"/catalog/*\", then the path is built onto its parent's, matching in /catalog/:id. The index route is used when no :id is present.\n\tIf you experiment with the demo, you will see that each component is only rendered when needed, making this solution much more optimized than the one we saw earlier. I love it!\n\nConclusion\n\tNested routes aren't a new concept. If I remember correctly, I was using some form of nested routes way back in 2009 on C#'s MVC framework (it's been a while so let me know if I'm mixing things up). Yet I still encounter cases when developers opt for a flat structure when nested routes would be the better solution. While I believe that nested routes could help you today, I expect that nested routes would become even more important in the near future, with concepts such as Islands Architecture and frameworks like Remix gaining traction. Give it a go and you won't turn back.\n\tThank you for reading & have a good one!\n\tImage credits: Photo by Jamie Morrison\n\n"
}, {
    "title": "React Hooks like am 5-ish: useContext with a pinch of Composition...",
    "tags": ["#react", "#nextjs"],
    "link": "https://dev.to/sodjanathan/react-hooks-like-am-5-ish-usecontext-with-a-pinch-of-composition-431h",
    "reactions": 3,
    "cmt": null,
    "content": "I am fully convinced that if you are reading this you are definitely not a toddler who writes React, perhaps you are reading this because you have hit \"the wall\" and seek an escape, the kind of relief that simple and precise information can give. I am no expert but I have hit this wall countless times and that's why I put together this information as simple as I can, just so the future me that hits it again will have a reference to freshen up, and perhaps you can too.\nStraight to the chase:\n\tIMO, React sought to solve one major problem, to be a great option as the View of the \"MVC\" architecture, a problem that I haven't necessarily experienced because I don't know what scope \"large applications\" fall into, is it 5000+ lines of code, youtube level codebases? perhaps... but what I do know is when you are building very complex web applications with several parts that are likely to be reused repeatedly, you start to wish that you didn't have to copy and paste code so many times (that's what I did at one internship). You begin to wish that you wrote something once and it could be reused many times, that's what components are for. React solves that problem and more...\n\tSome parts of a website are going to hold static data, data that won't change (if so you probably could get away with any good CMS + some templates), and others will continuously display different information depending on what \"kind of data\" is assigned. This is where state management comes in.\n\tThe React core provides two known ways of representing states in a React component, the previously discussed useState hook and the famous \"Context API\".  useState hook and the famous \"Context API\".\n\nuseState and the Context API\n\tClass components in React have state (state is simply the current dynamic value of the component) built-in,\n\tfunctional components used to be used just for presentation before the release of hooks made it possible to add state.\n\tThat's simple enough, right?\nWhat if you need to track several values at once whilst passing them to other components that require the same data to be relevant, that's a common use case.\n\tFor example, you have managed to build an amazon eCommerce clone where a user can sign in... you can track the user's login status by using useState and then passing the value through all the child components to whichever component that actually needs the user's email to be displayed, this is known as \"prop drilling\", and aptly named it is.\n\tuseState is \"local\" to the functional component and therefore, the only way you will be able to get the data to the child component will be through \"prop drilling\" which becomes unbearable after about three levels deep. How do you get around this: Most will quickly call on state management tools or perhaps composition, however it appears composition is less used as compared to state management.\n\nTo Context or To Compose:\n\tThe useContext hook in React solves the problem (prop drilling) easily, but the react docs provide a subtle caution, that it will introduce additional complexity to your code, whilst making your components less reusable ( before you use context ), less reusable in the sense that, once a component is dependent on context to have full functionality, it cannot maintain same functionality outside of context, hence it's less usable, for this reason, they offer an alternative to consider before using context. Outside of the official React docs \"Redux Toolkit/Redux\" is also very popular as a state manager.\n\nBefore Context, consider Composition:\n\tHow do you use Composition to get past this issue, the react docs referenced in the previous paragraph highlight how but here's an example with code\n\tProp Drilling:\nThe user data is passed 4 levels deep into the component hierarchy to reach the component that actually needs it.\n\tAfter Context:\n\nNow to Composition\n\tNow that we have explored solving the problem with Context, let's take a look at using Composition to solve the same problem. Composition aims to maintain the reusability of the component whilst avoiding prop drilling.\n\tWe will do this by making use of the children prop that's available to us in React. \nThe children prop allows you to create \"wrapper components\", these components wrap take a component or components and render them/it.\nObserve the basic example below to understand the final implementation.\n\tI hope this brief demo is OK for now, otherwise here's some expansion on the topic Composition and Inheritance\n\tNow to the much-awaited solution:\n\nAdditional Useful Implementation\n\tHow to create Wrapper components\n\tComposition, alternative to prop drilling\n\tWhen and How to use Composition\n\nAdditional References for further reading...\n"
}, {
    "title": "React Optimised Components",
    "tags": ["#react", "#optimisation", "#reactdom", "#reactaddonsperf"],
    "link": "https://dev.to/ankitpat/react-optimised-components-5787",
    "reactions": 4,
    "cmt": null,
    "content": "Everyone wonders why react web app runs slow? Answer to these often lies within component only, when and how much its re-rendering. Are those re-render are even necessary? React  doesn't provide you magical performance upgrade, it just gives you tools and way so by which you can optimise it. Now it's on us when and how to use it. Let's get going...\nSo since react introduction of virtual DOM, it changed the way of thinking in web developers. With Virtual DOM, react makes UI update as efficient as it should be expected.\nNow, to make React app acts how it should be then you got to understand. How React components renders? How it went through all lifecycle methods in different phases? How and when to use which lifecycle method?\nWith react, you can gain alot of performance improvement that it has to offer by measuring and computing performance. And, React provides just the tools and functionalities necessary to make this easy.\nSo, lets start with How React works?\nHow does React works?\n\tBefore we check on optimisation techniques, lets check how react actually works. At the start of React development, you have the simple and obvious JSX syntax, and React’s ability to build and compare virtual DOMs. Since its release, React has influenced many other front-end libraries. Libraries such as Vue.js also rely on the idea of virtual DOMs.\n\tHere is how React works:\n\tEach React application begins with a root component, and is composed of many components in a tree formation. Components in React are “functions” that render the UI based on the data (props and state) it receives.\n\tWe can symbolize this as F.\n\tUIView = F(data)\n\tUsers interact with the UI and cause the data to change. Interaction can involves clicking a button, tapping on an image, dragging list items around, AJAX requests invoking APIs, etc., all these only changes the data. They never cause the UI to change directly.\n\tHere, data defines state of web application, not just what you have stored in your database. Even bits of frontend states like checkbox state or tab selection are all part of data.\n\tWhenever there is a change in this data, React uses the component functions to re-render the UI, but only virtually:\n\tUI1 = F(data1)\n UI2 = F(data2)\n\tNow React compares the difference between new UI with old UI like these:\n\tChanges = Diff(UI1, UI2)\n\tNow after the difference found, react will only apply those difference to the Real UI Browser. This process is called as Reconciliation .\n\tThis repeated process of diffing and applying changes to browser is going on for every data or state changes in application. These continuous changes and rendering may be one of primary source of performance issue  in any React app. Building a React app where the diffing algorithm fails to reconcile effectively, causing the entire app to be rendered repeatedly can result in a frustratingly slow experience.\n\n\n\nHow to work on Optimising?\n\tFirst question is, where exactly we can optimize?\n\tAs you know, during the initial render process, React builds a DOM tree like this:\n\tGiven a part of the data changes, what we want React to do is re-render only the components that are directly affected by the change (and possibly skip even the diff process for the rest of the components):\n\tHowever, what React ends up doing is:\n\tHere, all of the green nodes are rendered and diffed, resulting in wasted time/computation resources. This is where we will primarily put our optimization efforts in. Configuring each component to only render-diff when it is necessary will allow us to reclaim these wasted CPU cycles.\n\n\n\n\nThings we can do for optimisation:\n\t1. ShouldComponentUpdate() ?\n\tAs your app grows, attempting to re-render and compare the entire virtual DOM at every action will eventually slow down.\n\tReact provides a lifecycle method which can help you in stopping rendering of component which is not actually required to re-render if certain data/state changes.\n\tfunction shouldComponentUpdate(nextProps, nextState) {\n    return true;\n}\n\tBy default nature of these method is to return true always. Which means giving permission to re-render of component on every change.\n\tWe can modify these method to return false so it will re-render component. But this is not the perfect way to stop re-render. Because it will stop re-rendering of every data change.\n\tSo let's do it more perfect way. You can compare nextState with current state and nextProps to current props. Like these:\n\tfunction shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.Id !== this.props.Id;\n}\n\t2. Using a React.PureComponent\n\tTo ease and automate a bit this optimization technique, React provides what is known as “pure” component. A React.PureComponent is exactly like a React.Component that implements a shouldComponentUpdate() function with a shallow prop and state comparison.\n\tA React.PureComponent is more or less equivalent to this:\n\tclass MyComponent extends React.Component {\n     shouldComponentUpdate(nextProps, nextState) {\n          return shallowCompare(this.props, nextProps) && \n          shallowCompare(this.state, nextState);\n      }\n      …\n  }\n\tAs you see it only do shallow comparison, so it will be only effective if your props and state contains primitive data.\n\t3. Making data immutable\n\tAssuming you have used React.PureComponent but you still have ways where we have complex data set and cannot be detected by shallow comparison. Other workaround is create Immutable objects.\n\tThe idea behind using immutable data structures is simple. Whenever an object containing complex data changes, instead of making the changes in that object, create a copy of that object with the changes. This makes detecting changes in data as simple as comparing the reference of the two objects.\n\tYou can use Object.assign or _.extend (from Underscore.js or Lodash):\n\tEven better, you can use a library that provides immutable data structures:\n\tHere, Immutable.Map is provided by the library Immutable.js.\n\tEvery time a map is updated with its method set, a new map is returned only if the set operation changed the underlying value. Otherwise, the same map is returned.\n\t4. Using the production build checks\n\tWhen developing a React app, you are presented with really useful warnings and error messages. These make identifying bugs and issues during development a bliss. But they come at a cost of performance.\n\tIf you look into React’s source code, you will see a lot of if (process.env.NODE_ENV != 'production') checks. These chunks of code that React is running in your development environment isn’t something needed by the end user. For production environments, all of this unnecessary code can be discarded.\n\tIf you bootstrapped your project using create-react-app, then you can simply run npm run build to produce the production build without this extra code. If you are using Webpack directly, you can run webpack -p (which is equivalent of \nwebpack --optimize-minimize --define process.env.NODE_ENV=\"'production'\".\n\t5. Binding function with Context\n\tIt is very common to see functions bound to the context of the component inside the render function. This is often the case when we use these functions to handle events of child components.\n\t// Creates a newhandleUploadfunction during each render()\n<Header onLogoClick={this.handleClick.bind(this)} />\n// ...as do inlined arrow functions\n<Header onLogoClick={event => this.handleClick(event)} />\n\tThis will cause the render() function to create a new function on every render. A much better way of doing the same is:\n\n"
}, {
    "title": "React Hooks: Gotta Hook ’Em All",
    "tags": ["#react", "#javascript", "#webdev", "#programming"],
    "link": "https://dev.to/ruppysuppy/react-hooks-gotta-hook-em-all-78b",
    "reactions": 28,
    "cmt": null,
    "content": "This article is a collaboration with UPDIVISION, an outsourcing company building complex software for companies all over the world.\nUnless you have been living under a rock, you definitely heard of  Hooks.\n\n\nSince this is a tech article, let’s stick to React Hooks only and keep the fishing for later.\n\nThe introduction of Hooks in React 16.8.0 was initially met with a dose of skepticism. The developers soon found it an outstanding addition that allowed for a much more declarative and efficient solution to writing code.\nCurrently, two years later, Hooks have become a standard part of the React ecosystem, and there is a push to use Hooks over Class Components.\nHow Hooks Replace Class Components\n\tThe primary purpose of using the Class Component was to obtain access to the state and the life cycle methods, which were unavailable in the Functional Components. Hooks allows the use of these features in the Functional Components , without using the less performant Class Component counterparts.\n\tLet’s look at the Hooks that ship with React. It is assumed that you are familiar with the basics of React\n\nuseState\n\tThe useState Hook is used to create a state variable.\n\tThe syntax is const [<varName>, set<varName>] = useState(initialState).\n\tWe can use the setCount function to update the state of the count variable. Just compare it to the Class Component counterpart:\n\tNot only does Functional Components are more performant, but they are also easier to read and understand.\n\nuseEffect\n\tuseEffect is another standard Hook. Its principal purpose is to execute life cycle methods in a Functional Component.\n\tLet’s explore the life cycle methods you can replace:\n\tcomponentDidMount runs when the component is mounted. It is typically used to fetch data through API calls and update the state. The Hook alternative is:\n\tcomponentDidUpdate runs when a piece of state or prop data is updated. It is used to update associated data once a piece of data is updated. The Hook alternative is:\n\tYou can also omit the dependency array ([count] in this case) if you only want to run the useEffect callback run on every render.\n\tcomponentWillUnmount runs before the component is unmounted. It is used as a clean-up function, with the primary focus on removing timers or listeners\n\tThe Hook alternative is:\n\nuseContext\n\tThe useContext Hook allows you to access the context, the state management solution that ships with React. The syntax is const <varName> = useContext(<Context>).\n\tNOTE: The Component needs to be wrapped in a Context.Provider Component as it looks up the React Virtual DOM for the Context\n\nuseRef\n\tuseRef is a Hook that allows you to store a variable that persists between the re-renders.\n\tThe main difference between a state and ref variables is when a state variable is updated, the UI is re-rendered, whereas, it does not do the same for a ref. It is generally used to store a reference to DOM elements.\n\tThe syntax is const <varName> = useRef(initialValue) and the value is accessible through the current property.\n\nuseCallback\n\tuseCallback is a Hook that allows you to memorize (an optimization practice in Computer Science) a function. It is useful when you want to prevent unnecessary renders.\n\tThe syntax is const <varName> = useCallback(<function>, [<dependencies>]);\n\nuseMemo\n\tuseMemo is a Hook that allows you to memoize any value. Just like useCallback, it is beneficial to prevent unnecessary renders. It is generally used to memoize expensive computations.\n\tThe syntax is const <varName> = useMemo(<function>, [<dependencies>]);\n\nuseReducer\n\tuseReducer is a Hook that allows you to manage the state of a component. It serves the same purpose as the useState Hook , but it follows the Redux pattern to manage & update the state.\n\tThe syntax is const [<varName>, dispatch] = useReducer(<reducer>, initialState);\n\nCustom Hooks\n\tReact also allows developers to create their own Hooks from scratch.\n\tLet’s create a custom Hook called useFetch, which will fetch data from an API and return it along with loading & error states.\n\nWrapping Up\n\tIn this article, we went through one of the core concepts of React.\n\tRecently, we have been seeing a push towards using Hooks over the traditional Class based approach. So, you can’t go wrong mastering Hooks , specifically, as all libraries now ship with Hooks-based solutions.\n\tHappy Coding!\n\tTo find out more about code, the software development process, or to have awesome apps built for your business needs - contact UPDIVISION\n\n\nThanks for reading\n\tFinding personal finance too intimidating? Checkout my Instagram to become a Dollar Ninja\n\tNeed a Top Rated Front-End Development Freelancer to chop away your development woes? Contact me on Upwork\n\tWant to see what I am working on? Check out my Personal Website and GitHub\n\tWant to connect? Reach out to me on LinkedIn\n\tI am a freelancer who will start off as a Digital Nomad in mid-2022. Want to catch the journey? Follow me on Instagram\n\tFollow my blogs for Weekly new Tidbits on Dev\n\tFAQ\n\tThese are a few commonly asked questions I get. So, I hope this FAQ section solves your issues.\n\n"
}, {
    "title": "React Apollo: Understanding Fetch Policy with useQuery",
    "tags": ["#react", "#apollo", "#graphql", "#webdev"],
    "link": "https://dev.to/lico/apollo-client-understanding-fetch-policy-with-usequery-1gfa",
    "reactions": 14,
    "cmt": null,
    "content": "I've been working on an Apollo client project these days. I wasn't used to GraphQL so I struggled to understand it at the beginning. \nIn the app I'm working on, there was something wrong with the data consistency at some point. \nI googled for that and I got to know that apollo client uses cache-first as a default fetch policy. I changed the fetch policy in the project to no-cache because I thought that would fit more to the project. After that I found some bugs with no-cache and I felt that something went wrong. I thought it might be good to learn more about fetch policy.\nI'm going to talk about\nI prepared a simple todo graphql server using nest. There is no database. The server utilizes just an array as a storage and I'm going to use this server for the following tests. \nYou can check the backend server code from this repository. \nI set up \"@apollo/client\": \"3.5.8\" in the client.\nFetch Policy with useQuery\n\tThere are six fetch policies that are available on useQuery.\n\tSource: Apollo Documentation\n\tI'll show you how each fetch policy works.\n\tcache-first\n\t\tThis is a default fetch policy which uses cache if there is data in the cache, otherwise it fetches data from the server. \nI wrote a code for this test. There are two buttons. One is used for creating a todo item and another one is used for showing or hiding a data table (mount and unmount). The data table gets data with useQuery.\n\t\tHere is the code.\n\t\tLet's see how it works step by step.\n\t\t1. Press the toggle button\n\t\t2. Press the create button twice\n\t\tYou can see the created data in a network tab.\n\t\t3. Press the toggle button twice (For remounting the component)\n\t\tThere is still the empty table, right? There are even no additional requests in the network tab.\n\t\t4. Reload the tab and toggle the table\n\t\tNow, you can see the table. Let me explain it.\n\t\tAt the first request, the client got an empty array from the server and it stored the data in the cache. \nI remounted the table (step 3) and it found the empty array in the cache which is why the table was still empty.\n\t\tAfter reloading, they display the data from the server because the cache is gone.\n\n\tcache-only\n\t\tIt only uses cache. If there is no cached data, it throws an error.\nI rewrote the code for testing this option.\n\t\t1. Press the toggle button\n\t\tTo be honest, I didn't expect this result. I thought it would throw an error since they say A cache-only query throws an error if the cache does not contain data for all requested fields. in the documentation. Anyways, let's continue.\n\t\t2. Reload and press the fetch button.\n\t\tYou can see the response data in the network tab.\n\t\t3. Press the toggle button.\n\t\tNow, you can see the data.\n\t\t4. Press the create button then remount(press the toggle button twice) the table\n\t\tIt is still the same. cache-only uses only cached data as you have seen.\n\t\tIf you fetch the data manually, it will show up as well but what if you fetch a part of the data? How will it show up? \nLet's see how it appears.\n\t\tThe data appears depending on which data is in the cache.\n\t\tSorry, I didn't notice that there were empty columns and all of the numbers were 2. I changed a part of the code from\n\t\tTo\n\n\tcache-and-network\n\t\tWith this policy, it first uses a data from the cache and makes a request. The request automatically updates the data.\n\t\tFor this test, I removed a code that renders a loading text in TodosTable.\n\t\tWhile loading, the component would use a data from a cache.\nSince we're living in the future with our internet speed, we won't be able to recognize. So let's slow down the internet to 3G first and then start the test.\n\t\t1. Create two items and press the toggle button\n\t\t2. Create two items and remount the table\n\t\tIt displays data out of the box from the cache, then it updates automatically when the fetching is done.\n\n\tnetwork-only\n\t\tThis uses the data comming from the server and then it updates the cache.\n\t\t1. Press the toggle button repeatedly\n\t\tIt has a delay until a request comes back.\n\t\tFor the next test, whether network-only updates the cache or not, I changed my code as below.\n\t\t1. Press the fetch button then press the toggle button\n\t\tThe table displays the data with cache-only. It means that network-only updated the cache.\n\n\tno-cache\n\t\tIt's similar to network-only but it doesn't update the cache. In the code above, I changed a line which is an option of the lazy query.\n\t\tNothing shows up in the table with cache-only because no-cache doesn't update the cache.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChanging Default Fetch Policy\n\tAs I already mentioned, a default option of useQuery and useLazyQuery is cache-first. If you want to change a default fetch policy, use defaultOptions.\n\nConclusion\n\tThere were a lot of things that I had to know more about Apollo Client. I didn't understand why they used cache as a default. That's why I set a default fetch policy of my project to no-cache. However, I got some problems while using no-cache. One of them is that useQuery doesn't use the defaultOptions. Although the problem was solved in a commit, it seems that there were some more issues related to no-cache. I thought it will be okay to use a specific policy when it is needed but apollo cache system does something more than I expected (like automatically updating and making a rendering, refetchQueries). I think cache may be the key to using apollo client but I'll have to learn more about it. I hope this post will help you at some point. Thank you for reading the post.\n\n"
}, {
    "title": "React Lifecycle Methods - A primer with React 16",
    "tags": ["#react", "#lifecyclemethods"],
    "link": "https://dev.to/stephencweiss/react-lifecycle-methods-a-primer-with-react-16-24og",
    "reactions": 7,
    "cmt": null,
    "content": "One of the things that I didn’t appreciate when I first started using React was how helpful the different lifecycle methods were. I got away with it for a while by working on simpler projects that could get away with just using a constructor, render, and sometimes componentDidMount if I was getting crazy.\nI knew that there was more out there, however, I didn’t have a great framework for thinking about it. While React has great documentation on the lifecycle methods - I couldn’t put them in context. Scott Domes’ articles were really helpful in this regard - particularly his update on lifecycles for React 16 .\nTo appreciate why lifecycle methods are different, more special than, other methods - look no further than the React docs:\nLet’s break that down:“Each component has several ‘lifecycle methods’” means that React will be looking for these methods at different stages in the building, updating, and tearing down a component on the DOM.\n“…that you can override” means that when you define them in your component, you’re telling React what to do when we get to that stage. Think about a render method. By defining render, we describe what we want to render — React manages the when.\n“…at particular times in the process” refers to the different stages of the life cycle, of which there are four: Mounting, Updating, Unmounting, and Error Handling.\nSo, by defining the different methods in our component, we can tell React what we want to do at certain points.\nA few things to keep in mind:\nBefore render, we do not have access to the DOM and therefore any DOM manipulation should be avoided. For example, using an AJAX request to retrieve data to display on the page should happen after mounting. As Tyler McGinnis explains:\nI drew out the different methods and how they interacted. When you see it all laid out visually, the different methods start to make a lot more sense - both in terms of what they do, but more importantly - in how they interact.\nRather than show my crude hand drawing, I found this image - which is both prettier and, if you follow the source link, interactive.\nSource: React lifecycle methods diagram\nAdditional Reading\n"
}, {
    "title": "React Native uses native Components",
    "tags": ["#react", "#javascript", "#webdev", "#beginners"],
    "link": "https://dev.to/smilepk/react-native-uses-native-components-871",
    "reactions": 1,
    "cmt": null,
    "content": "What Is React Native?\nReact Native is a well-known JavaScript-based app framework used for mobile apps and software development. It enables developers to develop natively generated apps for iOS and Android. You can develop a React Native-Based application for various platforms using the same codebase as the software development company. \nReact Native is one such framework that is used for software development. It allows app development for multiple platforms with a single code base for iOS, Android, Windows with a single code base. React Native is one of the most known and highly used cross-platform for mobile app development\nTo know the framework and understand the elements for an excellent react application, \nyou need to go through the basic structure of a React Native, \nand some of the basic React concepts, like JSX, state, \nand more.\nWhat React Native Can Do\nIt makes platform-specific versions to share code across platforms where it will be easy to share a code with a single codebase.\nLeveraging one team support for two platforms and conveying a standard technology.\nWhy Use React Native for App Development?\nIt is a cross-platform and very easy to develop the app.\nIt is time and cost-effective over other frameworks.\nWith React Native, complex features and app tasks are made easy to provide a more enhanced app user experience.\nYou will get all answers from React Native community and libraries for seamless development.\nIt serves a customized user experience to each user on the same application.\nWith React Native, detecting bugs are easier as it uses a single codebase for Android and iOS.\nTop 7 React Native Components for Software Development\nWhen you decide to develop software with React Native, you must understand the components in React for app designing. As per the platform guidelines, React Native components are useful for developing a robust business app.\nLets' look at some React Native components that every developer needs for robust app development.\nIt includes a set of general-purpose UI components for application design and overall user experience. The most amazing thing with React Native elements is its themes, which can be changed in the runtime without reloading the application. So, a business can easily focus on logic and develop an attractive app with the visual appearance of your product.\nAll components can take variations in color, that you can easily modify inside our theme file.\nBenefits of React Native Material Kit\nGoogle Material Design\nOpen-Source Fonts\nexpo.io + iOS/Android\nDocumentation\nBit’s USP lies in letting developers to create components outside an application. Developers can then utilize them to compose as many applications as they want with the help of Bit component. Also, developers can alter the functionality of components in the app by adding or removing them from applications.\nTheme ability is the element offered by React Native known as Native Base and is personalized as per your app theme and component styles.\nARIA, powered by React Native, offers React hooks that allow developers to create accessible design systems in less time than other frameworks.\nAdvantages of NativeBase\nNaturally Beautiful – Native Base crafts a beauty in an app that is inherited in itself, offering attractive components.\nMulti-Platform – It supports multiple platforms and is thus easy to develop. You can ask developers to customize app properties using platform-specific mounts.\nAccessible – NativeBase is easy to access and use and provides the box effect, including focus management and keyboard navigation.\nCustomizable – As mentioned, it is a default theme used to add components in the app that are customized as per-app requirements.\nReact Native with 3,000+ icons in the library helps you find components that fit your needs.\nAdvantages of Vector Icons Component\nIt is highly intuitive for designing buttons, logos, and nav/tab bars.\nVector Icons will enable you to import icons faster.\nThey are simple to extend, style, and integrate into your apps.\nAs per the official React website, developers save their development time for around four weeks using React Native Ignite. Also, Ignite contains React Navigation 5, React Native, MobX-React-Lite, AsyncStorage, TypeScript, MobX-State-Tree and is Flipper-ready.\nOne can easily customize features like default colors or make your design with the help of this component. In addition, we utilize the theming support provided by React Native Paper along with the option to switch between dark and light modes.\nAdvantages of React Native Paper\nIt is a high-quality, standard-compliant material design library.\nIt also covers all significant use-cases for app development.\nReact Native Paper is free and open-source which makes it quickly available.\nIts fast, interface, responsive, and works reliably on both platforms.\nConclusion\nThese are some of the best available UI components of React Native that are highly important for your future software development. React Native with easily access libraries are simple to easy and its components are developers' choices for effective app development. React Native is an optimal choice when incorporated with the parts of native development with React and a best-in-class JavaScript library for building user interfaces.\n"
}, {
    "title": "React 18 setTransition",
    "tags": ["#react", "#javascript"],
    "link": "https://dev.to/manomano-tech-team/react-18-settransition-4oop",
    "reactions": 1,
    "cmt": null,
    "content": "startTransition\n\tReact 18 introduces a new concurrent feature called startTransition which aims to solve problems we tried to solve using debounce and throttle, and much more.\n\tThis thread gives a deep dive example of how it solves the problem of UI responsiveness when there is expensive computation taking place.\n\tBefore React 18, we tend to use debounce (or throttle depending on the situation) to schedule this compute intensive task at a given time T so that the UI feels more responsive to other events. But every time the task will start after T has elapsed, even if it takes less time than T. And the task will still occur as a whole chunk, blocking the thread during this time.\n\tThis is where startTransition API brings a new approach to deal with these problems.\nIt can:\n\tCheck my personal blog for more articles.\n\n"
}, {
    "title": "React Markdown + MUI v5 (Material-UI)",
    "tags": ["#react", "#markdown", "#mui", "#package"],
    "link": "https://dev.to/hpouyanmehr/markdown-with-mui-formerly-material-ui-components-13n2",
    "reactions": 10,
    "cmt": 4,
    "content": "Table of Contents\nAbout This Post\n\tAre you going to use markdown in your React web app? In this post, I want to introduce my new package to you. That will help you to render the markdown fast and nicely.\n\nUsing Markdown in your project\n\tAs you know, with MD or MDX you can write rich formatted content real quick, and it's pretty readable even before you convert it to HTML. There are also some other benefits that you can read about them as well. \nSo, if we are all in the same boat, chances are that like me, you need to use markdown in almost every single project. Even though you can find some npm or yarn packages that help you to render markdown as you wish, almost every time you need to configure that or write some extra CSS to gain the style you want.\n\nAbout \"mui-markdown\" package\n\t\"mui-markdown\" uses \"markdown-to-jsx\" and \"mui\". I found these two working together really simple and nice. This package will be great for you if you use MUI (Formerly Material-UI). Also it is really lightweight, just 11.70Kb (Unpacked size is 87.1Kb).\n\nSome of \"mui-markdown\" features\nPackage usage\n\tThe package is available on npm and yarn.\n\tTo install it, simply run:\n\tThen pass the markdown as children:\n\nDocs\n\tTo get more familiar with this package you can read the documentation on GitHub or NPM.\n\tHi! I'm Hosein Pouyanmehr. I enjoy sharing what I learn and what I find interesting. Let's connect on LinkedIn.\n\tSee my code interests on GitHub.\n\n"
}, {
    "title": "React with Typescript",
    "tags": ["#react", "#typescript"],
    "link": "https://dev.to/luctuyishime/crud-app-using-react-and-redux-1hpp",
    "reactions": 3,
    "cmt": null,
    "content": "We will build a simple app for inviting people to our event.\n1. To start a new Create React App project with TypeScript, you can run:\n2. Define type definition for our state\nIn our App.tsx file we can define the type definition\nWe have also imported two files List.tsx and AddToList.tsx and passed people and setPeople as props.\n3. In our List.tsx file\nwe can import and pass props with typescript\n4. In our AddToList.tsx file\n"
}, {
    "title": "React 18 Suspense minimal example",
    "tags": ["#react", "#javascript", "#redux", "#swr"],
    "link": "https://dev.to/vaukalak/react-18-suspense-minimal-example-3j0k",
    "reactions": 8,
    "cmt": null,
    "content": "In the current version of React (17.0.2 at the day of this article creation) Suspense is a component, that allows developers to lazy-load application parts. It accepts fallback property, with content to display, while the child component is lazy-loading.\nHowever from React 18 it will be possible to use Suspense for data fetching. This means, that fallback will be displayed until component will fetch all the data needed. Or in general all events that component expect will occur. Let say we want to just display placeholder for 2 seconds:\nAs you could guess, Loading... will be displayed for 2 seconds and Component loaded afterwards.\nHowever when I first saw the code above, I didn't understand HOW did that happen.. What is that magic mechanism in the useTimeout hook? In short it has to:\nTo stop code execution you need use throw statement. In order to make Suspense know it's expected, the value thrown need to be a Promise. Suspense will catch this promise and subscribe to it, to re-attempt rendering.\nPlease note: the code bellow is just for a demo purpose:\n(Confused about ||= ? Check this doc)\nIt turns out that suspense uses quite simple mechanisms, but there's a hard part. You might ask why fullfilled and promise couldn't be stored in a ref, so the hook would be reusable:\nIt turns out, that while component is not loaded, hooks can't be really used. Component will be unmounted / mounted on every render attempt before the render will complete without throwing promises. Hence to figure out, if this component has actually started data loading process, we should rely on a globally available cache. (In our simplified case it's just fullfilled variable). Of course in a real-world example such simple approach wouldn't work (this hook works only one time).\nThis is why it's advised to use good libraries that supports suspense (like swr).\nFull code of the example above.\n👋\n"
}, {
    "title": "React Interview - (Part 3)",
    "tags": ["#react", "#javascript", "#webdev", "#writing"],
    "link": "https://dev.to/atulbhattsystem32/react-interview-part-3-mmb",
    "reactions": 7,
    "cmt": null,
    "content": "So welcome🙂 again to another part of React Interview series. So we’re finally now into part-3. Before I thought to bind up this series into total of 3 parts but there are so many questions to cover because React also includes JS. So hopefully this series will have total 5 parts.\nSo let’s cut out the introductory crap and jump directly into some more React interview questions.\nI'll be wrapping up this part of the article here. I'll be glad to read you answers to these question in the comment section.\nAnd don't forget to mention your approach towards taking interviews. How you approach it? And I know there might be some flaws🥺 in asking these questions so you are free to point them out.\n"
}, {
    "title": "React Native tutorial video in ASMR style",
    "tags": ["#react", "#reactnative"],
    "link": "https://dev.to/tamasbtr/react-native-tutorial-video-in-asmr-style-39kc",
    "reactions": 6,
    "cmt": 2,
    "content": "YouTube:\nContinuous integration and delivery makes building amazing apps with React Native even easier, faster and way more efficient. Check out this quick ASMR video tutorial that explains how to onboard your React Native project on Bitrise: Automate everything from building your app, testing and deploying to Google Play or the App Store.\n"
}, {
    "title": "React Basics!",
    "tags": ["#react", "#javascript", "#webdev", "#beginners"],
    "link": "https://dev.to/ansub/react-basics-3j4i",
    "reactions": 17,
    "cmt": 5,
    "content": "💭 What is React?\n✨ Features is React?\n😌 Why Use React?\n🥺 Limitations Of React\n\teverything has some limitations and React is not an exception!\n\tFollow Me On Twitter\n\n"
}, {
    "title": "React Hooks: useState()",
    "tags": ["#react", "#javascript", "#beginners", "#programming"],
    "link": "https://dev.to/fig781/react-hooks-usestate-700",
    "reactions": 6,
    "cmt": null,
    "content": "What are React Hooks?\nThey are functions in React that allow you to add react functionality to function based components.\nWhat is the useState hook?\nThe useState hook is used to add state to a function-based component. The syntax will follow a common pattern:\nThis example lets you enter a value, then add it to a bulleted list:\nMore information can be found in Reacts official documentation: https://reactjs.org/docs/hooks-state.html\nLeave a comment if you have any feedback or questions.\n"
}, {
    "title": "React to the React App: How to hard reload your React Web App?",
    "tags": ["#react", "#javascript", "#webdev", "#webapp"],
    "link": "https://dev.to/wednesdaysol/react-to-the-react-app-how-to-hard-reload-your-react-web-app-3god",
    "reactions": 16,
    "cmt": 1,
    "content": "Good software development practices reduce the possibility of errors. But these pesky creatures still find their way in production. When a user runs into an error the webpage could crash and s/he would have to manually reload it. This leads to a bad user experience. A reload button in case of an error could help the user and nudge them into recovery. More specifically a “Hard reload button” i.e. a button that fetches the webpage from the server instead of the cache.\nThe error boundary of your web application is a good place to keep the reload button. In most React applications this is a component. It contains a fallback UI, with some text to nudge the user to reload.\nIn this tutorial, you will learn to:\nStarter Project\n\tWe’re going to use the Wednesday react template as a starter project. This is a project we use as a base across all the react projects at Wednesday.\n\tOpen the terminal and clone the repository.\n\tNavigate to the project on the terminal and run.\n\tOnce done run\n\tThis will start the react template. You should see the following on your browser.\n\tGreat going so far. You’re now ready to start making changes.\n\n\nThe Error Boundary\n\tThe Starter Project comes with a basic error boundary but we will begin by creating an all-new Error Boundary with a refresh button & a start fresh button.\n\tOpen the project in your text editor of choice.\n\tStep 1\n\t\tNavigate to the app/components/ErrorBoundary folder and replace the contents of the index.js file with the following.\n\t\tIt’s a lot to digest. I’ve left a few comments in the code to make it easy to understand.\n\t\tIn a nutshell this component shows the a button and some text when the error state is set.\n\n\nStep 2\n\tTo test your new component you're going to deliberately trigger an error in the App Container.\n\tOpen the app/containers/App/index.js file and replace the current App component with the one below.\n\tYour browser should now show the following.\n\n\nHard Reload\n\tYou now have all the building blocks in place. You have a component that will show up when an error occurs. You just need to write the logic to hard reload the page when the user hits the refresh button.\n\tStep 1: Uninstall service workers\n\t\tPaste in the below code in the handleRefreshClick function in app/components/ErrorBoundary/index.js\n\t\tThe above piece of code gets all the service workers currently installed for your web app and uninstalls them.\n\n\tStep 2: Clear the cache\n\t\tThe the following code to the end of the handleRefreshClick() function.\n\t\tThe above piece of code removes all browser cache entries.\n\n\tStep 3: Reload the window\n\t\tFinally, copy the following snippet and paste it at the end of the same function and add the async keyword before the function name.\n\t\tThis triggers the browser to reload the page. If you reload the webpage in your browser, it should now work as expected. Clicking the 'Hit Refresh' button will hard reload the page.\n\t\tYay! You’ve now created a button that can hard reload a webpage.\n\n\nWhere to go from here\n\tYou’re now able to hard reload webpages using javascript and implement it on your website. The Error Boundary we created here is very basic to keep the focus on the javascript bit.  When you do implement it in your website, remember to get as creative as possible i.e. design a much more helpful webpage, add animations, transitions. Have fun with it.\n\tI hope you enjoyed this tutorial as much as I enjoyed writing it. If this piqued your interest, check out other articles by Wednesday Solutions and tweet your comments at us.\n\tBy: Saksham Khatod \nOriginally appeared on https://www.wednesday.is/writing-tutorials/react-to-the-react-app-how-to-hard-reload-your-react-web-app-using-error-boundary\n\n"
}, {
    "title": "React - Don't update parent state in the rendering phase of the child",
    "tags": ["#react", "#hook", "#state", "#effect"],
    "link": "https://dev.to/tresorama/react-dont-update-parent-state-in-the-rendering-phase-of-the-child-h7c",
    "reactions": 5,
    "cmt": null,
    "content": "TLDR;\nDon't update parent state in the rendering phase of the child component\nLong story\n\tVisualize in your mind this Abstract React tree:\n\tThe goal is to render a single LoadingSpinner in our whole website, and being able to trigger the LoadingSpinner visibility from LoadingTriggerA and LoadingTriggerB when they need to.\n\tHow to solve this without passing functions down the tree - aka “prop drilling“ ?\n\tReact Context, using a \"useAppLoading\" custom hook.\n\tThis custom hook takes care of maintaining the visibility state of the Loading component, and to render it.\nThis hook exposes us a show and a hide function.\n\tIn this post we are focused not on the custom hook, but here you can find the code for build a \"useAppLoading\" custom hook.\n\tIt seams ok.\nBut how do we call \"show()\" and \"hide()\" functions ???\nThis is THE POINT of this post.\n\tMaybe like this ??\n\tTry yourself and you will notice that React javascript console triggers an error in the console saying:\n\tWhat this means is that, child component can't update one of his parents component's state from within the rendering body.\nThat's what this warning is telling you.\n\tThis is an Anti Pattern because if it was legal, there will be chances that data flow going crazy, and weird stuff will happen, like unnecessary re rendering  of the tree.\n\tIn our case the Parent is the AppLoadingProvider, which treat LoadingTriggerA and LoadingTriggerB as descendants.\n\tSo How to solve that ??\n\tUpdate the (parent) state inside an useEffect, because useEffect runs after the main rendering phase of a component.\n\tThank you for reading this blog post.\nNot clear ? Question ? Ask in comments !!\n\n"
}, {
    "title": "React CRUD operations using PHP API and MySQL",
    "tags": ["#react", "#php", "#mysql"],
    "link": "https://dev.to/durgeshsahani/react-crud-operations-using-php-api-and-mysql-13da",
    "reactions": 27,
    "cmt": 2,
    "content": "What we are going to learn?\nWhat is ReactJs?\n\tReact is a free and open-source front-end JavaScript library for building user interfaces based on UI components. It is maintained by Meta and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications. Here is the official website of ReactJs https://reactjs.org/.\n\tTo create react app you’ll need to have Node >= 14.0.0 and npm >= 5.6 on your machine.\n\nWhat is NodeJs and NPM?\n\tNode.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser. You can download from official NodeJs website: https://nodejs.org/en/. NPM will get install along with NodeJs. NPM is the default package manager for the JavaScript runtime environment NodeJs.\n\nWhat is Homebrew?\n\tFor mac you can also use Homebrew to install it on your machine. Homebrew is a free and open-source software package management system that simplifies the installation of software on Apple’s operating system, macOS, as well as Linux. The name is intended to suggest the idea of building software on the Mac depending on the user’s taste. here is the official website https://brew.sh/\n\tInstall Homebrew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\tInstall NodeJs\nbrew install nodejs\n\tCreate ReactJS APP\nnpx create-react-app react-crud\n\tnpx is not a typo — it’s a package runner tool that comes with npm 5.2+.\n\tCreate React App doesn’t handle backend logic or databases; it just creates a frontend build pipeline, so you can use it with any backend you want. Under the hood, it uses Babel and webpack, but you don’t need to know anything about them.\n\tRun react app\n\tNow visit to following link you should be able to see ReactApp running:\nhttp://localhost:3000/\n\tTo create RestFull API, we’ll be needing PHP, MYSQL and Apache. You are free to install each software separately and configure them or use stacked app. In my case I’m going to use MAMP(Mac Apache MySQL PHP) which is design for mac and comes with all required softwares\n\nWhat is PHP?\n\tPHP is a open-source general-purpose server side scripting language that is especially suited to web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1994. The PHP reference implementation is now produced by The PHP Group.\n\nWhat is MySQL?\n\tMySQL is an open-source relational database management system. Its name is a combination of “My”, the name of co-founder Michael Widenius’s daughter, and “SQL”, the abbreviation for Structured Query Language.\n\nWhat is Apache?\n\tThe Apache HTTP Server is a free and open-source cross-platform web server software, released under the terms of Apache License 2.0. Apache is developed and maintained by an open community of developers under the auspices of the Apache Software Foundation.\n\nStacked Application\n\tWAMP for Windows\nhttps://www.wampserver.com/en/\nLAMP for Linux\nhttps://bitnami.com/stack/lamp/installer\nMAMP for Mac\nhttps://www.mamp.info/en/mac/\nXAMPP: Open Source, Cross-platform\nhttps://www.apachefriends.org/index.html\n\tAwesome now we are all set to start. Open you project to your favourite code editor in my case I’m using Visual Studio Code.\n\nCreate Link and Handle Routing in React | react-router-dom package installation\n\tCreate new directory components under your src/ directory and create 3 new components which we’ll update shortly:\nsrc/components/ListUser.js\n\tsrc/components/CreateUser.js\n\tsrc/components/UpdateUser.js\n\tNow let’s Install react router for creating link and configuring routes\nnpm install react-router-dom\n\tUpdate App.js for handling routing\n\nCreate database in PHPMyAdmin and design form in React Component\n\tCREATE DTAABASE react_crud;\n\tUpdate src/components/CreateUser.js\n\nCreate PHP API and consume using axios | handle CORS issue on localhost\n\tInstall axios for making API calls from ReactJs\nnpm install axios\n\tNow update your src/components/CreateUser.js file again for making POST API call\n\tCreate PHP file for writing API and name it index.php\n\tNotice at the top we have added headers to solved CORS issue.\nAlso, Let’s create .htaccess file to handle pretty URLs like PHP lumen framework, and add following line inside.\n\tHoola, Finally our API file is ready.\n\nConnect MySQL database using PDO | Access React form data and Save in Database\n\tNow, Let’s create a database connect file and name it DbConnect.php and add following code snippet inside. Update credentials as per yours and it will connect to your database using PDO(PHP Data Object).\n\tCreate POST API\n\nCreate GET PHP API and consume in React using axios | List in react table component\n\tUpdate src/components/ListUser.js\n\tUpdate index.php file for adding new GET API to get all users\n\tLoad user details for edit form and create PHP PUT API to update user data\n\tUpdate src/components/UpdateUser.js\n\tUpdate get method to return specific user details by ID\n\tNow create update API to Handle PUT request\n\nCreate DELETE PHP API, consume it using axios and delete user from database\n\tUpdate src/components/ListUser.js\n\tUpdate index.php again for writing delete API\n\tAwesome, you have just completed REACT-CRUD using PHP and MySQL, Now run you application and build something beautiful.\n\tYou can download complete source code from GitHub:\nhttps://github.com/durgesh-sahani/react-crud-php-api-mysql\n\tThank you for reading this blog.\n\n"
}, {
    "title": "React + GreenSock Integration",
    "tags": ["#react", "#gsap", "#greensock"],
    "link": "https://dev.to/chris_daniel/react-greensock-integration-in0",
    "reactions": 27,
    "cmt": 3,
    "content": "React + Greensock\n\tI will explain you how to integrate GSAP animations to React application.\n\tdemo: GSAP\n\tUsing create-react-app create your react application setup.\n\tNow the react application setup is done, we have to add green sock for animation.\n\tNow you can see the react icon spinning with the help of css animation. We have to convert it to GSAP.\n\tChange App.css. We are removing all the animations.\n\tIts time to add GSAP animation ...\n\tTo add animation to an element using GSAP we need a reference for the element in react. I'm going to use useRef() hook.\n\tNow I will show how to get reference to the element using callback ref\n\tYou can see the element in the console.\n\tTweenMax in a animation util from greensock. To learn more about TweenMax visit tweenmax.\n\tInorder to rotate the div we have to use\n\tNow we can add the animation when the component mounts.\nHere is the final version\n\tThe full code is available on github github repo\n\n"
}, {
    "title": "React Router DOM v4 Tutorial (with Examples)",
    "tags": ["#react", "#javascript"],
    "link": "https://dev.to/techiediaries/react-router-dom-v4-tutorial-with-examples-dok",
    "reactions": 6,
    "cmt": null,
    "content": "\nIntroduction\n\tIn this tutorial we are going to get you started with react-router-dom using an example React application showing you how to use different concepts such as Link and NavLink for creating links (instead of anchors) in the React way, Switch and exact for enabling exclusive routing and browser routing history.\n\tPerhaps the most suitable way to see how React Router v4 works is by writing a simple multiple-page React app using the new router concepts. Our example app will have routes to home, about, contact, login, register and profile components/pages. But first lets have a tour of React Router v4 concepts and how they differ from React Router v3?\n\nReact Router v4 vs React Router v3\n\tBefore v4 there was React Router v3 , React router v4 is a complete re-write so what's the difference between these two React routers? here is a summary list of most differences:\n\tReact-router-dom is the version of React Router v4 designed for web applications, React Router v4 was divided into three packages:\n\nreact-router vs react-router-dom vs react-router-native\n\treact-router hosts the core components for routing for React applications, react-router-dom provides browser specific components for routing web apps and react-router-native provides specific components for react-native or mobile apps created with React Native. So you should either install react-router-dom or react-router-native as both export their corresponding environments components plus what react-router exports.\n\nInstallation\n\tSince we are building a web application not a native mobile app we need to install react-router-dom package, so inside your React project run the following command using your terminal (Linux or MAC) or command prompt (Windows):\n\nUnderstanding and Using Routers\n\tBrowserRouter vs HashRouter\n\t\tThere are many types of Router components, among them < BrowserRouter > and < HashRouter > for client side React apps. If you are using a dynamic server that can handle dynamic URLs then you need to use the BrowserRouter component but if you are using a server that only serves static files then a HashRouter component is what to be used in this case.\n\n\nUnderstanding and Using Routes\n\tThe < Route > component is one of the most useful components of React Router v4 and the idea behind it is simple, wherever you want to render something when only there is a match with the location's path you can use a Route component.\n\tThe Route component takes many properties such as:\n\tThere are two other properties which can replace the component property to tell the Route component what it needs to render when there is a match:\n\tMost of the times, you will use component propery but there are also many situations when you'll have to use either render or children properties instead. Thre three methods will be passed these three props:\n\tFor example:\n\tUsing component:\n\tWill render the HomePage component when browser's location path matches exactly /.\n\tUsing render:\n\tFor inline rendering:\n\tFor wrapping:\n\tUsing children:\n\tFor more information about how React Router v4 matchs paths see path-to-regexp the module used for matching paths.\n\nURL/Path/Route Parameters\n\tUsually there are variable parts of the pathname used to pass information between diffrent routes of an application so how do we capture these variables and pass them to components? We can just append the name to be used for the variable plus a colon : to the end of the route's path, for example:\n\tWhen there is a path match an object which has the following properties will be created and passed to the component:\n\nUnderstanding and Using Links\n\tLinks are React Router v4 components designed as a replacment of anchor links to create navigation elements which enable users to navigate between differenet pages of React apps. Unlike anchors ,which reloads the whole page, Links only reload the portion(s) of the UI that match(s) the browser's location path.\n\tA Link component takes a to property which tells React Router the destination to navigate to. For example:\n\tWhen clicked will take us to location with path: /\n\tthe to prop can either take a string or a location (pathname, hash, search, and state) object, for example:\n\tLink can take also another property: replace if True , when clicked the link entry will be replaced in the history.\n\n< Link > vs < NavLink >\n\tNavLink is a subclass of Link which adds styling information to the rendered element(s), for example:\n\nWriting our First Example with React Router DOM\n\tNow lets write an example React app which shows you how to use BrowserRouter to implement routing.\n\tFirst we import the necessary routing components such as Route and BrowserRouter\n\tNext we create the base layout component, besides common HTML tags we also use React Router v4 components Link and Route :\n\tNext we create our pages:\n\tAnd finally we create the App component which BrowserRouter component to hold our base layout component then render the app.\n\tAs you can see, it's very easy to use the React Router v4 components to create apps with routing.\n\nUnderstanding Inclusive Routing\n\tIn our example app we used the prop exact in the Route for component HomePage\n\tThat's because React Router v4 uses inclusive routing instead of exclusive routing used by React Router v3 so without exact property the home component will be rendered with all other components, for example when the user visits /login path both / and /login paths will be matched and their corresponding components LoginPage and HomePage will be rendered. But that's not the behavior we are looking for, that's why we need to add the exact prop which tells the Route component to match exactly the / path.\n\tNow lets see how we can use inclusive routing in our advantage, lets suppose we have a sub-menu component that needs to be available only when we are on the profile page We can easily change our basic layout to add this requirment:\n\tSo as you can see all Routes with path '/me' will be rendered when we visit '/me' path not just the first match, that's inclusive routing.\n\nUnderstanding Exclusive Routing\n\tExclusive routing is the inverse of inclusive routing, it was the default routing in React Router v3 where only the first match is rendered so what if you want exlusive routing back? that also can be done using v4 router using the Switch component. In a Switch component only the first child < Route > or < Redirect > , that matches the location, will be rendered. For example:\n\nBrowser History\n\tReact Router v4 provides a history object that exposes a simple API with different implementations (HTML5 history API for dom, legacy hash history for dom, in-memory history for react-native) to manage/manipulate browser history.\n\tYou can also navigate inside your React application using methods from the history object, for example:\n\tWhich are equivalent to:\n\nHow to Redirect with < Redirect > Component\n\tWhenever you want to redirect to another location, you can place  component which is when rendered will redirect to the location specified in to prop that can either be a string or a location object, for example:\n\tOr simply:\n\nConclusion\n\tReact Router v4 makes it dead easy to create React apps with complex UIs that has routing between different portions, you can simply declare a Router component such as BrowserRouter or HashRouter and put,inside of that, a bunch of child Route s components that has props which indicate the path to be matched and the component to be rendered inclusively whenever there is a match (i.e all matched Route s will be rendered). In case you need to do exclusive rendering (Just like React Router v3: i.e only the first matched Route will rendered) then you can simply use a Switch component where only one child (the first found) will be rendered. You can also pass different information between routes using parameters that can be captured and retrieved from the match object which gets created once a match is established and then passed to the current rendered component. Finally all building blocks or components of React Router v4 designed for web apps routing are available and can be imported from react-router-dom.\n\n"
}, {
    "title": "React basic CRUD app with Firebase Realtime Database - Hands-on",
    "tags": ["#react", "#cloud", "#crud", "#javascript"],
    "link": "https://dev.to/adrianosastre/crud-react-basic-app-with-firebase-realtime-database-hands-on-15hh",
    "reactions": 6,
    "cmt": null,
    "content": "Hi, I'm Adriano Sastre Vieira, software developer.\nToday we're gonna build a basic React app, that connects to an API and perform the basic CRUD operations: POST, GET, PUT, DELETE.\nI assume you have Node / npm / React installed and configured on your machine.\nGoogle Firebase Realtime Database\n\tAs this is a CRUD POC, in order to run this project successfully, we need to have an API that provides the CRUD operations. Google Firebase is real handy to help us with that.\n\tIn order to configure it, please login to https://firebase.google.com (create the GCP account if you don't have one) and go to Console at https://console.firebase.google.com/. After that, follow these simple steps:\n\t1 - Create a Project\n2 - Create a Realtime Database (don't forget to select \"Init on test mode\" so you have access to the APIs)\n\tEt voilà, you have a realtime database URL that looks like \"https://--default-rtdb.firebaseio.com/\" and it is super powerful, in summary realtime database is a serverless no-sql database that already provides and API with all CRUD operations (POST, GET, PUT, PATCH, DELETE) on the fly!\n\nAbout React - A brief summary\n\tReact, a \"Javascript library for User Interfaces\", is a very popular free and open source library, and it allows developers to organize the way we use modern javascript to make the glue between HTML and CSS.\n\tIt allow us to build \"Single Page Applications\", aka SPA, giving the web app a more fluid, \"reactive\" look and feel, similar to mobile native apps. In other words, no more request, loading, response during the user experience on the web.\n\tOnce the team learn React, we are more productive and produce less error-prone code, by not using a javascript imperative approach, but declarative approach instead (e.g. instead of document.querySelector(‘button’)… we add extra attributes onClick to a button pointing to a function (to react to that element).\n\tIt is also good to follow some conventions (directory and files naming for example) when programming with react, as we'll see with this project.\n\tThe basics of React are the Components - the “Building blocks”, that allows us to make reusable and more easy to maintain code. Components should be focused on 1 thing only!\n\tComponents files usually contains a javascript function, exported as default, and the convention is that the files and function name are the same and starts with Capital letter, and are stored under a \"components\" folder (subfolders can be created to organize the project).\n\tThe components functions have the props attribute, that helps enabling dynamic content. props.children is useful on wrapping components.\n\tThe components functions returns JSX code - similar to html code, but its attributes are from plain javascript and not html, e.g.: className instead of class. On JSX code we can use curly braces ({}) in order to embed single-line-expressions javascript into ‘html’ code.\n\tWhen it comes to Styling, we can create a Component.module.css file and import it on the component with \"import classes from ‘./Component.module.css’;\" so we can use this file's CSS classes only on the current Component.\n\tReact also provides some hooks, for example the useState hook, very useful to make our pages more dynamic, for example while we're loading asynchronous data from an API. There are others useful hooks, like useEffect and useHistory.\n\tIn order to change \"pages\" in our SPA React application without using the traditional request-response way, we can use the react-router-dom lib in order to implement a Router for our app.\n\tWith a Router, even on a single page, we have the illusion that the page changes, but the app stays fast and reactive, comparing to a new request/response. Router pages are react components, but loaded by the Router, and the convention is to save them on a ‘/pages’ folder.\n\tThat's basically the things we used on this project.\n\nOpen project on Visual Studio Code\n\tThis project was implemented with React 17.0.2 and javascript, and is public available on github:\nhttps://github.com/adrianosastre/react-crud-app\n\tPlease clone and open it on VS Code, and look at these important chunks of code:\n\t1 - API Endpoint configuration:\n\tRename the \".env.example\" file to \".env\" and configure the REACT_APP_API_URL key to your created realtime database URL.\n\t2 - This Project structure:\n\tThis React CRUD project was created with the \"npx create-react-app\" command, and cleaned so only files that matters for this article was maintained.\n\tCurrently, it contains the basics for using React, and you can navigate the project noticing the following:\n\ta. The project organization (folders, names convention)\nb. The use of Routing (react-router-dom)\nc. The components (how to pass values to children and parents components; wrapper components...)\nd. The use of JSX on the components\ne. Basic CSS styling, flex layout\nf. React states and other main hooks\ng. Interacting to the realtime database API data by using the fetch javascript API.\n\nRun!\n\tRun you project with the \"npm run start\" command and enjoy!\n\tThe project CRUD are \"Things\", so the first time the \"Things List\" is clicked you see an empty list (that makes sense because your realtime database is empty):\n\tClick on the \"Add Thing\" link, fill in the form and click on the \"Add Thing\" button:\n\tOnce the \"think\" item is created, the app goes to the things list page:\n\tClick on the card to view its details:\n\tFrom the details page you can edit or delete the thing item.\n\n\n\n\n\nThat's it!\n\tThanks, I hope this was helpful, and I'm available for any comments or questions here or via adrianosastre@gmail.com\n\n"
}, {
    "title": "React.js localStorage library showcase",
    "tags": ["#react", "#javascript", "#typescript", "#showdev"],
    "link": "https://dev.to/romeerez/reactjs-localstorage-library-showcase-5gj",
    "reactions": 5,
    "cmt": null,
    "content": "localStorage is used almost in every React project, but is it easy to manage it, do we need a lib for this and what do we have?\nThere are popular ways of handing auth: one way we store JWT token in localStorage, in other way we store it in httpOnly cookie which is more secure. But even in second way it still makes sense to store authorizedUserId id or at least isAuthorized boolean in localStorage to not make redundant requests to a server side later, remove it when logging out or when server responds with '401 Not Authorized' code.\nIf after performing authorization request we simply set a value of authorized user to the localStorage, other components won't be updated automatically, because React is not aware of state change.\nHow localStorage is usually handled in React\n\tOne popular option is Context API, documentation even says it's good for storing current user (here).\n\tAnother popular way is to use a state manager.\n\tWhy I'd like to avoid both of them:\n\nThe simplest solution\n\tHere is my library: react-local-storage-manager\n\tLet's consider example of storing authToken:\n\tfirst, create a separate file for a 'store', it may be named auth.store.js or as you like:\n\tAnd now it's so easy to get, set, use:\n\tWith the library values are read, parsed and validated only when accessing them and only for the first time, second time it will get value from cache. Validation is enforced to not be forgotten, multiple tabs will be synchronized.\n\tTo see it in action check this codesandbox, one more example of shopping cart is in readme on github.\n\tPlease share you thoughts!\n\n"
}, {
    "title": "React.js: The one way and the opposite way data flow",
    "tags": ["#react", "#javascript"],
    "link": "https://dev.to/ridhamz/reactjs-the-one-way-and-the-opposite-way-data-flow-28k3",
    "reactions": 16,
    "cmt": 6,
    "content": "Introduction\n\tThe one way and the opposite way data flow are two important concepts you need to understand as a react developer, also they are two interview questions that often ask.\n\nThe one way data flow\n\tAs you know in react we use state to store data in a  specific  component and if this component has children we pass the state from the parent component to the child component as props.\nThe concept of passing props is called one way data flow or uni-directional data flow because the props or data can only flow from the top to the bottom, means from the parent to the child.\n\nThe opposite way data flow\n\tThe opposite way data flow is about passing props from child to parent.\n\tWhen it comes to this concept, react doesn't provide us a shorthand syntax for handling opposite data flow.\nThat's because we can't pass props from a child component to a parent component, but we can implement it in our selves.\n\tLet's start by creating a simple parent component contains :\n\tThe search input will exist in a separate component called SearchInput.\n\tCombine the two components :\n\tWith tis implementation we will get nothing in the console when we click the button.\nThat's because when we type in the search input the search state that exists in the SearchInput component will change not the one that exists in the Search component.\n\tNow we are stack because there is no way to pass the state exists in the child to the parent.\n\tTo handle this situation, we need to remove the state and the handleChange from the SearchInput and pass them as props from the Serach component.\n\tNow, when we type in the search input, the value pass as props to the Search component via the handleChange.\nIt means that the data flows in the opposite way.\n\nConclusion\n\tThis is all about the one way and the opposite way data flow, I hope you enjoyed ❤️.\n\n"
}, {
    "title": "React Router's useRoutes hook",
    "tags": ["#react", "#javascript", "#beginners", "#programming"],
    "link": "https://dev.to/dauntless/react-routers-useroutes-hook-38fc",
    "reactions": 33,
    "cmt": 2,
    "content": "When creating multi-paged apps with React or any other library/framework, a package to handle routing is always used. Whether it is Vue Router for Vue apps, React Router for React apps, etc. Today I'm going to emphasize implementing routes in React using React Router's useRoutes hook.\nPrerequisites\n\tAlthough I will try my best to make this easy enough for a beginner to understand, I advise that before going further you at least have basic knowledge of React and have at least seen React Router used in an application. If you have no experience with React Router, you could look at the documentation first. They give really clear examples that will get you up to speed in no time.\n\nApproach 1: Using the <Routes> and <Route> JSX components\n\tThis is the primary way of rendering something using React Router and the approach that would be seen used in many places. Hence, I won't dwell much on the syntax of this but drop the example which will be used in the rest of this article.\n\tMainLayout.js\n\t\tThis is a layout component for any page that is not an authentication page.\n\n\tHome.js\n\t\tThe other pages used in this example were defined in a similar way as Home.js. You can look at the sandbox to see them for clarity. These however form the main elements of the example.\n\n\tApp.js\n\t\tYou can read more about this in React Router documentation here. The <Routes> component acts as a wrapper for all possible routes that can be matched. The <Route>  carries an element in its element attribute. If the content of its path attribute matches the current URL, it renders the content of the element attribute. As location changes a user navigates the app, the corresponding elements are rendered.\nTo make this example as comprehensive as possible, I took the routing from a side project I am working on and it has one kind of route which won't be in a basic example of routes - Layout Routes. A layout route is a parent route without a path attribute used to group child routes under a specific layout. For more on this and other major concepts of React Router have a look at this part of the documentation. It's a bit lengthy but it will get you up-to-speed with the lingo quickly.\n\n\n\nApproach 2: Using the useRoutes hook\n\troutes.js\n\tApp.js\n\t\tThe other components are defined the same way as in the previous approach. You can look at the sandbox below to see it all in one cohesive example.\n\t\tNote that for clarity and separation of concerns in writing code, I do not declare the object-based config in the same file as to where I want to use the routes. In my project, I created a folder called routes and a file called index.js to hold the routes. Another common convention I have seen devs do is to create a file in the src folder called routes.js and put it all there.\n\t\tSo let's look closer at what is happening in the **routes** file. The routes are inserted as objects in an array, with each object representing one route. The object has keys and values similar to the attributes and values of the <Route> component. To account for nested routes, the object has an optional third key known as children that allows you to list all child routes of a specific route. The nesting can go as deep as your application requires it to be.\n\t\tThe return value of the **useRoutes** hook is either a valid React element or **null** if nothing matched. Once you are done creating the routes, you then add them to your app in the same place you would have added the **<Routes>** and **<Route>** components which for me is my **App.js** file:\n\t\tThe routes.js file is imported in App.js and added just as you would any other component. It was created in a functional component, after all. Remember that hooks can't be used outside of functions and that is why it was declared inside of one. If I intended to use it in App.js, I would've declared it inside the function as well.\n\t\tThere aren't any clear benefits of using one approach of routing over another, it all depends on the preference of the developer or team and the use case. For me, abstracting the route config using the hook made it easier for me to understand and anyone visiting my project.\n\n\n\n\n\n\n\nResources\n\tFor a closer look at the code used in this article, you can visit these two sandboxes;\n\tuseRoutes Example\n\tRoutes JSX Example\n\n"
}, {
    "title": "React.js vs. React Native. What are the Key Differences and Advantages?",
    "tags": ["#react", "#reactnative", "#webdev"],
    "link": "https://dev.to/flatlogic/reactjs-vs-react-native-what-are-the-key-differences-and-advantages-45i",
    "reactions": 3,
    "cmt": null,
    "content": "Intro\n\tReact and React Native are two open-sourced technologies for building user interfaces. They both were developed by Facebook and gained great recognition among frontend developers for their opportunities to create interactive UIs. In the article, we describe these two technologies and explain their differences.\n\tReact or ReactJS is a JavaScript library that is used for building user interfaces especially for the web. React uses *declarative programming, that allows developers to design a simple view for every state and then delegate the responsibility of keeping the app views consistent while you have to worry only about the state.\n\tCheck out React Admin Templates!\n\tReact is a component-based library which means that you can build several reusable components and then use them for building the complex UI of the app, while React takes care of the rendering of UI components. Applications built with React can change data in separate parts of the page without a full page reload. It provides support for both the frontend and server-side.\n\tReact Native is a framework for building native cross-platform applications for Android and IOS using React. React Native compiles native code that allows you to create truly native mobile apps with natural user experience for Android and IOS.\n\tCheck out React Native Starter!\n\tSome facts about ReactJS:\n\t\tRanked 2nd and 1st on StackOverflow Developer Survey Results in 2020 in the categories Most Loved and Most Wanted Web Frameworks respectively.\n\t\tRanked 2st as the most popular Web Framework among professional developers in 2020.\n\t\tFrom 2016 till 2019 (the latest survey) ReactJS Ranked 1st on Awareness, interest, and satisfaction ratio rankings.\n\t\tIn 2020, React has 157 k stars on GitHub, making it the #2 most popular JavaScript project after the Vue library.\n\t\tThere are about 1 004 379 websites using React all around the world.\n\t\t60 608 developers on StackShare have stated that they use React In 2020.\n\t\tAbout 9 000 companies reported that they use React in their Tech Stack, including Uber, Airbnb, Facebook, Netflix, Instagram, Amazon, Twitter.  The median of React developer salaries in the USA is 120 000 $ per year. The most skilled developers get up to 160 000 $ per year.\n\n\tSome facts about React Native:\n\t\tReact Native is in the 5th place on StackOverflow Survey 2020 in the category of other most popular frameworks, libraries, and tools among professional developers.\n\t\tReact Native goes with 90,5 k stars on GitHub.\n\t\tAbout 1400 companies stated they use React Native in the development.\n\t\tThe most known mobile apps that were built using React Native are Skype (before React Native was replaced by Electron in June 2020), Facebook, Instagram, Pinterest, Bloomberg, Discord, Tesla.\n\t\t13,5 k developers on StackShare noted that they use React Native in 2020.\n\t\tThe average salary in the USA for React Native developers is 121,875 $ a year. The most experienced developers can claim up to 200 000 $ per year.\n\n\nReact vs React Native – key differences\n\tHow to start and what you need\n\t\tSince React is a JavaScript library, all you need to start work with it is to plug React library in the HTML page in  tag:</p>\n\n<p><em><script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin>\n\t\tThat’s all. https://reactjs.org/docs/add-react-to-a-website.html Then you can create your first React Component and add it to your HTML website.\n\t\tThe only other thing you need to work with big projects is a bundler. If you use for new projects instruments like a create-react-app command, Next.js, or Gatsby framework, you will already have a configured Webpack to bundle your application. Otherwise, you will need to configure a Webpack yourself.\n\t\tBundlers compile all imported files with code into one large and complex file. Besides Webpack there are other bundlers such as Rollup or Browserify.\n\t\tReact-Native is a framework, so you need an installed development environment like Xcode for iOS or Android Studio for Android.\n\t\tDepending on your development OS you need to install additional tools like Node, the React Native command-line interface, a JDK, Watchman, etc. After that, you can start a new project just with one line in the React Native CLI. To see the created app you should either run a mobile simulator or use your own devices.\n\t\tSince you install a full-fledged framework it comes with a lot of developer tools out of the box such as Hot reloading which allows you to inject new versions of the files that you edited at runtime keeping the app running. That becomes especially helpful if you are tweaking the interface.\n\t\tThe migration from ReactJS to React Native is not a complicated thing. If you are familiar with React and JavaScript it takes several months to get used to the React Native framework and build your first native app, it is just a different way of using React.\n\n\tThe base of technologies\n\t\tReactJS is just JavaScript (and TypeScript a little), there are no additional things you need to know. Your skills in JavaScript allow you to become a good React developer in a few hours when you get acquainted with the technical documentation. React focuses on one thing: building interactive User interfaces for the web via JavaScript.\n\t\tReact Native is a framework that uses React.JS for building mobile user interfaces. It comes with all the advantages that React.js brought you and uses declarative components just like React.\n\t\tBut React Native is not a pure JavaScript framework, it also contains Java, C++, Objective-C, Objective-C++ code. That fact is essential because the diversity of used languages allows us to build native components that are in fact native. Let’s find out what it means.\n\n\tReact Native bridge or how we get native components\n\t\tReact uses HTML, CSS, and JavaScript.\n\t\tKeeping that in mind we have two options on how to create a cross-platform app:\n\t\tIf we want to build a native app with React and chose the second option we use ReactDOM.Render () command and try to mimic native elements, but the result usually feels a little off because of the small details in UI that feel wrong.\n\t\tIn contrast, React Native doesn’t try to mimic native elements, it creates a bridge between the Native Language and the JavaScript code. It calls the native functions and components inside a mobile environment. React Native has an access to all native views and components, and to about 70 specific device APIs by default. It leverages native tools for rendering views of the platform from which the app was run.\n\t\tAs a result, when we write with React Native, we build native UIs. After the compilation of the code all views in JavaScript become native components. Thus we create UIView instances as if we use platform-specific languages (Java or Objective C).\n\t\tBut how does React Native create native instances?\n\t\tNowadays we work with compilers that have been designed to target their own specific platforms. Thus the compiler of Java / Kotlin code targets the Android platform, the compiler of Obj-C / Swift targets the iOS platform. These compilers work just great because they were developed for a specific purpose (to create optimized artefacts for a certain platform). React Native also has such a purpose: it uses existing compilers to create native UIs.\n\t\tReact Native makes a connection between two realities, JavaScript and Native.\n\t\tIf we need to manage communication between two different languages/platforms we use interoperable languages, such as JSON or XML. React Native provides such a bidirectional and asynchronous communication between JavaScript and Native elements with the bridge concept. Even though the technologies are different, they can communicate.\n\t\tThe bridge is built in C/C++ and can be run on any platform or OS. It means that you can run JavaScript code inside a C/C++ program, inject variables, functions, and declare globals to enhance existing code. That, in turn, provides JavaScript the opportunity to communicate with native reality and trigger actions in the C/C++ world.\n\t\tSo, our JavaScript code uses existing compilers and generated native components and interfaces with native features. That is why React Native developers claim “Write once use everywhere” – you write the code in JavaScript and then use it on different platforms just like if you write with native languages. We speak not only about the mobile environment but about building desktop applications as well.\n\t\tOne more significant thing to know is that you don’t need to write the whole code in JavaScript. Sometimes it’s better to write components directly with native languages. Some reasons for that:\n\t\t-- You have a feeling, that the communication through the bridge slows the app down and you want to improve the performance of the app. It is a rare case, however, sometimes happens.\n-- In cases when implementation in JavaScript takes hundreds of lines of code, while with native languages the code is no more than a hundred.\n\n\tVirtual DOM\n\t\tDOM (document object model, also known as real DOM) is a tree-like object model for an HTML webpage. Objects are HTML elements like\n\t\tReact has changed the rules of the game and brought us such a thing as virtual DOM, an abstract copy of real DOM. Virtual DOM can refresh the separate parts of the page without the need for the full page reload.\n\t\tReact has a copy of the real DOM structure. When changes occur, it tracks the differences and updates the browser’s displayed DOM in places that are not match the saved virtual copy without influencing the rest of the UI.\n\t\tThat is why React is awesome at creating dynamic user interfaces.\n\t\tFurthermore, virtual DOM is about the efficient re-rendering of the real DOM. React doesn’t check all the values in a data structure at a regular interval, it instead knows when and where to re-render the app because it observes the state of your components. React can simply track state change events and then queue up re-rendering.\n\t\tSo the virtual tree is re-rendered only when the state changes. It allows us to avoid a lot of unnecessary tree updates and keep the app performance high by updating elements with an altered state. For other diffs of the tree, if nothing has changed, we do nothing. That occurs behind the scene: we don’t have to do manual DOM manipulations, we don’t have to check the previous DOM state, we don’t have to re-render the entire page every time some components change. We need to declare what we want from the user interface and React takes care of the rest.\n\t\tReact makes it possible because it was developed in such a way that reconciliation and rendering are separate phases. The reconciler computes which parts of a tree have changed, while the renderer is responsible for updating the app based on that information.\n\t\tAnd this is where we come to React Native. Since React Native is based on React, it has similar opportunities including efficient re-rendering of the app. But both React and React Native use their own renderers while sharing the same reconciler, provided by React core. React Native uses native APIs for Android and iOS to render components on mobile while React utilizes HTML and CSS markup for the web.\n\n\tThe syntax\n\t\tWhen you use React you write in JavaScript. Then React.js renders Html-like components with tags typical for HTML coding. You can optionally use a special syntax extension for JavaScript that is called JSX. JSX is a syntax that looks like a template language that doesn’t separate logic and markup. That means that you put markup in JS, which may seem incorrect at first glance, but React claims that this practice is not as bad as it looks like. After compilation, there will be no JSX code, only regular JavaScript functions and objects.\n\t\tWhen you use React Native you have to familiarize yourself with its specific syntax. Instead of rendering Html-like components, React Native renders native components with tags like , , , etc. Here is a code sample to display “Hello, world!” for React and React Native:\n\t\tFor ReactJS:\n\t\tFor React Native:\n\t\t\tReact Native doesn’t use HTML and therefore it is not used for web development. Instead, with React Native you can develop apps for mobile (iOS, Android), smart devices (watches, TVs), augmented reality, and more, because used in React Native tags like ,  compiles into native languages.\n\t\t\tHowever, that also means that you can’t use any libraries that render any kind of HTML, SVG, or Canvas.\n\t\t\tOne more thing to know about React Native is that all container elements are Flex containers by default. To manipulate content inside the containers there is a bunch of different options for Flex layouts like justifyContent, alignItems, alignSelf, etc. You don’t need to write code for content management, just take Flex options and use them.\n\t\t\tBuilding responsive apps using Flexbox can be strange a little if you work with CSS before, but Flex layout is quite a simple and convenient thing to use once you got a basic understanding of how it works.\n\t\t\tYou can use Reactjs or React Native either to develop an app from scratch or to add a single view or component to existing applications.\n\n\n\tNo animation and CSS\n\t\tWe’ve already mentioned that React Native doesn’t use HTML. Well, React Native doesn’t use CSS either.\n\t\tReact Native uses StyleSheet API to style components. And it looks similar to CSS, but not exactly the same. Here is an example:\n\nTo get options we used to (such as style override) we need to look for alternative solutions than CSS offers. For example, you can override background color in the previous code sample by adding a subcomponent like that:\n\nAnd then apply it to the element:\n\nHowever, if you really need CSS or you just like the way it works, you can use styled-components that allow you to write actual CSS code if JS files. After compilation CSS text converts into a React Native stylesheet object.\n\t\tFurthermore, without CSS there is no standard way to animate your components. With React Native you have to learn a new tool that is called Animated. Animated is a library that provides smooth and fluid animation where you can combine serial and parallel animation, handling gestures and other events, and do pretty crazy things in general. It is similar to a very popular JavaScript library Velocity.js.\n\t\tAnimated works outside of React, directly updating native components. React Native also offers to use the native driver that allows performing the animation on the UI thread without having to go through the bridge on every frame.\n\n\tComponents\n\t\tReact is a component-based library. A component is a JavaScript class or function that returns a React element and declares how a certain part of UI should look like. There are two types of components in React.js: function components and class components. When you use function components you write JavaScript functions:\n\nYou can also define the same component with ES6 classes:\n\nYou can write an app with the same functionality using both types of components. Class components have much more feature than function components, however, it’s easier to read the code written with functional components, the code contains fewer lines, and there is a slight boost in the app performance.\n\t\tReact Native comes with Native Modules and Native components from which developers build apps.\n\t\tNative UI components are ready-to-use widgets that either is a part of the platform or are available as third-party libraries. If you need a certain component, you can look for that in UI explorer. You can also create your own component and then reuse it in different parts of the app.\n\t\tA Native Module is just a set of javascript functions that give access to platform API when React Native doesn’t have that required module yet or when React Native doesn’t support a native feature that you need. To build your own module you can use some tools that help to start:\n\n\tSEO\n\t\tDevelopers use Reactjs to make web apps, which means you have to keep SEO optimization in mind. However, the main feature of Reactjs is to provide dynamic user interfaces, that is the content of web pages changes depending on user actions. Google bot is not a user. Even though it can run scripts and hence to see the valuable information that gets our app higher in Google search results, we need to help Google bot to index our web page correctly.\n\t\tReactjs and its community can offer several tools and libraries to improve the SEO of the app.\n\n\tNavigation\n\t\tIf you work with Reacjs, you must be familiar with the react–router library that provides the navigation on click events. That library gained the second breath after React Router 5 release when the useHistory hook appeared.\n\t\tHowever, you can’t use react-router with React Native. To manage the transition between multiple screens React Native team developed a totally unique library Navigator. Besides that library, there is another library React Native Navigation that provides 100% native platform navigation on iOS and Android for React Native apps.\n\n\tStorage\n\t\tReact uses local storage while React Native uses AsyncStorage by default (but has some libraries that help to save the data locally).\n\t\tLocal storage on the web means that data has no expiration date and will persist after the browser window is closed.\n\t\tWhen we speak about AsynStorage on iOS, it is backed by native code that stores small values in a serialized dictionary and larger values in separate files. On Android, AsyncStorage uses either RocksDB or SQLite based on what is available.\n\t\tMostly it’s enough to have AsyncStorage option when developing with React Native, but some apps may require to keep data on the device, here you get several options:\n\n\tYou might also like these articles:\n\n\n\n"
}]